// Copyright (c) Illumio, Inc.
// SPDX-License-Identifier: MPL-2.0
// Code generated by providergen. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	resource_schema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	configv1 "github.com/illumio/terraform-provider-illumio-cloudsecure/api/illumio/cloud/config/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ProviderData is the state of the provider, which is passed to resources and data sources at runtime as their ProviderData.
type ProviderData interface {
	// Client returns the CloudSecure Config API client.
	Client() configv1.ConfigServiceClient

	// RequestTimeout returns the maximum duration of each API request.
	RequestTimeout() time.Duration
}

func (p *Provider) Resources(ctx context.Context) []func() resource.Resource {
	resources := p.schema.Resources()
	resp := make([]func() resource.Resource, 0, len(resources))
	for _, r := range resources {
		switch r.TypeName {
		case "application":
			resp = append(resp, func() resource.Resource { return NewApplicationResource(r.Schema) })
		case "application_aws_resources":
			resp = append(resp, func() resource.Resource { return NewApplicationAwsResourcesResource(r.Schema) })
		case "application_azure_resources":
			resp = append(resp, func() resource.Resource { return NewApplicationAzureResourcesResource(r.Schema) })
		case "application_policy_rule":
			resp = append(resp, func() resource.Resource { return NewApplicationPolicyRuleResource(r.Schema) })
		case "aws_account":
			resp = append(resp, func() resource.Resource { return NewAwsAccountResource(r.Schema) })
		case "aws_flow_logs_s3_bucket":
			resp = append(resp, func() resource.Resource { return NewAwsFlowLogsS3BucketResource(r.Schema) })
		case "azure_flow_logs_storage_account":
			resp = append(resp, func() resource.Resource { return NewAzureFlowLogsStorageAccountResource(r.Schema) })
		case "azure_subscription":
			resp = append(resp, func() resource.Resource { return NewAzureSubscriptionResource(r.Schema) })
		case "deployment":
			resp = append(resp, func() resource.Resource { return NewDeploymentResource(r.Schema) })
		case "ip_list":
			resp = append(resp, func() resource.Resource { return NewIpListResource(r.Schema) })
		case "k8s_cluster_onboarding_credential":
			resp = append(resp, func() resource.Resource { return NewK8SClusterOnboardingCredentialResource(r.Schema) })
		case "tag_to_label":
			resp = append(resp, func() resource.Resource { return NewTagToLabelResource(r.Schema) })
		}
	}
	return resp
}

func (p *Provider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		// TODO: Add support for data sources.
	}
}

// ApplicationResource implements the application resource.
type ApplicationResource struct {
	// schema is the schema of the application resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &ApplicationResource{}
var _ resource.ResourceWithImportState = &ApplicationResource{}

// NewApplicationResource returns a new application resource.
func NewApplicationResource(schema resource_schema.Schema) resource.Resource {
	return &ApplicationResource{
		schema: schema,
	}
}

func (r *ApplicationResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_application"
}

func (r *ApplicationResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *ApplicationResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *ApplicationResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data ApplicationResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagReq := NewCreateApplicationRequest(ctx, &data)
	resp.Diagnostics.Append(diagReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "application"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateApplication(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create application, got error: %s", err))
		return
	}

	CopyCreateApplicationResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "application", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ApplicationResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data ApplicationResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagsReq := NewReadApplicationRequest(ctx, &data)
	resp.Diagnostics.Append(diagsReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "application", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadApplication(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No application found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read application, got error: %s", err))
			return
		}
	}

	CopyReadApplicationResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "application", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ApplicationResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData ApplicationResourceModel
	var afterData ApplicationResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewUpdateApplicationRequest(ctx, &beforeData, &afterData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "application", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateApplication(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No application found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update application, got error: %s", err))
			return
		}
	}

	CopyUpdateApplicationResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "application", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *ApplicationResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data ApplicationResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewDeleteApplicationRequest(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "application", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteApplication(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "application", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete application, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "application", "id": protoReq.Id})
}

func (r *ApplicationResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// ApplicationAwsResourcesResource implements the application_aws_resources resource.
type ApplicationAwsResourcesResource struct {
	// schema is the schema of the application_aws_resources resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &ApplicationAwsResourcesResource{}
var _ resource.ResourceWithImportState = &ApplicationAwsResourcesResource{}

// NewApplicationAwsResourcesResource returns a new application_aws_resources resource.
func NewApplicationAwsResourcesResource(schema resource_schema.Schema) resource.Resource {
	return &ApplicationAwsResourcesResource{
		schema: schema,
	}
}

func (r *ApplicationAwsResourcesResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_application_aws_resources"
}

func (r *ApplicationAwsResourcesResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *ApplicationAwsResourcesResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *ApplicationAwsResourcesResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data ApplicationAwsResourcesResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagReq := NewCreateApplicationAwsResourcesRequest(ctx, &data)
	resp.Diagnostics.Append(diagReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "application_aws_resources"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateApplicationAwsResources(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create application_aws_resources, got error: %s", err))
		return
	}

	CopyCreateApplicationAwsResourcesResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "application_aws_resources", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ApplicationAwsResourcesResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data ApplicationAwsResourcesResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagsReq := NewReadApplicationAwsResourcesRequest(ctx, &data)
	resp.Diagnostics.Append(diagsReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "application_aws_resources", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadApplicationAwsResources(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No application_aws_resources found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read application_aws_resources, got error: %s", err))
			return
		}
	}

	CopyReadApplicationAwsResourcesResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "application_aws_resources", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ApplicationAwsResourcesResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData ApplicationAwsResourcesResourceModel
	var afterData ApplicationAwsResourcesResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewUpdateApplicationAwsResourcesRequest(ctx, &beforeData, &afterData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "application_aws_resources", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateApplicationAwsResources(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No application_aws_resources found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update application_aws_resources, got error: %s", err))
			return
		}
	}

	CopyUpdateApplicationAwsResourcesResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "application_aws_resources", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *ApplicationAwsResourcesResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data ApplicationAwsResourcesResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewDeleteApplicationAwsResourcesRequest(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "application_aws_resources", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteApplicationAwsResources(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "application_aws_resources", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete application_aws_resources, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "application_aws_resources", "id": protoReq.Id})
}

func (r *ApplicationAwsResourcesResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// ApplicationAzureResourcesResource implements the application_azure_resources resource.
type ApplicationAzureResourcesResource struct {
	// schema is the schema of the application_azure_resources resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &ApplicationAzureResourcesResource{}
var _ resource.ResourceWithImportState = &ApplicationAzureResourcesResource{}

// NewApplicationAzureResourcesResource returns a new application_azure_resources resource.
func NewApplicationAzureResourcesResource(schema resource_schema.Schema) resource.Resource {
	return &ApplicationAzureResourcesResource{
		schema: schema,
	}
}

func (r *ApplicationAzureResourcesResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_application_azure_resources"
}

func (r *ApplicationAzureResourcesResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *ApplicationAzureResourcesResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *ApplicationAzureResourcesResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data ApplicationAzureResourcesResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagReq := NewCreateApplicationAzureResourcesRequest(ctx, &data)
	resp.Diagnostics.Append(diagReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "application_azure_resources"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateApplicationAzureResources(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create application_azure_resources, got error: %s", err))
		return
	}

	CopyCreateApplicationAzureResourcesResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "application_azure_resources", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ApplicationAzureResourcesResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data ApplicationAzureResourcesResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagsReq := NewReadApplicationAzureResourcesRequest(ctx, &data)
	resp.Diagnostics.Append(diagsReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "application_azure_resources", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadApplicationAzureResources(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No application_azure_resources found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read application_azure_resources, got error: %s", err))
			return
		}
	}

	CopyReadApplicationAzureResourcesResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "application_azure_resources", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ApplicationAzureResourcesResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData ApplicationAzureResourcesResourceModel
	var afterData ApplicationAzureResourcesResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewUpdateApplicationAzureResourcesRequest(ctx, &beforeData, &afterData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "application_azure_resources", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateApplicationAzureResources(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No application_azure_resources found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update application_azure_resources, got error: %s", err))
			return
		}
	}

	CopyUpdateApplicationAzureResourcesResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "application_azure_resources", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *ApplicationAzureResourcesResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data ApplicationAzureResourcesResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewDeleteApplicationAzureResourcesRequest(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "application_azure_resources", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteApplicationAzureResources(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "application_azure_resources", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete application_azure_resources, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "application_azure_resources", "id": protoReq.Id})
}

func (r *ApplicationAzureResourcesResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// ApplicationPolicyRuleResource implements the application_policy_rule resource.
type ApplicationPolicyRuleResource struct {
	// schema is the schema of the application_policy_rule resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &ApplicationPolicyRuleResource{}
var _ resource.ResourceWithImportState = &ApplicationPolicyRuleResource{}

// NewApplicationPolicyRuleResource returns a new application_policy_rule resource.
func NewApplicationPolicyRuleResource(schema resource_schema.Schema) resource.Resource {
	return &ApplicationPolicyRuleResource{
		schema: schema,
	}
}

func (r *ApplicationPolicyRuleResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_application_policy_rule"
}

func (r *ApplicationPolicyRuleResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *ApplicationPolicyRuleResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *ApplicationPolicyRuleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data ApplicationPolicyRuleResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagReq := NewCreateApplicationPolicyRuleRequest(ctx, &data)
	resp.Diagnostics.Append(diagReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "application_policy_rule"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateApplicationPolicyRule(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create application_policy_rule, got error: %s", err))
		return
	}

	CopyCreateApplicationPolicyRuleResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "application_policy_rule", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ApplicationPolicyRuleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data ApplicationPolicyRuleResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagsReq := NewReadApplicationPolicyRuleRequest(ctx, &data)
	resp.Diagnostics.Append(diagsReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "application_policy_rule", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadApplicationPolicyRule(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No application_policy_rule found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read application_policy_rule, got error: %s", err))
			return
		}
	}

	CopyReadApplicationPolicyRuleResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "application_policy_rule", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ApplicationPolicyRuleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData ApplicationPolicyRuleResourceModel
	var afterData ApplicationPolicyRuleResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewUpdateApplicationPolicyRuleRequest(ctx, &beforeData, &afterData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "application_policy_rule", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateApplicationPolicyRule(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No application_policy_rule found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update application_policy_rule, got error: %s", err))
			return
		}
	}

	CopyUpdateApplicationPolicyRuleResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "application_policy_rule", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *ApplicationPolicyRuleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data ApplicationPolicyRuleResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewDeleteApplicationPolicyRuleRequest(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "application_policy_rule", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteApplicationPolicyRule(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "application_policy_rule", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete application_policy_rule, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "application_policy_rule", "id": protoReq.Id})
}

func (r *ApplicationPolicyRuleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// AwsAccountResource implements the aws_account resource.
type AwsAccountResource struct {
	// schema is the schema of the aws_account resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &AwsAccountResource{}
var _ resource.ResourceWithImportState = &AwsAccountResource{}

// NewAwsAccountResource returns a new aws_account resource.
func NewAwsAccountResource(schema resource_schema.Schema) resource.Resource {
	return &AwsAccountResource{
		schema: schema,
	}
}

func (r *AwsAccountResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_aws_account"
}

func (r *AwsAccountResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *AwsAccountResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *AwsAccountResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data AwsAccountResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagReq := NewCreateAwsAccountRequest(ctx, &data)
	resp.Diagnostics.Append(diagReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "aws_account"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateAwsAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create aws_account, got error: %s", err))
		return
	}

	CopyCreateAwsAccountResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "aws_account", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AwsAccountResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data AwsAccountResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagsReq := NewReadAwsAccountRequest(ctx, &data)
	resp.Diagnostics.Append(diagsReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "aws_account", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadAwsAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No aws_account found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read aws_account, got error: %s", err))
			return
		}
	}

	CopyReadAwsAccountResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "aws_account", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AwsAccountResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData AwsAccountResourceModel
	var afterData AwsAccountResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewUpdateAwsAccountRequest(ctx, &beforeData, &afterData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "aws_account", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateAwsAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No aws_account found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update aws_account, got error: %s", err))
			return
		}
	}

	CopyUpdateAwsAccountResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "aws_account", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *AwsAccountResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data AwsAccountResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewDeleteAwsAccountRequest(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "aws_account", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteAwsAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "aws_account", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete aws_account, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "aws_account", "id": protoReq.Id})
}

func (r *AwsAccountResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// AwsFlowLogsS3BucketResource implements the aws_flow_logs_s3_bucket resource.
type AwsFlowLogsS3BucketResource struct {
	// schema is the schema of the aws_flow_logs_s3_bucket resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &AwsFlowLogsS3BucketResource{}
var _ resource.ResourceWithImportState = &AwsFlowLogsS3BucketResource{}

// NewAwsFlowLogsS3BucketResource returns a new aws_flow_logs_s3_bucket resource.
func NewAwsFlowLogsS3BucketResource(schema resource_schema.Schema) resource.Resource {
	return &AwsFlowLogsS3BucketResource{
		schema: schema,
	}
}

func (r *AwsFlowLogsS3BucketResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_aws_flow_logs_s3_bucket"
}

func (r *AwsFlowLogsS3BucketResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *AwsFlowLogsS3BucketResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *AwsFlowLogsS3BucketResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data AwsFlowLogsS3BucketResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagReq := NewCreateAwsFlowLogsS3BucketRequest(ctx, &data)
	resp.Diagnostics.Append(diagReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "aws_flow_logs_s3_bucket"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateAwsFlowLogsS3Bucket(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create aws_flow_logs_s3_bucket, got error: %s", err))
		return
	}

	CopyCreateAwsFlowLogsS3BucketResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AwsFlowLogsS3BucketResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data AwsFlowLogsS3BucketResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagsReq := NewReadAwsFlowLogsS3BucketRequest(ctx, &data)
	resp.Diagnostics.Append(diagsReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadAwsFlowLogsS3Bucket(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No aws_flow_logs_s3_bucket found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read aws_flow_logs_s3_bucket, got error: %s", err))
			return
		}
	}

	CopyReadAwsFlowLogsS3BucketResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AwsFlowLogsS3BucketResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData AwsFlowLogsS3BucketResourceModel
	var afterData AwsFlowLogsS3BucketResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewUpdateAwsFlowLogsS3BucketRequest(ctx, &beforeData, &afterData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateAwsFlowLogsS3Bucket(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No aws_flow_logs_s3_bucket found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update aws_flow_logs_s3_bucket, got error: %s", err))
			return
		}
	}

	CopyUpdateAwsFlowLogsS3BucketResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *AwsFlowLogsS3BucketResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data AwsFlowLogsS3BucketResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewDeleteAwsFlowLogsS3BucketRequest(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteAwsFlowLogsS3Bucket(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete aws_flow_logs_s3_bucket, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoReq.Id})
}

func (r *AwsFlowLogsS3BucketResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// AzureFlowLogsStorageAccountResource implements the azure_flow_logs_storage_account resource.
type AzureFlowLogsStorageAccountResource struct {
	// schema is the schema of the azure_flow_logs_storage_account resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &AzureFlowLogsStorageAccountResource{}
var _ resource.ResourceWithImportState = &AzureFlowLogsStorageAccountResource{}

// NewAzureFlowLogsStorageAccountResource returns a new azure_flow_logs_storage_account resource.
func NewAzureFlowLogsStorageAccountResource(schema resource_schema.Schema) resource.Resource {
	return &AzureFlowLogsStorageAccountResource{
		schema: schema,
	}
}

func (r *AzureFlowLogsStorageAccountResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_azure_flow_logs_storage_account"
}

func (r *AzureFlowLogsStorageAccountResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *AzureFlowLogsStorageAccountResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *AzureFlowLogsStorageAccountResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data AzureFlowLogsStorageAccountResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagReq := NewCreateAzureFlowLogsStorageAccountRequest(ctx, &data)
	resp.Diagnostics.Append(diagReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "azure_flow_logs_storage_account"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateAzureFlowLogsStorageAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create azure_flow_logs_storage_account, got error: %s", err))
		return
	}

	CopyCreateAzureFlowLogsStorageAccountResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AzureFlowLogsStorageAccountResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data AzureFlowLogsStorageAccountResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagsReq := NewReadAzureFlowLogsStorageAccountRequest(ctx, &data)
	resp.Diagnostics.Append(diagsReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadAzureFlowLogsStorageAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No azure_flow_logs_storage_account found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read azure_flow_logs_storage_account, got error: %s", err))
			return
		}
	}

	CopyReadAzureFlowLogsStorageAccountResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AzureFlowLogsStorageAccountResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData AzureFlowLogsStorageAccountResourceModel
	var afterData AzureFlowLogsStorageAccountResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewUpdateAzureFlowLogsStorageAccountRequest(ctx, &beforeData, &afterData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateAzureFlowLogsStorageAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No azure_flow_logs_storage_account found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update azure_flow_logs_storage_account, got error: %s", err))
			return
		}
	}

	CopyUpdateAzureFlowLogsStorageAccountResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *AzureFlowLogsStorageAccountResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data AzureFlowLogsStorageAccountResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewDeleteAzureFlowLogsStorageAccountRequest(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteAzureFlowLogsStorageAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete azure_flow_logs_storage_account, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoReq.Id})
}

func (r *AzureFlowLogsStorageAccountResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// AzureSubscriptionResource implements the azure_subscription resource.
type AzureSubscriptionResource struct {
	// schema is the schema of the azure_subscription resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &AzureSubscriptionResource{}
var _ resource.ResourceWithImportState = &AzureSubscriptionResource{}

// NewAzureSubscriptionResource returns a new azure_subscription resource.
func NewAzureSubscriptionResource(schema resource_schema.Schema) resource.Resource {
	return &AzureSubscriptionResource{
		schema: schema,
	}
}

func (r *AzureSubscriptionResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_azure_subscription"
}

func (r *AzureSubscriptionResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *AzureSubscriptionResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *AzureSubscriptionResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data AzureSubscriptionResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagReq := NewCreateAzureSubscriptionRequest(ctx, &data)
	resp.Diagnostics.Append(diagReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "azure_subscription"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateAzureSubscription(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create azure_subscription, got error: %s", err))
		return
	}

	CopyCreateAzureSubscriptionResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "azure_subscription", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AzureSubscriptionResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data AzureSubscriptionResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagsReq := NewReadAzureSubscriptionRequest(ctx, &data)
	resp.Diagnostics.Append(diagsReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "azure_subscription", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadAzureSubscription(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No azure_subscription found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read azure_subscription, got error: %s", err))
			return
		}
	}

	CopyReadAzureSubscriptionResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "azure_subscription", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AzureSubscriptionResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData AzureSubscriptionResourceModel
	var afterData AzureSubscriptionResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewUpdateAzureSubscriptionRequest(ctx, &beforeData, &afterData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "azure_subscription", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateAzureSubscription(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No azure_subscription found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update azure_subscription, got error: %s", err))
			return
		}
	}

	CopyUpdateAzureSubscriptionResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "azure_subscription", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *AzureSubscriptionResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data AzureSubscriptionResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewDeleteAzureSubscriptionRequest(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "azure_subscription", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteAzureSubscription(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "azure_subscription", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete azure_subscription, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "azure_subscription", "id": protoReq.Id})
}

func (r *AzureSubscriptionResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// DeploymentResource implements the deployment resource.
type DeploymentResource struct {
	// schema is the schema of the deployment resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &DeploymentResource{}
var _ resource.ResourceWithImportState = &DeploymentResource{}

// NewDeploymentResource returns a new deployment resource.
func NewDeploymentResource(schema resource_schema.Schema) resource.Resource {
	return &DeploymentResource{
		schema: schema,
	}
}

func (r *DeploymentResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_deployment"
}

func (r *DeploymentResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *DeploymentResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *DeploymentResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data DeploymentResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagReq := NewCreateDeploymentRequest(ctx, &data)
	resp.Diagnostics.Append(diagReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "deployment"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateDeployment(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create deployment, got error: %s", err))
		return
	}

	CopyCreateDeploymentResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "deployment", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DeploymentResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data DeploymentResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagsReq := NewReadDeploymentRequest(ctx, &data)
	resp.Diagnostics.Append(diagsReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "deployment", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadDeployment(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No deployment found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read deployment, got error: %s", err))
			return
		}
	}

	CopyReadDeploymentResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "deployment", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DeploymentResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData DeploymentResourceModel
	var afterData DeploymentResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewUpdateDeploymentRequest(ctx, &beforeData, &afterData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "deployment", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateDeployment(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No deployment found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update deployment, got error: %s", err))
			return
		}
	}

	CopyUpdateDeploymentResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "deployment", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *DeploymentResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data DeploymentResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewDeleteDeploymentRequest(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "deployment", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteDeployment(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "deployment", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete deployment, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "deployment", "id": protoReq.Id})
}

func (r *DeploymentResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// IpListResource implements the ip_list resource.
type IpListResource struct {
	// schema is the schema of the ip_list resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &IpListResource{}
var _ resource.ResourceWithImportState = &IpListResource{}

// NewIpListResource returns a new ip_list resource.
func NewIpListResource(schema resource_schema.Schema) resource.Resource {
	return &IpListResource{
		schema: schema,
	}
}

func (r *IpListResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ip_list"
}

func (r *IpListResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *IpListResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *IpListResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data IpListResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagReq := NewCreateIpListRequest(ctx, &data)
	resp.Diagnostics.Append(diagReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "ip_list"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateIpList(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create ip_list, got error: %s", err))
		return
	}

	CopyCreateIpListResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "ip_list", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *IpListResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data IpListResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagsReq := NewReadIpListRequest(ctx, &data)
	resp.Diagnostics.Append(diagsReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "ip_list", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadIpList(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No ip_list found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read ip_list, got error: %s", err))
			return
		}
	}

	CopyReadIpListResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "ip_list", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *IpListResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData IpListResourceModel
	var afterData IpListResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewUpdateIpListRequest(ctx, &beforeData, &afterData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "ip_list", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateIpList(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No ip_list found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update ip_list, got error: %s", err))
			return
		}
	}

	CopyUpdateIpListResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "ip_list", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *IpListResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data IpListResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewDeleteIpListRequest(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "ip_list", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteIpList(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "ip_list", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete ip_list, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "ip_list", "id": protoReq.Id})
}

func (r *IpListResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// K8SClusterOnboardingCredentialResource implements the k8s_cluster_onboarding_credential resource.
type K8SClusterOnboardingCredentialResource struct {
	// schema is the schema of the k8s_cluster_onboarding_credential resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &K8SClusterOnboardingCredentialResource{}
var _ resource.ResourceWithImportState = &K8SClusterOnboardingCredentialResource{}

// NewK8SClusterOnboardingCredentialResource returns a new k8s_cluster_onboarding_credential resource.
func NewK8SClusterOnboardingCredentialResource(schema resource_schema.Schema) resource.Resource {
	return &K8SClusterOnboardingCredentialResource{
		schema: schema,
	}
}

func (r *K8SClusterOnboardingCredentialResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_k8s_cluster_onboarding_credential"
}

func (r *K8SClusterOnboardingCredentialResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *K8SClusterOnboardingCredentialResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *K8SClusterOnboardingCredentialResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data K8SClusterOnboardingCredentialResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagReq := NewCreateK8SClusterOnboardingCredentialRequest(ctx, &data)
	resp.Diagnostics.Append(diagReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "k8s_cluster_onboarding_credential"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateK8SClusterOnboardingCredential(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create k8s_cluster_onboarding_credential, got error: %s", err))
		return
	}

	CopyCreateK8SClusterOnboardingCredentialResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *K8SClusterOnboardingCredentialResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data K8SClusterOnboardingCredentialResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagsReq := NewReadK8SClusterOnboardingCredentialRequest(ctx, &data)
	resp.Diagnostics.Append(diagsReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadK8SClusterOnboardingCredential(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No k8s_cluster_onboarding_credential found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read k8s_cluster_onboarding_credential, got error: %s", err))
			return
		}
	}

	CopyReadK8SClusterOnboardingCredentialResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *K8SClusterOnboardingCredentialResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData K8SClusterOnboardingCredentialResourceModel
	var afterData K8SClusterOnboardingCredentialResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewUpdateK8SClusterOnboardingCredentialRequest(ctx, &beforeData, &afterData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateK8SClusterOnboardingCredential(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No k8s_cluster_onboarding_credential found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update k8s_cluster_onboarding_credential, got error: %s", err))
			return
		}
	}

	CopyUpdateK8SClusterOnboardingCredentialResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *K8SClusterOnboardingCredentialResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data K8SClusterOnboardingCredentialResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewDeleteK8SClusterOnboardingCredentialRequest(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteK8SClusterOnboardingCredential(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete k8s_cluster_onboarding_credential, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoReq.Id})
}

func (r *K8SClusterOnboardingCredentialResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// TagToLabelResource implements the tag_to_label resource.
type TagToLabelResource struct {
	// schema is the schema of the tag_to_label resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &TagToLabelResource{}
var _ resource.ResourceWithImportState = &TagToLabelResource{}

// NewTagToLabelResource returns a new tag_to_label resource.
func NewTagToLabelResource(schema resource_schema.Schema) resource.Resource {
	return &TagToLabelResource{
		schema: schema,
	}
}

func (r *TagToLabelResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_tag_to_label"
}

func (r *TagToLabelResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *TagToLabelResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *TagToLabelResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data TagToLabelResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagReq := NewCreateTagToLabelRequest(ctx, &data)
	resp.Diagnostics.Append(diagReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "tag_to_label"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateTagToLabel(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create tag_to_label, got error: %s", err))
		return
	}

	CopyCreateTagToLabelResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "tag_to_label", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *TagToLabelResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data TagToLabelResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diagsReq := NewReadTagToLabelRequest(ctx, &data)
	resp.Diagnostics.Append(diagsReq...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "tag_to_label", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadTagToLabel(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No tag_to_label found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read tag_to_label, got error: %s", err))
			return
		}
	}

	CopyReadTagToLabelResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "tag_to_label", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *TagToLabelResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData TagToLabelResourceModel
	var afterData TagToLabelResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewUpdateTagToLabelRequest(ctx, &beforeData, &afterData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "tag_to_label", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateTagToLabel(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No tag_to_label found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update tag_to_label, got error: %s", err))
			return
		}
	}

	CopyUpdateTagToLabelResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "tag_to_label", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *TagToLabelResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data TagToLabelResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq, diags := NewDeleteTagToLabelRequest(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "tag_to_label", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteTagToLabel(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "tag_to_label", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete tag_to_label, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "tag_to_label", "id": protoReq.Id})
}

func (r *TagToLabelResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

type ApplicationResourceModel struct {
	Id           types.String `tfsdk:"id"`
	DeploymentId types.String `tfsdk:"deployment_id"`
	Description  types.String `tfsdk:"description"`
	Name         types.String `tfsdk:"name"`
}

type ApplicationAwsResourcesResourceModel struct {
	Id                                     types.String `tfsdk:"id"`
	AccountId                              types.String `tfsdk:"account_id"`
	ApplicationId                          types.String `tfsdk:"application_id"`
	ApplicationResourceIds                 types.List   `tfsdk:"application_resource_ids"`
	Arns                                   types.List   `tfsdk:"arns"`
	AwsCustomerGatewayIds                  types.List   `tfsdk:"aws_customer_gateway_ids"`
	AwsDxConnectionIds                     types.List   `tfsdk:"aws_dx_connection_ids"`
	AwsDxVirtualInterfaceIds               types.List   `tfsdk:"aws_dx_virtual_interface_ids"`
	AwsEbsVolumeIds                        types.List   `tfsdk:"aws_ebs_volume_ids"`
	AwsEc2InstanceConnectEndpointIds       types.List   `tfsdk:"aws_ec2_instance_connect_endpoint_ids"`
	AwsEc2TransitGatewayAttachmentIds      types.List   `tfsdk:"aws_ec2_transit_gateway_attachment_ids"`
	AwsEc2TransitGatewayIds                types.List   `tfsdk:"aws_ec2_transit_gateway_ids"`
	AwsEc2TransitGatewayMulticastDomainIds types.List   `tfsdk:"aws_ec2_transit_gateway_multicast_domain_ids"`
	AwsEc2TransitGatewayRouteTableIds      types.List   `tfsdk:"aws_ec2_transit_gateway_route_table_ids"`
	AwsEgressOnlyInternetGatewayIds        types.List   `tfsdk:"aws_egress_only_internet_gateway_ids"`
	AwsEipIds                              types.List   `tfsdk:"aws_eip_ids"`
	AwsFlowLogIds                          types.List   `tfsdk:"aws_flow_log_ids"`
	AwsInstancesIds                        types.List   `tfsdk:"aws_instances_ids"`
	AwsInternetGatewayIds                  types.List   `tfsdk:"aws_internet_gateway_ids"`
	AwsNatGatewayIds                       types.List   `tfsdk:"aws_nat_gateway_ids"`
	AwsNetworkAclIds                       types.List   `tfsdk:"aws_network_acl_ids"`
	AwsNetworkInterfaceIds                 types.List   `tfsdk:"aws_network_interface_ids"`
	AwsRdsClusterIds                       types.List   `tfsdk:"aws_rds_cluster_ids"`
	AwsRouteTableIds                       types.List   `tfsdk:"aws_route_table_ids"`
	AwsSecurityGroupIds                    types.List   `tfsdk:"aws_security_group_ids"`
	AwsSecurityGroupRuleIds                types.List   `tfsdk:"aws_security_group_rule_ids"`
	AwsSpotFleetRequestIds                 types.List   `tfsdk:"aws_spot_fleet_request_ids"`
	AwsSpotInstanceRequestIds              types.List   `tfsdk:"aws_spot_instance_request_ids"`
	AwsSubnetIds                           types.List   `tfsdk:"aws_subnet_ids"`
	AwsVpcEndpointIds                      types.List   `tfsdk:"aws_vpc_endpoint_ids"`
	AwsVpcEndpointServiceIds               types.List   `tfsdk:"aws_vpc_endpoint_service_ids"`
	AwsVpcIds                              types.List   `tfsdk:"aws_vpc_ids"`
	AwsVpcPeeringConnectionIds             types.List   `tfsdk:"aws_vpc_peering_connection_ids"`
	AwsVpnConnectionIds                    types.List   `tfsdk:"aws_vpn_connection_ids"`
	AwsVpnGatewayIds                       types.List   `tfsdk:"aws_vpn_gateway_ids"`
}

type ApplicationAzureResourcesResourceModel struct {
	Id                     types.String `tfsdk:"id"`
	ApplicationId          types.String `tfsdk:"application_id"`
	ApplicationResourceIds types.List   `tfsdk:"application_resource_ids"`
	ResourceIds            types.List   `tfsdk:"resource_ids"`
	SubscriptionId         types.String `tfsdk:"subscription_id"`
}

type ApplicationPolicyRuleResourceModel struct {
	Id            types.String `tfsdk:"id"`
	Action        types.String `tfsdk:"action"`
	ApplicationId types.String `tfsdk:"application_id"`
	Description   types.String `tfsdk:"description"`
	ExternalScope types.Bool   `tfsdk:"external_scope"`
	FromIpListIds types.List   `tfsdk:"from_ip_list_ids"`
	FromLabels    types.List   `tfsdk:"from_labels"`
	ToIpListIds   types.List   `tfsdk:"to_ip_list_ids"`
	ToLabels      types.List   `tfsdk:"to_labels"`
	ToPortRanges  types.List   `tfsdk:"to_port_ranges"`
}

type AwsAccountResourceModel struct {
	Id             types.String `tfsdk:"id"`
	AccountId      types.String `tfsdk:"account_id"`
	Mode           types.String `tfsdk:"mode"`
	Name           types.String `tfsdk:"name"`
	OrganizationId types.String `tfsdk:"organization_id"`
	RoleArn        types.String `tfsdk:"role_arn"`
	RoleExternalId types.String `tfsdk:"role_external_id"`
}

type AwsFlowLogsS3BucketResourceModel struct {
	Id          types.String `tfsdk:"id"`
	AccountId   types.String `tfsdk:"account_id"`
	S3BucketArn types.String `tfsdk:"s3_bucket_arn"`
}

type AzureFlowLogsStorageAccountResourceModel struct {
	Id                       types.String `tfsdk:"id"`
	StorageAccountResourceId types.String `tfsdk:"storage_account_resource_id"`
	SubscriptionId           types.String `tfsdk:"subscription_id"`
}

type AzureSubscriptionResourceModel struct {
	Id             types.String `tfsdk:"id"`
	ClientId       types.String `tfsdk:"client_id"`
	ClientSecret   types.String `tfsdk:"client_secret"`
	Mode           types.String `tfsdk:"mode"`
	Name           types.String `tfsdk:"name"`
	SubscriptionId types.String `tfsdk:"subscription_id"`
	TenantId       types.String `tfsdk:"tenant_id"`
}

type DeploymentResourceModel struct {
	Id                   types.String `tfsdk:"id"`
	AwsAccountIds        types.List   `tfsdk:"aws_account_ids"`
	AwsRegions           types.List   `tfsdk:"aws_regions"`
	AwsSubnetIds         types.List   `tfsdk:"aws_subnet_ids"`
	AwsTags              types.List   `tfsdk:"aws_tags"`
	AwsVpcIds            types.List   `tfsdk:"aws_vpc_ids"`
	AzureRegions         types.List   `tfsdk:"azure_regions"`
	AzureSubnetIds       types.List   `tfsdk:"azure_subnet_ids"`
	AzureSubscriptionIds types.List   `tfsdk:"azure_subscription_ids"`
	AzureTags            types.List   `tfsdk:"azure_tags"`
	AzureVnetIds         types.List   `tfsdk:"azure_vnet_ids"`
	Description          types.String `tfsdk:"description"`
	Name                 types.String `tfsdk:"name"`
}

type IpListResourceModel struct {
	Id          types.String `tfsdk:"id"`
	Description types.String `tfsdk:"description"`
	IpAddresses types.List   `tfsdk:"ip_addresses"`
	IpRanges    types.List   `tfsdk:"ip_ranges"`
	Name        types.String `tfsdk:"name"`
}

type K8SClusterOnboardingCredentialResourceModel struct {
	Id            types.String `tfsdk:"id"`
	ClientId      types.String `tfsdk:"client_id"`
	ClientSecret  types.String `tfsdk:"client_secret"`
	CreatedAt     types.String `tfsdk:"created_at"`
	Description   types.String `tfsdk:"description"`
	IllumioRegion types.String `tfsdk:"illumio_region"`
	Name          types.String `tfsdk:"name"`
}

type TagToLabelResourceModel struct {
	Id           types.String `tfsdk:"id"`
	AwsTagKeys   types.Set    `tfsdk:"aws_tag_keys"`
	AzureTagKeys types.Set    `tfsdk:"azure_tag_keys"`
	Icon         types.Object `tfsdk:"icon"`
	Key          types.String `tfsdk:"key"`
	Name         types.String `tfsdk:"name"`
}

func NewCreateApplicationRequest(ctx context.Context, data *ApplicationResourceModel) (*configv1.CreateApplicationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.CreateApplicationRequest{}
	if !data.DeploymentId.IsUnknown() && !data.DeploymentId.IsNull() {
		var dataValue attr.Value = data.DeploymentId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.DeploymentId = protoValue
	}
	if !data.Description.IsUnknown() && !data.Description.IsNull() {
		var dataValue attr.Value = data.Description
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Description = &protoValue
	}
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		var dataValue attr.Value = data.Name
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Name = protoValue
	}
	return proto, diags
}

func NewReadApplicationRequest(ctx context.Context, data *ApplicationResourceModel) (*configv1.ReadApplicationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.ReadApplicationRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewDeleteApplicationRequest(ctx context.Context, data *ApplicationResourceModel) (*configv1.DeleteApplicationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.DeleteApplicationRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewCreateApplicationAwsResourcesRequest(ctx context.Context, data *ApplicationAwsResourcesResourceModel) (*configv1.CreateApplicationAwsResourcesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.CreateApplicationAwsResourcesRequest{}
	if !data.AccountId.IsUnknown() && !data.AccountId.IsNull() {
		var dataValue attr.Value = data.AccountId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.AccountId = protoValue
	}
	if !data.ApplicationId.IsUnknown() && !data.ApplicationId.IsNull() {
		var dataValue attr.Value = data.ApplicationId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.ApplicationId = protoValue
	}
	if !data.Arns.IsUnknown() && !data.Arns.IsNull() {
		var dataValue attr.Value = data.Arns
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.Arns = protoValue
	}
	if !data.AwsCustomerGatewayIds.IsUnknown() && !data.AwsCustomerGatewayIds.IsNull() {
		var dataValue attr.Value = data.AwsCustomerGatewayIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsCustomerGatewayIds = protoValue
	}
	if !data.AwsDxConnectionIds.IsUnknown() && !data.AwsDxConnectionIds.IsNull() {
		var dataValue attr.Value = data.AwsDxConnectionIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsDxConnectionIds = protoValue
	}
	if !data.AwsDxVirtualInterfaceIds.IsUnknown() && !data.AwsDxVirtualInterfaceIds.IsNull() {
		var dataValue attr.Value = data.AwsDxVirtualInterfaceIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsDxVirtualInterfaceIds = protoValue
	}
	if !data.AwsEbsVolumeIds.IsUnknown() && !data.AwsEbsVolumeIds.IsNull() {
		var dataValue attr.Value = data.AwsEbsVolumeIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsEbsVolumeIds = protoValue
	}
	if !data.AwsEc2InstanceConnectEndpointIds.IsUnknown() && !data.AwsEc2InstanceConnectEndpointIds.IsNull() {
		var dataValue attr.Value = data.AwsEc2InstanceConnectEndpointIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsEc2InstanceConnectEndpointIds = protoValue
	}
	if !data.AwsEc2TransitGatewayAttachmentIds.IsUnknown() && !data.AwsEc2TransitGatewayAttachmentIds.IsNull() {
		var dataValue attr.Value = data.AwsEc2TransitGatewayAttachmentIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsEc2TransitGatewayAttachmentIds = protoValue
	}
	if !data.AwsEc2TransitGatewayIds.IsUnknown() && !data.AwsEc2TransitGatewayIds.IsNull() {
		var dataValue attr.Value = data.AwsEc2TransitGatewayIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsEc2TransitGatewayIds = protoValue
	}
	if !data.AwsEc2TransitGatewayMulticastDomainIds.IsUnknown() && !data.AwsEc2TransitGatewayMulticastDomainIds.IsNull() {
		var dataValue attr.Value = data.AwsEc2TransitGatewayMulticastDomainIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsEc2TransitGatewayMulticastDomainIds = protoValue
	}
	if !data.AwsEc2TransitGatewayRouteTableIds.IsUnknown() && !data.AwsEc2TransitGatewayRouteTableIds.IsNull() {
		var dataValue attr.Value = data.AwsEc2TransitGatewayRouteTableIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsEc2TransitGatewayRouteTableIds = protoValue
	}
	if !data.AwsEgressOnlyInternetGatewayIds.IsUnknown() && !data.AwsEgressOnlyInternetGatewayIds.IsNull() {
		var dataValue attr.Value = data.AwsEgressOnlyInternetGatewayIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsEgressOnlyInternetGatewayIds = protoValue
	}
	if !data.AwsEipIds.IsUnknown() && !data.AwsEipIds.IsNull() {
		var dataValue attr.Value = data.AwsEipIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsEipIds = protoValue
	}
	if !data.AwsFlowLogIds.IsUnknown() && !data.AwsFlowLogIds.IsNull() {
		var dataValue attr.Value = data.AwsFlowLogIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsFlowLogIds = protoValue
	}
	if !data.AwsInstancesIds.IsUnknown() && !data.AwsInstancesIds.IsNull() {
		var dataValue attr.Value = data.AwsInstancesIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsInstancesIds = protoValue
	}
	if !data.AwsInternetGatewayIds.IsUnknown() && !data.AwsInternetGatewayIds.IsNull() {
		var dataValue attr.Value = data.AwsInternetGatewayIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsInternetGatewayIds = protoValue
	}
	if !data.AwsNatGatewayIds.IsUnknown() && !data.AwsNatGatewayIds.IsNull() {
		var dataValue attr.Value = data.AwsNatGatewayIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsNatGatewayIds = protoValue
	}
	if !data.AwsNetworkAclIds.IsUnknown() && !data.AwsNetworkAclIds.IsNull() {
		var dataValue attr.Value = data.AwsNetworkAclIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsNetworkAclIds = protoValue
	}
	if !data.AwsNetworkInterfaceIds.IsUnknown() && !data.AwsNetworkInterfaceIds.IsNull() {
		var dataValue attr.Value = data.AwsNetworkInterfaceIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsNetworkInterfaceIds = protoValue
	}
	if !data.AwsRdsClusterIds.IsUnknown() && !data.AwsRdsClusterIds.IsNull() {
		var dataValue attr.Value = data.AwsRdsClusterIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsRdsClusterIds = protoValue
	}
	if !data.AwsRouteTableIds.IsUnknown() && !data.AwsRouteTableIds.IsNull() {
		var dataValue attr.Value = data.AwsRouteTableIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsRouteTableIds = protoValue
	}
	if !data.AwsSecurityGroupIds.IsUnknown() && !data.AwsSecurityGroupIds.IsNull() {
		var dataValue attr.Value = data.AwsSecurityGroupIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsSecurityGroupIds = protoValue
	}
	if !data.AwsSecurityGroupRuleIds.IsUnknown() && !data.AwsSecurityGroupRuleIds.IsNull() {
		var dataValue attr.Value = data.AwsSecurityGroupRuleIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsSecurityGroupRuleIds = protoValue
	}
	if !data.AwsSpotFleetRequestIds.IsUnknown() && !data.AwsSpotFleetRequestIds.IsNull() {
		var dataValue attr.Value = data.AwsSpotFleetRequestIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsSpotFleetRequestIds = protoValue
	}
	if !data.AwsSpotInstanceRequestIds.IsUnknown() && !data.AwsSpotInstanceRequestIds.IsNull() {
		var dataValue attr.Value = data.AwsSpotInstanceRequestIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsSpotInstanceRequestIds = protoValue
	}
	if !data.AwsSubnetIds.IsUnknown() && !data.AwsSubnetIds.IsNull() {
		var dataValue attr.Value = data.AwsSubnetIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsSubnetIds = protoValue
	}
	if !data.AwsVpcEndpointIds.IsUnknown() && !data.AwsVpcEndpointIds.IsNull() {
		var dataValue attr.Value = data.AwsVpcEndpointIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsVpcEndpointIds = protoValue
	}
	if !data.AwsVpcEndpointServiceIds.IsUnknown() && !data.AwsVpcEndpointServiceIds.IsNull() {
		var dataValue attr.Value = data.AwsVpcEndpointServiceIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsVpcEndpointServiceIds = protoValue
	}
	if !data.AwsVpcIds.IsUnknown() && !data.AwsVpcIds.IsNull() {
		var dataValue attr.Value = data.AwsVpcIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsVpcIds = protoValue
	}
	if !data.AwsVpcPeeringConnectionIds.IsUnknown() && !data.AwsVpcPeeringConnectionIds.IsNull() {
		var dataValue attr.Value = data.AwsVpcPeeringConnectionIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsVpcPeeringConnectionIds = protoValue
	}
	if !data.AwsVpnConnectionIds.IsUnknown() && !data.AwsVpnConnectionIds.IsNull() {
		var dataValue attr.Value = data.AwsVpnConnectionIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsVpnConnectionIds = protoValue
	}
	if !data.AwsVpnGatewayIds.IsUnknown() && !data.AwsVpnGatewayIds.IsNull() {
		var dataValue attr.Value = data.AwsVpnGatewayIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsVpnGatewayIds = protoValue
	}
	return proto, diags
}

func NewReadApplicationAwsResourcesRequest(ctx context.Context, data *ApplicationAwsResourcesResourceModel) (*configv1.ReadApplicationAwsResourcesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.ReadApplicationAwsResourcesRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	if !data.AccountId.IsUnknown() && !data.AccountId.IsNull() {
		var dataValue attr.Value = data.AccountId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.AccountId = protoValue
	}
	if !data.ApplicationId.IsUnknown() && !data.ApplicationId.IsNull() {
		var dataValue attr.Value = data.ApplicationId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.ApplicationId = protoValue
	}
	if !data.ApplicationResourceIds.IsUnknown() && !data.ApplicationResourceIds.IsNull() {
		var dataValue attr.Value = data.ApplicationResourceIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.ApplicationResourceIds = protoValue
	}
	return proto, diags
}

func NewDeleteApplicationAwsResourcesRequest(ctx context.Context, data *ApplicationAwsResourcesResourceModel) (*configv1.DeleteApplicationAwsResourcesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.DeleteApplicationAwsResourcesRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	if !data.AccountId.IsUnknown() && !data.AccountId.IsNull() {
		var dataValue attr.Value = data.AccountId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.AccountId = protoValue
	}
	if !data.ApplicationId.IsUnknown() && !data.ApplicationId.IsNull() {
		var dataValue attr.Value = data.ApplicationId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.ApplicationId = protoValue
	}
	if !data.ApplicationResourceIds.IsUnknown() && !data.ApplicationResourceIds.IsNull() {
		var dataValue attr.Value = data.ApplicationResourceIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.ApplicationResourceIds = protoValue
	}
	return proto, diags
}

func NewCreateApplicationAzureResourcesRequest(ctx context.Context, data *ApplicationAzureResourcesResourceModel) (*configv1.CreateApplicationAzureResourcesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.CreateApplicationAzureResourcesRequest{}
	if !data.ApplicationId.IsUnknown() && !data.ApplicationId.IsNull() {
		var dataValue attr.Value = data.ApplicationId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.ApplicationId = protoValue
	}
	if !data.ResourceIds.IsUnknown() && !data.ResourceIds.IsNull() {
		var dataValue attr.Value = data.ResourceIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.ResourceIds = protoValue
	}
	if !data.SubscriptionId.IsUnknown() && !data.SubscriptionId.IsNull() {
		var dataValue attr.Value = data.SubscriptionId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.SubscriptionId = protoValue
	}
	return proto, diags
}

func NewReadApplicationAzureResourcesRequest(ctx context.Context, data *ApplicationAzureResourcesResourceModel) (*configv1.ReadApplicationAzureResourcesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.ReadApplicationAzureResourcesRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	if !data.ApplicationId.IsUnknown() && !data.ApplicationId.IsNull() {
		var dataValue attr.Value = data.ApplicationId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.ApplicationId = protoValue
	}
	if !data.ApplicationResourceIds.IsUnknown() && !data.ApplicationResourceIds.IsNull() {
		var dataValue attr.Value = data.ApplicationResourceIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.ApplicationResourceIds = protoValue
	}
	if !data.SubscriptionId.IsUnknown() && !data.SubscriptionId.IsNull() {
		var dataValue attr.Value = data.SubscriptionId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.SubscriptionId = protoValue
	}
	return proto, diags
}

func NewDeleteApplicationAzureResourcesRequest(ctx context.Context, data *ApplicationAzureResourcesResourceModel) (*configv1.DeleteApplicationAzureResourcesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.DeleteApplicationAzureResourcesRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	if !data.ApplicationId.IsUnknown() && !data.ApplicationId.IsNull() {
		var dataValue attr.Value = data.ApplicationId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.ApplicationId = protoValue
	}
	if !data.ApplicationResourceIds.IsUnknown() && !data.ApplicationResourceIds.IsNull() {
		var dataValue attr.Value = data.ApplicationResourceIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.ApplicationResourceIds = protoValue
	}
	if !data.SubscriptionId.IsUnknown() && !data.SubscriptionId.IsNull() {
		var dataValue attr.Value = data.SubscriptionId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.SubscriptionId = protoValue
	}
	return proto, diags
}

func NewCreateApplicationPolicyRuleRequest(ctx context.Context, data *ApplicationPolicyRuleResourceModel) (*configv1.CreateApplicationPolicyRuleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.CreateApplicationPolicyRuleRequest{}
	if !data.Action.IsUnknown() && !data.Action.IsNull() {
		var dataValue attr.Value = data.Action
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Action = protoValue
	}
	if !data.ApplicationId.IsUnknown() && !data.ApplicationId.IsNull() {
		var dataValue attr.Value = data.ApplicationId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.ApplicationId = protoValue
	}
	if !data.Description.IsUnknown() && !data.Description.IsNull() {
		var dataValue attr.Value = data.Description
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Description = &protoValue
	}
	if !data.ExternalScope.IsUnknown() && !data.ExternalScope.IsNull() {
		var dataValue attr.Value = data.ExternalScope
		var protoValue bool
		protoValue = dataValue.(types.Bool).ValueBool()
		proto.ExternalScope = &protoValue
	}
	if !data.FromIpListIds.IsUnknown() && !data.FromIpListIds.IsNull() {
		var dataValue attr.Value = data.FromIpListIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.FromIpListIds = protoValue
	}
	if !data.FromLabels.IsUnknown() && !data.FromLabels.IsNull() {
		var dataValue attr.Value = data.FromLabels
		var protoValue []*configv1.ApplicationPolicyRule_FromLabels
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]*configv1.ApplicationPolicyRule_FromLabels, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue *configv1.ApplicationPolicyRule_FromLabels
				protoValue, newDiags := ConvertDataValueToApplicationPolicyRule_FromLabelsProto(ctx, dataValue)
				diags.Append(newDiags...)
				if diags.HasError() {
					return nil, diags
				}
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.FromLabels = protoValue
	}
	if !data.ToIpListIds.IsUnknown() && !data.ToIpListIds.IsNull() {
		var dataValue attr.Value = data.ToIpListIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.ToIpListIds = protoValue
	}
	if !data.ToLabels.IsUnknown() && !data.ToLabels.IsNull() {
		var dataValue attr.Value = data.ToLabels
		var protoValue []*configv1.ApplicationPolicyRule_ToLabels
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]*configv1.ApplicationPolicyRule_ToLabels, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue *configv1.ApplicationPolicyRule_ToLabels
				protoValue, newDiags := ConvertDataValueToApplicationPolicyRule_ToLabelsProto(ctx, dataValue)
				diags.Append(newDiags...)
				if diags.HasError() {
					return nil, diags
				}
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.ToLabels = protoValue
	}
	if !data.ToPortRanges.IsUnknown() && !data.ToPortRanges.IsNull() {
		var dataValue attr.Value = data.ToPortRanges
		var protoValue []*configv1.ApplicationPolicyRule_ToPortRanges
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]*configv1.ApplicationPolicyRule_ToPortRanges, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue *configv1.ApplicationPolicyRule_ToPortRanges
				protoValue, newDiags := ConvertDataValueToApplicationPolicyRule_ToPortRangesProto(ctx, dataValue)
				diags.Append(newDiags...)
				if diags.HasError() {
					return nil, diags
				}
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.ToPortRanges = protoValue
	}
	return proto, diags
}

func NewReadApplicationPolicyRuleRequest(ctx context.Context, data *ApplicationPolicyRuleResourceModel) (*configv1.ReadApplicationPolicyRuleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.ReadApplicationPolicyRuleRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewDeleteApplicationPolicyRuleRequest(ctx context.Context, data *ApplicationPolicyRuleResourceModel) (*configv1.DeleteApplicationPolicyRuleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.DeleteApplicationPolicyRuleRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewCreateAwsAccountRequest(ctx context.Context, data *AwsAccountResourceModel) (*configv1.CreateAwsAccountRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.CreateAwsAccountRequest{}
	if !data.AccountId.IsUnknown() && !data.AccountId.IsNull() {
		var dataValue attr.Value = data.AccountId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.AccountId = protoValue
	}
	if !data.Mode.IsUnknown() && !data.Mode.IsNull() {
		var dataValue attr.Value = data.Mode
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Mode = protoValue
	}
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		var dataValue attr.Value = data.Name
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Name = protoValue
	}
	if !data.OrganizationId.IsUnknown() && !data.OrganizationId.IsNull() {
		var dataValue attr.Value = data.OrganizationId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.OrganizationId = &protoValue
	}
	if !data.RoleArn.IsUnknown() && !data.RoleArn.IsNull() {
		var dataValue attr.Value = data.RoleArn
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.RoleArn = protoValue
	}
	if !data.RoleExternalId.IsUnknown() && !data.RoleExternalId.IsNull() {
		var dataValue attr.Value = data.RoleExternalId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.RoleExternalId = protoValue
	}
	return proto, diags
}

func NewReadAwsAccountRequest(ctx context.Context, data *AwsAccountResourceModel) (*configv1.ReadAwsAccountRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.ReadAwsAccountRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewDeleteAwsAccountRequest(ctx context.Context, data *AwsAccountResourceModel) (*configv1.DeleteAwsAccountRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.DeleteAwsAccountRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewCreateAwsFlowLogsS3BucketRequest(ctx context.Context, data *AwsFlowLogsS3BucketResourceModel) (*configv1.CreateAwsFlowLogsS3BucketRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.CreateAwsFlowLogsS3BucketRequest{}
	if !data.AccountId.IsUnknown() && !data.AccountId.IsNull() {
		var dataValue attr.Value = data.AccountId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.AccountId = protoValue
	}
	if !data.S3BucketArn.IsUnknown() && !data.S3BucketArn.IsNull() {
		var dataValue attr.Value = data.S3BucketArn
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.S3BucketArn = protoValue
	}
	return proto, diags
}

func NewReadAwsFlowLogsS3BucketRequest(ctx context.Context, data *AwsFlowLogsS3BucketResourceModel) (*configv1.ReadAwsFlowLogsS3BucketRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.ReadAwsFlowLogsS3BucketRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewDeleteAwsFlowLogsS3BucketRequest(ctx context.Context, data *AwsFlowLogsS3BucketResourceModel) (*configv1.DeleteAwsFlowLogsS3BucketRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.DeleteAwsFlowLogsS3BucketRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewCreateAzureFlowLogsStorageAccountRequest(ctx context.Context, data *AzureFlowLogsStorageAccountResourceModel) (*configv1.CreateAzureFlowLogsStorageAccountRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.CreateAzureFlowLogsStorageAccountRequest{}
	if !data.StorageAccountResourceId.IsUnknown() && !data.StorageAccountResourceId.IsNull() {
		var dataValue attr.Value = data.StorageAccountResourceId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.StorageAccountResourceId = protoValue
	}
	if !data.SubscriptionId.IsUnknown() && !data.SubscriptionId.IsNull() {
		var dataValue attr.Value = data.SubscriptionId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.SubscriptionId = protoValue
	}
	return proto, diags
}

func NewReadAzureFlowLogsStorageAccountRequest(ctx context.Context, data *AzureFlowLogsStorageAccountResourceModel) (*configv1.ReadAzureFlowLogsStorageAccountRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.ReadAzureFlowLogsStorageAccountRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewDeleteAzureFlowLogsStorageAccountRequest(ctx context.Context, data *AzureFlowLogsStorageAccountResourceModel) (*configv1.DeleteAzureFlowLogsStorageAccountRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.DeleteAzureFlowLogsStorageAccountRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewCreateAzureSubscriptionRequest(ctx context.Context, data *AzureSubscriptionResourceModel) (*configv1.CreateAzureSubscriptionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.CreateAzureSubscriptionRequest{}
	if !data.ClientId.IsUnknown() && !data.ClientId.IsNull() {
		var dataValue attr.Value = data.ClientId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.ClientId = protoValue
	}
	if !data.ClientSecret.IsUnknown() && !data.ClientSecret.IsNull() {
		var dataValue attr.Value = data.ClientSecret
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.ClientSecret = protoValue
	}
	if !data.Mode.IsUnknown() && !data.Mode.IsNull() {
		var dataValue attr.Value = data.Mode
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Mode = protoValue
	}
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		var dataValue attr.Value = data.Name
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Name = protoValue
	}
	if !data.SubscriptionId.IsUnknown() && !data.SubscriptionId.IsNull() {
		var dataValue attr.Value = data.SubscriptionId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.SubscriptionId = protoValue
	}
	if !data.TenantId.IsUnknown() && !data.TenantId.IsNull() {
		var dataValue attr.Value = data.TenantId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.TenantId = protoValue
	}
	return proto, diags
}

func NewReadAzureSubscriptionRequest(ctx context.Context, data *AzureSubscriptionResourceModel) (*configv1.ReadAzureSubscriptionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.ReadAzureSubscriptionRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewDeleteAzureSubscriptionRequest(ctx context.Context, data *AzureSubscriptionResourceModel) (*configv1.DeleteAzureSubscriptionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.DeleteAzureSubscriptionRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewCreateDeploymentRequest(ctx context.Context, data *DeploymentResourceModel) (*configv1.CreateDeploymentRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.CreateDeploymentRequest{}
	if !data.AwsAccountIds.IsUnknown() && !data.AwsAccountIds.IsNull() {
		var dataValue attr.Value = data.AwsAccountIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsAccountIds = protoValue
	}
	if !data.AwsRegions.IsUnknown() && !data.AwsRegions.IsNull() {
		var dataValue attr.Value = data.AwsRegions
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsRegions = protoValue
	}
	if !data.AwsSubnetIds.IsUnknown() && !data.AwsSubnetIds.IsNull() {
		var dataValue attr.Value = data.AwsSubnetIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsSubnetIds = protoValue
	}
	if !data.AwsTags.IsUnknown() && !data.AwsTags.IsNull() {
		var dataValue attr.Value = data.AwsTags
		var protoValue []*configv1.Deployment_AwsTags
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]*configv1.Deployment_AwsTags, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue *configv1.Deployment_AwsTags
				protoValue, newDiags := ConvertDataValueToDeployment_AwsTagsProto(ctx, dataValue)
				diags.Append(newDiags...)
				if diags.HasError() {
					return nil, diags
				}
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsTags = protoValue
	}
	if !data.AwsVpcIds.IsUnknown() && !data.AwsVpcIds.IsNull() {
		var dataValue attr.Value = data.AwsVpcIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsVpcIds = protoValue
	}
	if !data.AzureRegions.IsUnknown() && !data.AzureRegions.IsNull() {
		var dataValue attr.Value = data.AzureRegions
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AzureRegions = protoValue
	}
	if !data.AzureSubnetIds.IsUnknown() && !data.AzureSubnetIds.IsNull() {
		var dataValue attr.Value = data.AzureSubnetIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AzureSubnetIds = protoValue
	}
	if !data.AzureSubscriptionIds.IsUnknown() && !data.AzureSubscriptionIds.IsNull() {
		var dataValue attr.Value = data.AzureSubscriptionIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AzureSubscriptionIds = protoValue
	}
	if !data.AzureTags.IsUnknown() && !data.AzureTags.IsNull() {
		var dataValue attr.Value = data.AzureTags
		var protoValue []*configv1.Deployment_AzureTags
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]*configv1.Deployment_AzureTags, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue *configv1.Deployment_AzureTags
				protoValue, newDiags := ConvertDataValueToDeployment_AzureTagsProto(ctx, dataValue)
				diags.Append(newDiags...)
				if diags.HasError() {
					return nil, diags
				}
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AzureTags = protoValue
	}
	if !data.AzureVnetIds.IsUnknown() && !data.AzureVnetIds.IsNull() {
		var dataValue attr.Value = data.AzureVnetIds
		var protoValue []string
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AzureVnetIds = protoValue
	}
	if !data.Description.IsUnknown() && !data.Description.IsNull() {
		var dataValue attr.Value = data.Description
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Description = &protoValue
	}
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		var dataValue attr.Value = data.Name
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Name = protoValue
	}
	return proto, diags
}

func NewReadDeploymentRequest(ctx context.Context, data *DeploymentResourceModel) (*configv1.ReadDeploymentRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.ReadDeploymentRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewDeleteDeploymentRequest(ctx context.Context, data *DeploymentResourceModel) (*configv1.DeleteDeploymentRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.DeleteDeploymentRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewCreateIpListRequest(ctx context.Context, data *IpListResourceModel) (*configv1.CreateIpListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.CreateIpListRequest{}
	if !data.Description.IsUnknown() && !data.Description.IsNull() {
		var dataValue attr.Value = data.Description
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Description = &protoValue
	}
	if !data.IpAddresses.IsUnknown() && !data.IpAddresses.IsNull() {
		var dataValue attr.Value = data.IpAddresses
		var protoValue []*configv1.IpList_IpAddresses
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]*configv1.IpList_IpAddresses, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue *configv1.IpList_IpAddresses
				protoValue, newDiags := ConvertDataValueToIpList_IpAddressesProto(ctx, dataValue)
				diags.Append(newDiags...)
				if diags.HasError() {
					return nil, diags
				}
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.IpAddresses = protoValue
	}
	if !data.IpRanges.IsUnknown() && !data.IpRanges.IsNull() {
		var dataValue attr.Value = data.IpRanges
		var protoValue []*configv1.IpList_IpRanges
		{
			dataElements := dataValue.(types.List).Elements()
			protoValues := make([]*configv1.IpList_IpRanges, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue *configv1.IpList_IpRanges
				protoValue, newDiags := ConvertDataValueToIpList_IpRangesProto(ctx, dataValue)
				diags.Append(newDiags...)
				if diags.HasError() {
					return nil, diags
				}
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.IpRanges = protoValue
	}
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		var dataValue attr.Value = data.Name
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Name = protoValue
	}
	return proto, diags
}

func NewReadIpListRequest(ctx context.Context, data *IpListResourceModel) (*configv1.ReadIpListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.ReadIpListRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewDeleteIpListRequest(ctx context.Context, data *IpListResourceModel) (*configv1.DeleteIpListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.DeleteIpListRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewCreateK8SClusterOnboardingCredentialRequest(ctx context.Context, data *K8SClusterOnboardingCredentialResourceModel) (*configv1.CreateK8SClusterOnboardingCredentialRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.CreateK8SClusterOnboardingCredentialRequest{}
	if !data.Description.IsUnknown() && !data.Description.IsNull() {
		var dataValue attr.Value = data.Description
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Description = &protoValue
	}
	if !data.IllumioRegion.IsUnknown() && !data.IllumioRegion.IsNull() {
		var dataValue attr.Value = data.IllumioRegion
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.IllumioRegion = protoValue
	}
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		var dataValue attr.Value = data.Name
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Name = protoValue
	}
	return proto, diags
}

func NewReadK8SClusterOnboardingCredentialRequest(ctx context.Context, data *K8SClusterOnboardingCredentialResourceModel) (*configv1.ReadK8SClusterOnboardingCredentialRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.ReadK8SClusterOnboardingCredentialRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewDeleteK8SClusterOnboardingCredentialRequest(ctx context.Context, data *K8SClusterOnboardingCredentialResourceModel) (*configv1.DeleteK8SClusterOnboardingCredentialRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.DeleteK8SClusterOnboardingCredentialRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewCreateTagToLabelRequest(ctx context.Context, data *TagToLabelResourceModel) (*configv1.CreateTagToLabelRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.CreateTagToLabelRequest{}
	if !data.AwsTagKeys.IsUnknown() && !data.AwsTagKeys.IsNull() {
		var dataValue attr.Value = data.AwsTagKeys
		var protoValue []string
		{
			dataElements := dataValue.(types.Set).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AwsTagKeys = protoValue
	}
	if !data.AzureTagKeys.IsUnknown() && !data.AzureTagKeys.IsNull() {
		var dataValue attr.Value = data.AzureTagKeys
		var protoValue []string
		{
			dataElements := dataValue.(types.Set).Elements()
			protoValues := make([]string, 0, len(dataElements))
			for _, dataElement := range dataElements {
				var dataValue attr.Value = dataElement
				var protoValue string
				protoValue = dataValue.(types.String).ValueString()
				protoValues = append(protoValues, protoValue)
			}
			protoValue = protoValues
		}
		proto.AzureTagKeys = protoValue
	}
	if !data.Icon.IsUnknown() && !data.Icon.IsNull() {
		var dataValue attr.Value = data.Icon
		var protoValue *configv1.TagToLabel_Icon
		protoValue, newDiags := ConvertDataValueToTagToLabel_IconProto(ctx, dataValue)
		diags.Append(newDiags...)
		if diags.HasError() {
			return nil, diags
		}
		proto.Icon = protoValue
	}
	if !data.Key.IsUnknown() && !data.Key.IsNull() {
		var dataValue attr.Value = data.Key
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Key = protoValue
	}
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		var dataValue attr.Value = data.Name
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Name = protoValue
	}
	return proto, diags
}

func NewReadTagToLabelRequest(ctx context.Context, data *TagToLabelResourceModel) (*configv1.ReadTagToLabelRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.ReadTagToLabelRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewDeleteTagToLabelRequest(ctx context.Context, data *TagToLabelResourceModel) (*configv1.DeleteTagToLabelRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.DeleteTagToLabelRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto, diags
}

func NewUpdateApplicationRequest(ctx context.Context, beforeData, afterData *ApplicationResourceModel) (*configv1.UpdateApplicationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.UpdateApplicationRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	if !afterData.Description.Equal(beforeData.Description) {
		proto.UpdateMask.Append(proto, "description")
		if !afterData.Description.IsUnknown() && !afterData.Description.IsNull() {
			var dataValue attr.Value = afterData.Description
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Description = &protoValue
		}
	}
	if !afterData.Name.Equal(beforeData.Name) {
		proto.UpdateMask.Append(proto, "name")
		if !afterData.Name.IsUnknown() && !afterData.Name.IsNull() {
			var dataValue attr.Value = afterData.Name
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Name = protoValue
		}
	}
	return proto, diags
}

func NewUpdateApplicationAwsResourcesRequest(ctx context.Context, beforeData, afterData *ApplicationAwsResourcesResourceModel) (*configv1.UpdateApplicationAwsResourcesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.UpdateApplicationAwsResourcesRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	if !afterData.AccountId.Equal(beforeData.AccountId) {
		proto.UpdateMask.Append(proto, "account_id")
		if !afterData.AccountId.IsUnknown() && !afterData.AccountId.IsNull() {
			var dataValue attr.Value = afterData.AccountId
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.AccountId = protoValue
		}
	}
	if !afterData.ApplicationId.Equal(beforeData.ApplicationId) {
		proto.UpdateMask.Append(proto, "application_id")
		if !afterData.ApplicationId.IsUnknown() && !afterData.ApplicationId.IsNull() {
			var dataValue attr.Value = afterData.ApplicationId
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.ApplicationId = protoValue
		}
	}
	if !afterData.ApplicationResourceIds.Equal(beforeData.ApplicationResourceIds) {
		proto.UpdateMask.Append(proto, "application_resource_ids")
		if !afterData.ApplicationResourceIds.IsUnknown() && !afterData.ApplicationResourceIds.IsNull() {
			var dataValue attr.Value = afterData.ApplicationResourceIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.ApplicationResourceIds = protoValue
		}
	}
	if !afterData.Arns.Equal(beforeData.Arns) {
		proto.UpdateMask.Append(proto, "arns")
		if !afterData.Arns.IsUnknown() && !afterData.Arns.IsNull() {
			var dataValue attr.Value = afterData.Arns
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.Arns = protoValue
		}
	}
	if !afterData.AwsCustomerGatewayIds.Equal(beforeData.AwsCustomerGatewayIds) {
		proto.UpdateMask.Append(proto, "aws_customer_gateway_ids")
		if !afterData.AwsCustomerGatewayIds.IsUnknown() && !afterData.AwsCustomerGatewayIds.IsNull() {
			var dataValue attr.Value = afterData.AwsCustomerGatewayIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsCustomerGatewayIds = protoValue
		}
	}
	if !afterData.AwsDxConnectionIds.Equal(beforeData.AwsDxConnectionIds) {
		proto.UpdateMask.Append(proto, "aws_dx_connection_ids")
		if !afterData.AwsDxConnectionIds.IsUnknown() && !afterData.AwsDxConnectionIds.IsNull() {
			var dataValue attr.Value = afterData.AwsDxConnectionIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsDxConnectionIds = protoValue
		}
	}
	if !afterData.AwsDxVirtualInterfaceIds.Equal(beforeData.AwsDxVirtualInterfaceIds) {
		proto.UpdateMask.Append(proto, "aws_dx_virtual_interface_ids")
		if !afterData.AwsDxVirtualInterfaceIds.IsUnknown() && !afterData.AwsDxVirtualInterfaceIds.IsNull() {
			var dataValue attr.Value = afterData.AwsDxVirtualInterfaceIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsDxVirtualInterfaceIds = protoValue
		}
	}
	if !afterData.AwsEbsVolumeIds.Equal(beforeData.AwsEbsVolumeIds) {
		proto.UpdateMask.Append(proto, "aws_ebs_volume_ids")
		if !afterData.AwsEbsVolumeIds.IsUnknown() && !afterData.AwsEbsVolumeIds.IsNull() {
			var dataValue attr.Value = afterData.AwsEbsVolumeIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsEbsVolumeIds = protoValue
		}
	}
	if !afterData.AwsEc2InstanceConnectEndpointIds.Equal(beforeData.AwsEc2InstanceConnectEndpointIds) {
		proto.UpdateMask.Append(proto, "aws_ec2_instance_connect_endpoint_ids")
		if !afterData.AwsEc2InstanceConnectEndpointIds.IsUnknown() && !afterData.AwsEc2InstanceConnectEndpointIds.IsNull() {
			var dataValue attr.Value = afterData.AwsEc2InstanceConnectEndpointIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsEc2InstanceConnectEndpointIds = protoValue
		}
	}
	if !afterData.AwsEc2TransitGatewayAttachmentIds.Equal(beforeData.AwsEc2TransitGatewayAttachmentIds) {
		proto.UpdateMask.Append(proto, "aws_ec2_transit_gateway_attachment_ids")
		if !afterData.AwsEc2TransitGatewayAttachmentIds.IsUnknown() && !afterData.AwsEc2TransitGatewayAttachmentIds.IsNull() {
			var dataValue attr.Value = afterData.AwsEc2TransitGatewayAttachmentIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsEc2TransitGatewayAttachmentIds = protoValue
		}
	}
	if !afterData.AwsEc2TransitGatewayIds.Equal(beforeData.AwsEc2TransitGatewayIds) {
		proto.UpdateMask.Append(proto, "aws_ec2_transit_gateway_ids")
		if !afterData.AwsEc2TransitGatewayIds.IsUnknown() && !afterData.AwsEc2TransitGatewayIds.IsNull() {
			var dataValue attr.Value = afterData.AwsEc2TransitGatewayIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsEc2TransitGatewayIds = protoValue
		}
	}
	if !afterData.AwsEc2TransitGatewayMulticastDomainIds.Equal(beforeData.AwsEc2TransitGatewayMulticastDomainIds) {
		proto.UpdateMask.Append(proto, "aws_ec2_transit_gateway_multicast_domain_ids")
		if !afterData.AwsEc2TransitGatewayMulticastDomainIds.IsUnknown() && !afterData.AwsEc2TransitGatewayMulticastDomainIds.IsNull() {
			var dataValue attr.Value = afterData.AwsEc2TransitGatewayMulticastDomainIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsEc2TransitGatewayMulticastDomainIds = protoValue
		}
	}
	if !afterData.AwsEc2TransitGatewayRouteTableIds.Equal(beforeData.AwsEc2TransitGatewayRouteTableIds) {
		proto.UpdateMask.Append(proto, "aws_ec2_transit_gateway_route_table_ids")
		if !afterData.AwsEc2TransitGatewayRouteTableIds.IsUnknown() && !afterData.AwsEc2TransitGatewayRouteTableIds.IsNull() {
			var dataValue attr.Value = afterData.AwsEc2TransitGatewayRouteTableIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsEc2TransitGatewayRouteTableIds = protoValue
		}
	}
	if !afterData.AwsEgressOnlyInternetGatewayIds.Equal(beforeData.AwsEgressOnlyInternetGatewayIds) {
		proto.UpdateMask.Append(proto, "aws_egress_only_internet_gateway_ids")
		if !afterData.AwsEgressOnlyInternetGatewayIds.IsUnknown() && !afterData.AwsEgressOnlyInternetGatewayIds.IsNull() {
			var dataValue attr.Value = afterData.AwsEgressOnlyInternetGatewayIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsEgressOnlyInternetGatewayIds = protoValue
		}
	}
	if !afterData.AwsEipIds.Equal(beforeData.AwsEipIds) {
		proto.UpdateMask.Append(proto, "aws_eip_ids")
		if !afterData.AwsEipIds.IsUnknown() && !afterData.AwsEipIds.IsNull() {
			var dataValue attr.Value = afterData.AwsEipIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsEipIds = protoValue
		}
	}
	if !afterData.AwsFlowLogIds.Equal(beforeData.AwsFlowLogIds) {
		proto.UpdateMask.Append(proto, "aws_flow_log_ids")
		if !afterData.AwsFlowLogIds.IsUnknown() && !afterData.AwsFlowLogIds.IsNull() {
			var dataValue attr.Value = afterData.AwsFlowLogIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsFlowLogIds = protoValue
		}
	}
	if !afterData.AwsInstancesIds.Equal(beforeData.AwsInstancesIds) {
		proto.UpdateMask.Append(proto, "aws_instances_ids")
		if !afterData.AwsInstancesIds.IsUnknown() && !afterData.AwsInstancesIds.IsNull() {
			var dataValue attr.Value = afterData.AwsInstancesIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsInstancesIds = protoValue
		}
	}
	if !afterData.AwsInternetGatewayIds.Equal(beforeData.AwsInternetGatewayIds) {
		proto.UpdateMask.Append(proto, "aws_internet_gateway_ids")
		if !afterData.AwsInternetGatewayIds.IsUnknown() && !afterData.AwsInternetGatewayIds.IsNull() {
			var dataValue attr.Value = afterData.AwsInternetGatewayIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsInternetGatewayIds = protoValue
		}
	}
	if !afterData.AwsNatGatewayIds.Equal(beforeData.AwsNatGatewayIds) {
		proto.UpdateMask.Append(proto, "aws_nat_gateway_ids")
		if !afterData.AwsNatGatewayIds.IsUnknown() && !afterData.AwsNatGatewayIds.IsNull() {
			var dataValue attr.Value = afterData.AwsNatGatewayIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsNatGatewayIds = protoValue
		}
	}
	if !afterData.AwsNetworkAclIds.Equal(beforeData.AwsNetworkAclIds) {
		proto.UpdateMask.Append(proto, "aws_network_acl_ids")
		if !afterData.AwsNetworkAclIds.IsUnknown() && !afterData.AwsNetworkAclIds.IsNull() {
			var dataValue attr.Value = afterData.AwsNetworkAclIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsNetworkAclIds = protoValue
		}
	}
	if !afterData.AwsNetworkInterfaceIds.Equal(beforeData.AwsNetworkInterfaceIds) {
		proto.UpdateMask.Append(proto, "aws_network_interface_ids")
		if !afterData.AwsNetworkInterfaceIds.IsUnknown() && !afterData.AwsNetworkInterfaceIds.IsNull() {
			var dataValue attr.Value = afterData.AwsNetworkInterfaceIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsNetworkInterfaceIds = protoValue
		}
	}
	if !afterData.AwsRdsClusterIds.Equal(beforeData.AwsRdsClusterIds) {
		proto.UpdateMask.Append(proto, "aws_rds_cluster_ids")
		if !afterData.AwsRdsClusterIds.IsUnknown() && !afterData.AwsRdsClusterIds.IsNull() {
			var dataValue attr.Value = afterData.AwsRdsClusterIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsRdsClusterIds = protoValue
		}
	}
	if !afterData.AwsRouteTableIds.Equal(beforeData.AwsRouteTableIds) {
		proto.UpdateMask.Append(proto, "aws_route_table_ids")
		if !afterData.AwsRouteTableIds.IsUnknown() && !afterData.AwsRouteTableIds.IsNull() {
			var dataValue attr.Value = afterData.AwsRouteTableIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsRouteTableIds = protoValue
		}
	}
	if !afterData.AwsSecurityGroupIds.Equal(beforeData.AwsSecurityGroupIds) {
		proto.UpdateMask.Append(proto, "aws_security_group_ids")
		if !afterData.AwsSecurityGroupIds.IsUnknown() && !afterData.AwsSecurityGroupIds.IsNull() {
			var dataValue attr.Value = afterData.AwsSecurityGroupIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsSecurityGroupIds = protoValue
		}
	}
	if !afterData.AwsSecurityGroupRuleIds.Equal(beforeData.AwsSecurityGroupRuleIds) {
		proto.UpdateMask.Append(proto, "aws_security_group_rule_ids")
		if !afterData.AwsSecurityGroupRuleIds.IsUnknown() && !afterData.AwsSecurityGroupRuleIds.IsNull() {
			var dataValue attr.Value = afterData.AwsSecurityGroupRuleIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsSecurityGroupRuleIds = protoValue
		}
	}
	if !afterData.AwsSpotFleetRequestIds.Equal(beforeData.AwsSpotFleetRequestIds) {
		proto.UpdateMask.Append(proto, "aws_spot_fleet_request_ids")
		if !afterData.AwsSpotFleetRequestIds.IsUnknown() && !afterData.AwsSpotFleetRequestIds.IsNull() {
			var dataValue attr.Value = afterData.AwsSpotFleetRequestIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsSpotFleetRequestIds = protoValue
		}
	}
	if !afterData.AwsSpotInstanceRequestIds.Equal(beforeData.AwsSpotInstanceRequestIds) {
		proto.UpdateMask.Append(proto, "aws_spot_instance_request_ids")
		if !afterData.AwsSpotInstanceRequestIds.IsUnknown() && !afterData.AwsSpotInstanceRequestIds.IsNull() {
			var dataValue attr.Value = afterData.AwsSpotInstanceRequestIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsSpotInstanceRequestIds = protoValue
		}
	}
	if !afterData.AwsSubnetIds.Equal(beforeData.AwsSubnetIds) {
		proto.UpdateMask.Append(proto, "aws_subnet_ids")
		if !afterData.AwsSubnetIds.IsUnknown() && !afterData.AwsSubnetIds.IsNull() {
			var dataValue attr.Value = afterData.AwsSubnetIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsSubnetIds = protoValue
		}
	}
	if !afterData.AwsVpcEndpointIds.Equal(beforeData.AwsVpcEndpointIds) {
		proto.UpdateMask.Append(proto, "aws_vpc_endpoint_ids")
		if !afterData.AwsVpcEndpointIds.IsUnknown() && !afterData.AwsVpcEndpointIds.IsNull() {
			var dataValue attr.Value = afterData.AwsVpcEndpointIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsVpcEndpointIds = protoValue
		}
	}
	if !afterData.AwsVpcEndpointServiceIds.Equal(beforeData.AwsVpcEndpointServiceIds) {
		proto.UpdateMask.Append(proto, "aws_vpc_endpoint_service_ids")
		if !afterData.AwsVpcEndpointServiceIds.IsUnknown() && !afterData.AwsVpcEndpointServiceIds.IsNull() {
			var dataValue attr.Value = afterData.AwsVpcEndpointServiceIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsVpcEndpointServiceIds = protoValue
		}
	}
	if !afterData.AwsVpcIds.Equal(beforeData.AwsVpcIds) {
		proto.UpdateMask.Append(proto, "aws_vpc_ids")
		if !afterData.AwsVpcIds.IsUnknown() && !afterData.AwsVpcIds.IsNull() {
			var dataValue attr.Value = afterData.AwsVpcIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsVpcIds = protoValue
		}
	}
	if !afterData.AwsVpcPeeringConnectionIds.Equal(beforeData.AwsVpcPeeringConnectionIds) {
		proto.UpdateMask.Append(proto, "aws_vpc_peering_connection_ids")
		if !afterData.AwsVpcPeeringConnectionIds.IsUnknown() && !afterData.AwsVpcPeeringConnectionIds.IsNull() {
			var dataValue attr.Value = afterData.AwsVpcPeeringConnectionIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsVpcPeeringConnectionIds = protoValue
		}
	}
	if !afterData.AwsVpnConnectionIds.Equal(beforeData.AwsVpnConnectionIds) {
		proto.UpdateMask.Append(proto, "aws_vpn_connection_ids")
		if !afterData.AwsVpnConnectionIds.IsUnknown() && !afterData.AwsVpnConnectionIds.IsNull() {
			var dataValue attr.Value = afterData.AwsVpnConnectionIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsVpnConnectionIds = protoValue
		}
	}
	if !afterData.AwsVpnGatewayIds.Equal(beforeData.AwsVpnGatewayIds) {
		proto.UpdateMask.Append(proto, "aws_vpn_gateway_ids")
		if !afterData.AwsVpnGatewayIds.IsUnknown() && !afterData.AwsVpnGatewayIds.IsNull() {
			var dataValue attr.Value = afterData.AwsVpnGatewayIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsVpnGatewayIds = protoValue
		}
	}
	return proto, diags
}

func NewUpdateApplicationAzureResourcesRequest(ctx context.Context, beforeData, afterData *ApplicationAzureResourcesResourceModel) (*configv1.UpdateApplicationAzureResourcesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.UpdateApplicationAzureResourcesRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	if !afterData.ApplicationId.Equal(beforeData.ApplicationId) {
		proto.UpdateMask.Append(proto, "application_id")
		if !afterData.ApplicationId.IsUnknown() && !afterData.ApplicationId.IsNull() {
			var dataValue attr.Value = afterData.ApplicationId
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.ApplicationId = protoValue
		}
	}
	if !afterData.ApplicationResourceIds.Equal(beforeData.ApplicationResourceIds) {
		proto.UpdateMask.Append(proto, "application_resource_ids")
		if !afterData.ApplicationResourceIds.IsUnknown() && !afterData.ApplicationResourceIds.IsNull() {
			var dataValue attr.Value = afterData.ApplicationResourceIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.ApplicationResourceIds = protoValue
		}
	}
	if !afterData.ResourceIds.Equal(beforeData.ResourceIds) {
		proto.UpdateMask.Append(proto, "resource_ids")
		if !afterData.ResourceIds.IsUnknown() && !afterData.ResourceIds.IsNull() {
			var dataValue attr.Value = afterData.ResourceIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.ResourceIds = protoValue
		}
	}
	if !afterData.SubscriptionId.Equal(beforeData.SubscriptionId) {
		proto.UpdateMask.Append(proto, "subscription_id")
		if !afterData.SubscriptionId.IsUnknown() && !afterData.SubscriptionId.IsNull() {
			var dataValue attr.Value = afterData.SubscriptionId
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.SubscriptionId = protoValue
		}
	}
	return proto, diags
}

func NewUpdateApplicationPolicyRuleRequest(ctx context.Context, beforeData, afterData *ApplicationPolicyRuleResourceModel) (*configv1.UpdateApplicationPolicyRuleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.UpdateApplicationPolicyRuleRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	if !afterData.Action.Equal(beforeData.Action) {
		proto.UpdateMask.Append(proto, "action")
		if !afterData.Action.IsUnknown() && !afterData.Action.IsNull() {
			var dataValue attr.Value = afterData.Action
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Action = protoValue
		}
	}
	if !afterData.ApplicationId.Equal(beforeData.ApplicationId) {
		proto.UpdateMask.Append(proto, "application_id")
		if !afterData.ApplicationId.IsUnknown() && !afterData.ApplicationId.IsNull() {
			var dataValue attr.Value = afterData.ApplicationId
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.ApplicationId = protoValue
		}
	}
	if !afterData.Description.Equal(beforeData.Description) {
		proto.UpdateMask.Append(proto, "description")
		if !afterData.Description.IsUnknown() && !afterData.Description.IsNull() {
			var dataValue attr.Value = afterData.Description
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Description = &protoValue
		}
	}
	if !afterData.ExternalScope.Equal(beforeData.ExternalScope) {
		proto.UpdateMask.Append(proto, "external_scope")
		if !afterData.ExternalScope.IsUnknown() && !afterData.ExternalScope.IsNull() {
			var dataValue attr.Value = afterData.ExternalScope
			var protoValue bool
			protoValue = dataValue.(types.Bool).ValueBool()
			proto.ExternalScope = &protoValue
		}
	}
	if !afterData.FromIpListIds.Equal(beforeData.FromIpListIds) {
		proto.UpdateMask.Append(proto, "from_ip_list_ids")
		if !afterData.FromIpListIds.IsUnknown() && !afterData.FromIpListIds.IsNull() {
			var dataValue attr.Value = afterData.FromIpListIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.FromIpListIds = protoValue
		}
	}
	if !afterData.FromLabels.Equal(beforeData.FromLabels) {
		proto.UpdateMask.Append(proto, "from_labels")
		if !afterData.FromLabels.IsUnknown() && !afterData.FromLabels.IsNull() {
			var dataValue attr.Value = afterData.FromLabels
			var protoValue []*configv1.ApplicationPolicyRule_FromLabels
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]*configv1.ApplicationPolicyRule_FromLabels, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue *configv1.ApplicationPolicyRule_FromLabels
					protoValue, newDiags := ConvertDataValueToApplicationPolicyRule_FromLabelsProto(ctx, dataValue)
					diags.Append(newDiags...)
					if diags.HasError() {
						return nil, diags
					}
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.FromLabels = protoValue
		}
	}
	if !afterData.ToIpListIds.Equal(beforeData.ToIpListIds) {
		proto.UpdateMask.Append(proto, "to_ip_list_ids")
		if !afterData.ToIpListIds.IsUnknown() && !afterData.ToIpListIds.IsNull() {
			var dataValue attr.Value = afterData.ToIpListIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.ToIpListIds = protoValue
		}
	}
	if !afterData.ToLabels.Equal(beforeData.ToLabels) {
		proto.UpdateMask.Append(proto, "to_labels")
		if !afterData.ToLabels.IsUnknown() && !afterData.ToLabels.IsNull() {
			var dataValue attr.Value = afterData.ToLabels
			var protoValue []*configv1.ApplicationPolicyRule_ToLabels
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]*configv1.ApplicationPolicyRule_ToLabels, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue *configv1.ApplicationPolicyRule_ToLabels
					protoValue, newDiags := ConvertDataValueToApplicationPolicyRule_ToLabelsProto(ctx, dataValue)
					diags.Append(newDiags...)
					if diags.HasError() {
						return nil, diags
					}
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.ToLabels = protoValue
		}
	}
	if !afterData.ToPortRanges.Equal(beforeData.ToPortRanges) {
		proto.UpdateMask.Append(proto, "to_port_ranges")
		if !afterData.ToPortRanges.IsUnknown() && !afterData.ToPortRanges.IsNull() {
			var dataValue attr.Value = afterData.ToPortRanges
			var protoValue []*configv1.ApplicationPolicyRule_ToPortRanges
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]*configv1.ApplicationPolicyRule_ToPortRanges, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue *configv1.ApplicationPolicyRule_ToPortRanges
					protoValue, newDiags := ConvertDataValueToApplicationPolicyRule_ToPortRangesProto(ctx, dataValue)
					diags.Append(newDiags...)
					if diags.HasError() {
						return nil, diags
					}
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.ToPortRanges = protoValue
		}
	}
	return proto, diags
}

func NewUpdateAwsAccountRequest(ctx context.Context, beforeData, afterData *AwsAccountResourceModel) (*configv1.UpdateAwsAccountRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.UpdateAwsAccountRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	if !afterData.Name.Equal(beforeData.Name) {
		proto.UpdateMask.Append(proto, "name")
		if !afterData.Name.IsUnknown() && !afterData.Name.IsNull() {
			var dataValue attr.Value = afterData.Name
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Name = protoValue
		}
	}
	return proto, diags
}

func NewUpdateAwsFlowLogsS3BucketRequest(ctx context.Context, beforeData, afterData *AwsFlowLogsS3BucketResourceModel) (*configv1.UpdateAwsFlowLogsS3BucketRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.UpdateAwsFlowLogsS3BucketRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	return proto, diags
}

func NewUpdateAzureFlowLogsStorageAccountRequest(ctx context.Context, beforeData, afterData *AzureFlowLogsStorageAccountResourceModel) (*configv1.UpdateAzureFlowLogsStorageAccountRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.UpdateAzureFlowLogsStorageAccountRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	return proto, diags
}

func NewUpdateAzureSubscriptionRequest(ctx context.Context, beforeData, afterData *AzureSubscriptionResourceModel) (*configv1.UpdateAzureSubscriptionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.UpdateAzureSubscriptionRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	if !afterData.Name.Equal(beforeData.Name) {
		proto.UpdateMask.Append(proto, "name")
		if !afterData.Name.IsUnknown() && !afterData.Name.IsNull() {
			var dataValue attr.Value = afterData.Name
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Name = protoValue
		}
	}
	return proto, diags
}

func NewUpdateDeploymentRequest(ctx context.Context, beforeData, afterData *DeploymentResourceModel) (*configv1.UpdateDeploymentRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.UpdateDeploymentRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	if !afterData.AwsAccountIds.Equal(beforeData.AwsAccountIds) {
		proto.UpdateMask.Append(proto, "aws_account_ids")
		if !afterData.AwsAccountIds.IsUnknown() && !afterData.AwsAccountIds.IsNull() {
			var dataValue attr.Value = afterData.AwsAccountIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsAccountIds = protoValue
		}
	}
	if !afterData.AwsRegions.Equal(beforeData.AwsRegions) {
		proto.UpdateMask.Append(proto, "aws_regions")
		if !afterData.AwsRegions.IsUnknown() && !afterData.AwsRegions.IsNull() {
			var dataValue attr.Value = afterData.AwsRegions
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsRegions = protoValue
		}
	}
	if !afterData.AwsSubnetIds.Equal(beforeData.AwsSubnetIds) {
		proto.UpdateMask.Append(proto, "aws_subnet_ids")
		if !afterData.AwsSubnetIds.IsUnknown() && !afterData.AwsSubnetIds.IsNull() {
			var dataValue attr.Value = afterData.AwsSubnetIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsSubnetIds = protoValue
		}
	}
	if !afterData.AwsTags.Equal(beforeData.AwsTags) {
		proto.UpdateMask.Append(proto, "aws_tags")
		if !afterData.AwsTags.IsUnknown() && !afterData.AwsTags.IsNull() {
			var dataValue attr.Value = afterData.AwsTags
			var protoValue []*configv1.Deployment_AwsTags
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]*configv1.Deployment_AwsTags, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue *configv1.Deployment_AwsTags
					protoValue, newDiags := ConvertDataValueToDeployment_AwsTagsProto(ctx, dataValue)
					diags.Append(newDiags...)
					if diags.HasError() {
						return nil, diags
					}
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsTags = protoValue
		}
	}
	if !afterData.AwsVpcIds.Equal(beforeData.AwsVpcIds) {
		proto.UpdateMask.Append(proto, "aws_vpc_ids")
		if !afterData.AwsVpcIds.IsUnknown() && !afterData.AwsVpcIds.IsNull() {
			var dataValue attr.Value = afterData.AwsVpcIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsVpcIds = protoValue
		}
	}
	if !afterData.AzureRegions.Equal(beforeData.AzureRegions) {
		proto.UpdateMask.Append(proto, "azure_regions")
		if !afterData.AzureRegions.IsUnknown() && !afterData.AzureRegions.IsNull() {
			var dataValue attr.Value = afterData.AzureRegions
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AzureRegions = protoValue
		}
	}
	if !afterData.AzureSubnetIds.Equal(beforeData.AzureSubnetIds) {
		proto.UpdateMask.Append(proto, "azure_subnet_ids")
		if !afterData.AzureSubnetIds.IsUnknown() && !afterData.AzureSubnetIds.IsNull() {
			var dataValue attr.Value = afterData.AzureSubnetIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AzureSubnetIds = protoValue
		}
	}
	if !afterData.AzureSubscriptionIds.Equal(beforeData.AzureSubscriptionIds) {
		proto.UpdateMask.Append(proto, "azure_subscription_ids")
		if !afterData.AzureSubscriptionIds.IsUnknown() && !afterData.AzureSubscriptionIds.IsNull() {
			var dataValue attr.Value = afterData.AzureSubscriptionIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AzureSubscriptionIds = protoValue
		}
	}
	if !afterData.AzureTags.Equal(beforeData.AzureTags) {
		proto.UpdateMask.Append(proto, "azure_tags")
		if !afterData.AzureTags.IsUnknown() && !afterData.AzureTags.IsNull() {
			var dataValue attr.Value = afterData.AzureTags
			var protoValue []*configv1.Deployment_AzureTags
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]*configv1.Deployment_AzureTags, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue *configv1.Deployment_AzureTags
					protoValue, newDiags := ConvertDataValueToDeployment_AzureTagsProto(ctx, dataValue)
					diags.Append(newDiags...)
					if diags.HasError() {
						return nil, diags
					}
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AzureTags = protoValue
		}
	}
	if !afterData.AzureVnetIds.Equal(beforeData.AzureVnetIds) {
		proto.UpdateMask.Append(proto, "azure_vnet_ids")
		if !afterData.AzureVnetIds.IsUnknown() && !afterData.AzureVnetIds.IsNull() {
			var dataValue attr.Value = afterData.AzureVnetIds
			var protoValue []string
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AzureVnetIds = protoValue
		}
	}
	if !afterData.Description.Equal(beforeData.Description) {
		proto.UpdateMask.Append(proto, "description")
		if !afterData.Description.IsUnknown() && !afterData.Description.IsNull() {
			var dataValue attr.Value = afterData.Description
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Description = &protoValue
		}
	}
	if !afterData.Name.Equal(beforeData.Name) {
		proto.UpdateMask.Append(proto, "name")
		if !afterData.Name.IsUnknown() && !afterData.Name.IsNull() {
			var dataValue attr.Value = afterData.Name
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Name = protoValue
		}
	}
	return proto, diags
}

func NewUpdateIpListRequest(ctx context.Context, beforeData, afterData *IpListResourceModel) (*configv1.UpdateIpListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.UpdateIpListRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	if !afterData.Description.Equal(beforeData.Description) {
		proto.UpdateMask.Append(proto, "description")
		if !afterData.Description.IsUnknown() && !afterData.Description.IsNull() {
			var dataValue attr.Value = afterData.Description
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Description = &protoValue
		}
	}
	if !afterData.IpAddresses.Equal(beforeData.IpAddresses) {
		proto.UpdateMask.Append(proto, "ip_addresses")
		if !afterData.IpAddresses.IsUnknown() && !afterData.IpAddresses.IsNull() {
			var dataValue attr.Value = afterData.IpAddresses
			var protoValue []*configv1.IpList_IpAddresses
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]*configv1.IpList_IpAddresses, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue *configv1.IpList_IpAddresses
					protoValue, newDiags := ConvertDataValueToIpList_IpAddressesProto(ctx, dataValue)
					diags.Append(newDiags...)
					if diags.HasError() {
						return nil, diags
					}
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.IpAddresses = protoValue
		}
	}
	if !afterData.IpRanges.Equal(beforeData.IpRanges) {
		proto.UpdateMask.Append(proto, "ip_ranges")
		if !afterData.IpRanges.IsUnknown() && !afterData.IpRanges.IsNull() {
			var dataValue attr.Value = afterData.IpRanges
			var protoValue []*configv1.IpList_IpRanges
			{
				dataElements := dataValue.(types.List).Elements()
				protoValues := make([]*configv1.IpList_IpRanges, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue *configv1.IpList_IpRanges
					protoValue, newDiags := ConvertDataValueToIpList_IpRangesProto(ctx, dataValue)
					diags.Append(newDiags...)
					if diags.HasError() {
						return nil, diags
					}
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.IpRanges = protoValue
		}
	}
	if !afterData.Name.Equal(beforeData.Name) {
		proto.UpdateMask.Append(proto, "name")
		if !afterData.Name.IsUnknown() && !afterData.Name.IsNull() {
			var dataValue attr.Value = afterData.Name
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Name = protoValue
		}
	}
	return proto, diags
}

func NewUpdateK8SClusterOnboardingCredentialRequest(ctx context.Context, beforeData, afterData *K8SClusterOnboardingCredentialResourceModel) (*configv1.UpdateK8SClusterOnboardingCredentialRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.UpdateK8SClusterOnboardingCredentialRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	if !afterData.Description.Equal(beforeData.Description) {
		proto.UpdateMask.Append(proto, "description")
		if !afterData.Description.IsUnknown() && !afterData.Description.IsNull() {
			var dataValue attr.Value = afterData.Description
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Description = &protoValue
		}
	}
	if !afterData.Name.Equal(beforeData.Name) {
		proto.UpdateMask.Append(proto, "name")
		if !afterData.Name.IsUnknown() && !afterData.Name.IsNull() {
			var dataValue attr.Value = afterData.Name
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Name = protoValue
		}
	}
	return proto, diags
}

func NewUpdateTagToLabelRequest(ctx context.Context, beforeData, afterData *TagToLabelResourceModel) (*configv1.UpdateTagToLabelRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	proto := &configv1.UpdateTagToLabelRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	if !afterData.AwsTagKeys.Equal(beforeData.AwsTagKeys) {
		proto.UpdateMask.Append(proto, "aws_tag_keys")
		if !afterData.AwsTagKeys.IsUnknown() && !afterData.AwsTagKeys.IsNull() {
			var dataValue attr.Value = afterData.AwsTagKeys
			var protoValue []string
			{
				dataElements := dataValue.(types.Set).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AwsTagKeys = protoValue
		}
	}
	if !afterData.AzureTagKeys.Equal(beforeData.AzureTagKeys) {
		proto.UpdateMask.Append(proto, "azure_tag_keys")
		if !afterData.AzureTagKeys.IsUnknown() && !afterData.AzureTagKeys.IsNull() {
			var dataValue attr.Value = afterData.AzureTagKeys
			var protoValue []string
			{
				dataElements := dataValue.(types.Set).Elements()
				protoValues := make([]string, 0, len(dataElements))
				for _, dataElement := range dataElements {
					var dataValue attr.Value = dataElement
					var protoValue string
					protoValue = dataValue.(types.String).ValueString()
					protoValues = append(protoValues, protoValue)
				}
				protoValue = protoValues
			}
			proto.AzureTagKeys = protoValue
		}
	}
	if !afterData.Icon.Equal(beforeData.Icon) {
		proto.UpdateMask.Append(proto, "icon")
		if !afterData.Icon.IsUnknown() && !afterData.Icon.IsNull() {
			var dataValue attr.Value = afterData.Icon
			var protoValue *configv1.TagToLabel_Icon
			protoValue, newDiags := ConvertDataValueToTagToLabel_IconProto(ctx, dataValue)
			diags.Append(newDiags...)
			if diags.HasError() {
				return nil, diags
			}
			proto.Icon = protoValue
		}
	}
	if !afterData.Key.Equal(beforeData.Key) {
		proto.UpdateMask.Append(proto, "key")
		if !afterData.Key.IsUnknown() && !afterData.Key.IsNull() {
			var dataValue attr.Value = afterData.Key
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Key = protoValue
		}
	}
	if !afterData.Name.Equal(beforeData.Name) {
		proto.UpdateMask.Append(proto, "name")
		if !afterData.Name.IsUnknown() && !afterData.Name.IsNull() {
			var dataValue attr.Value = afterData.Name
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Name = protoValue
		}
	}
	return proto, diags
}
func CopyCreateApplicationResponse(dst *ApplicationResourceModel, src *configv1.CreateApplicationResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.DeploymentId = types.StringValue(src.DeploymentId)
	dst.Description = types.StringPointerValue(src.Description)
	dst.Name = types.StringValue(src.Name)
}
func CopyReadApplicationResponse(dst *ApplicationResourceModel, src *configv1.ReadApplicationResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.DeploymentId = types.StringValue(src.DeploymentId)
	dst.Description = types.StringPointerValue(src.Description)
	dst.Name = types.StringValue(src.Name)
}
func CopyUpdateApplicationResponse(dst *ApplicationResourceModel, src *configv1.UpdateApplicationResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.DeploymentId = types.StringValue(src.DeploymentId)
	dst.Description = types.StringPointerValue(src.Description)
	dst.Name = types.StringValue(src.Name)
}
func CopyCreateApplicationAwsResourcesResponse(dst *ApplicationAwsResourcesResourceModel, src *configv1.CreateApplicationAwsResourcesResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.AccountId = types.StringValue(src.AccountId)
	dst.ApplicationId = types.StringValue(src.ApplicationId)
	{
		protoValue := src.ApplicationResourceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ApplicationResourceIds = dataValue
	}
	{
		protoValue := src.Arns
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.Arns = dataValue
	}
	{
		protoValue := src.AwsCustomerGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsCustomerGatewayIds = dataValue
	}
	{
		protoValue := src.AwsDxConnectionIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsDxConnectionIds = dataValue
	}
	{
		protoValue := src.AwsDxVirtualInterfaceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsDxVirtualInterfaceIds = dataValue
	}
	{
		protoValue := src.AwsEbsVolumeIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEbsVolumeIds = dataValue
	}
	{
		protoValue := src.AwsEc2InstanceConnectEndpointIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEc2InstanceConnectEndpointIds = dataValue
	}
	{
		protoValue := src.AwsEc2TransitGatewayAttachmentIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEc2TransitGatewayAttachmentIds = dataValue
	}
	{
		protoValue := src.AwsEc2TransitGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEc2TransitGatewayIds = dataValue
	}
	{
		protoValue := src.AwsEc2TransitGatewayMulticastDomainIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEc2TransitGatewayMulticastDomainIds = dataValue
	}
	{
		protoValue := src.AwsEc2TransitGatewayRouteTableIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEc2TransitGatewayRouteTableIds = dataValue
	}
	{
		protoValue := src.AwsEgressOnlyInternetGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEgressOnlyInternetGatewayIds = dataValue
	}
	{
		protoValue := src.AwsEipIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEipIds = dataValue
	}
	{
		protoValue := src.AwsFlowLogIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsFlowLogIds = dataValue
	}
	{
		protoValue := src.AwsInstancesIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsInstancesIds = dataValue
	}
	{
		protoValue := src.AwsInternetGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsInternetGatewayIds = dataValue
	}
	{
		protoValue := src.AwsNatGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsNatGatewayIds = dataValue
	}
	{
		protoValue := src.AwsNetworkAclIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsNetworkAclIds = dataValue
	}
	{
		protoValue := src.AwsNetworkInterfaceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsNetworkInterfaceIds = dataValue
	}
	{
		protoValue := src.AwsRdsClusterIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsRdsClusterIds = dataValue
	}
	{
		protoValue := src.AwsRouteTableIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsRouteTableIds = dataValue
	}
	{
		protoValue := src.AwsSecurityGroupIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSecurityGroupIds = dataValue
	}
	{
		protoValue := src.AwsSecurityGroupRuleIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSecurityGroupRuleIds = dataValue
	}
	{
		protoValue := src.AwsSpotFleetRequestIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSpotFleetRequestIds = dataValue
	}
	{
		protoValue := src.AwsSpotInstanceRequestIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSpotInstanceRequestIds = dataValue
	}
	{
		protoValue := src.AwsSubnetIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSubnetIds = dataValue
	}
	{
		protoValue := src.AwsVpcEndpointIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpcEndpointIds = dataValue
	}
	{
		protoValue := src.AwsVpcEndpointServiceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpcEndpointServiceIds = dataValue
	}
	{
		protoValue := src.AwsVpcIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpcIds = dataValue
	}
	{
		protoValue := src.AwsVpcPeeringConnectionIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpcPeeringConnectionIds = dataValue
	}
	{
		protoValue := src.AwsVpnConnectionIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpnConnectionIds = dataValue
	}
	{
		protoValue := src.AwsVpnGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpnGatewayIds = dataValue
	}
}
func CopyReadApplicationAwsResourcesResponse(dst *ApplicationAwsResourcesResourceModel, src *configv1.ReadApplicationAwsResourcesResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.AccountId = types.StringValue(src.AccountId)
	dst.ApplicationId = types.StringValue(src.ApplicationId)
	{
		protoValue := src.ApplicationResourceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ApplicationResourceIds = dataValue
	}
	{
		protoValue := src.Arns
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.Arns = dataValue
	}
	{
		protoValue := src.AwsCustomerGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsCustomerGatewayIds = dataValue
	}
	{
		protoValue := src.AwsDxConnectionIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsDxConnectionIds = dataValue
	}
	{
		protoValue := src.AwsDxVirtualInterfaceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsDxVirtualInterfaceIds = dataValue
	}
	{
		protoValue := src.AwsEbsVolumeIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEbsVolumeIds = dataValue
	}
	{
		protoValue := src.AwsEc2InstanceConnectEndpointIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEc2InstanceConnectEndpointIds = dataValue
	}
	{
		protoValue := src.AwsEc2TransitGatewayAttachmentIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEc2TransitGatewayAttachmentIds = dataValue
	}
	{
		protoValue := src.AwsEc2TransitGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEc2TransitGatewayIds = dataValue
	}
	{
		protoValue := src.AwsEc2TransitGatewayMulticastDomainIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEc2TransitGatewayMulticastDomainIds = dataValue
	}
	{
		protoValue := src.AwsEc2TransitGatewayRouteTableIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEc2TransitGatewayRouteTableIds = dataValue
	}
	{
		protoValue := src.AwsEgressOnlyInternetGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEgressOnlyInternetGatewayIds = dataValue
	}
	{
		protoValue := src.AwsEipIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEipIds = dataValue
	}
	{
		protoValue := src.AwsFlowLogIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsFlowLogIds = dataValue
	}
	{
		protoValue := src.AwsInstancesIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsInstancesIds = dataValue
	}
	{
		protoValue := src.AwsInternetGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsInternetGatewayIds = dataValue
	}
	{
		protoValue := src.AwsNatGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsNatGatewayIds = dataValue
	}
	{
		protoValue := src.AwsNetworkAclIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsNetworkAclIds = dataValue
	}
	{
		protoValue := src.AwsNetworkInterfaceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsNetworkInterfaceIds = dataValue
	}
	{
		protoValue := src.AwsRdsClusterIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsRdsClusterIds = dataValue
	}
	{
		protoValue := src.AwsRouteTableIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsRouteTableIds = dataValue
	}
	{
		protoValue := src.AwsSecurityGroupIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSecurityGroupIds = dataValue
	}
	{
		protoValue := src.AwsSecurityGroupRuleIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSecurityGroupRuleIds = dataValue
	}
	{
		protoValue := src.AwsSpotFleetRequestIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSpotFleetRequestIds = dataValue
	}
	{
		protoValue := src.AwsSpotInstanceRequestIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSpotInstanceRequestIds = dataValue
	}
	{
		protoValue := src.AwsSubnetIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSubnetIds = dataValue
	}
	{
		protoValue := src.AwsVpcEndpointIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpcEndpointIds = dataValue
	}
	{
		protoValue := src.AwsVpcEndpointServiceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpcEndpointServiceIds = dataValue
	}
	{
		protoValue := src.AwsVpcIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpcIds = dataValue
	}
	{
		protoValue := src.AwsVpcPeeringConnectionIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpcPeeringConnectionIds = dataValue
	}
	{
		protoValue := src.AwsVpnConnectionIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpnConnectionIds = dataValue
	}
	{
		protoValue := src.AwsVpnGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpnGatewayIds = dataValue
	}
}
func CopyUpdateApplicationAwsResourcesResponse(dst *ApplicationAwsResourcesResourceModel, src *configv1.UpdateApplicationAwsResourcesResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.AccountId = types.StringValue(src.AccountId)
	dst.ApplicationId = types.StringValue(src.ApplicationId)
	{
		protoValue := src.ApplicationResourceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ApplicationResourceIds = dataValue
	}
	{
		protoValue := src.Arns
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.Arns = dataValue
	}
	{
		protoValue := src.AwsCustomerGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsCustomerGatewayIds = dataValue
	}
	{
		protoValue := src.AwsDxConnectionIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsDxConnectionIds = dataValue
	}
	{
		protoValue := src.AwsDxVirtualInterfaceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsDxVirtualInterfaceIds = dataValue
	}
	{
		protoValue := src.AwsEbsVolumeIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEbsVolumeIds = dataValue
	}
	{
		protoValue := src.AwsEc2InstanceConnectEndpointIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEc2InstanceConnectEndpointIds = dataValue
	}
	{
		protoValue := src.AwsEc2TransitGatewayAttachmentIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEc2TransitGatewayAttachmentIds = dataValue
	}
	{
		protoValue := src.AwsEc2TransitGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEc2TransitGatewayIds = dataValue
	}
	{
		protoValue := src.AwsEc2TransitGatewayMulticastDomainIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEc2TransitGatewayMulticastDomainIds = dataValue
	}
	{
		protoValue := src.AwsEc2TransitGatewayRouteTableIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEc2TransitGatewayRouteTableIds = dataValue
	}
	{
		protoValue := src.AwsEgressOnlyInternetGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEgressOnlyInternetGatewayIds = dataValue
	}
	{
		protoValue := src.AwsEipIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsEipIds = dataValue
	}
	{
		protoValue := src.AwsFlowLogIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsFlowLogIds = dataValue
	}
	{
		protoValue := src.AwsInstancesIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsInstancesIds = dataValue
	}
	{
		protoValue := src.AwsInternetGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsInternetGatewayIds = dataValue
	}
	{
		protoValue := src.AwsNatGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsNatGatewayIds = dataValue
	}
	{
		protoValue := src.AwsNetworkAclIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsNetworkAclIds = dataValue
	}
	{
		protoValue := src.AwsNetworkInterfaceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsNetworkInterfaceIds = dataValue
	}
	{
		protoValue := src.AwsRdsClusterIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsRdsClusterIds = dataValue
	}
	{
		protoValue := src.AwsRouteTableIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsRouteTableIds = dataValue
	}
	{
		protoValue := src.AwsSecurityGroupIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSecurityGroupIds = dataValue
	}
	{
		protoValue := src.AwsSecurityGroupRuleIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSecurityGroupRuleIds = dataValue
	}
	{
		protoValue := src.AwsSpotFleetRequestIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSpotFleetRequestIds = dataValue
	}
	{
		protoValue := src.AwsSpotInstanceRequestIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSpotInstanceRequestIds = dataValue
	}
	{
		protoValue := src.AwsSubnetIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSubnetIds = dataValue
	}
	{
		protoValue := src.AwsVpcEndpointIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpcEndpointIds = dataValue
	}
	{
		protoValue := src.AwsVpcEndpointServiceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpcEndpointServiceIds = dataValue
	}
	{
		protoValue := src.AwsVpcIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpcIds = dataValue
	}
	{
		protoValue := src.AwsVpcPeeringConnectionIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpcPeeringConnectionIds = dataValue
	}
	{
		protoValue := src.AwsVpnConnectionIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpnConnectionIds = dataValue
	}
	{
		protoValue := src.AwsVpnGatewayIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpnGatewayIds = dataValue
	}
}
func CopyCreateApplicationAzureResourcesResponse(dst *ApplicationAzureResourcesResourceModel, src *configv1.CreateApplicationAzureResourcesResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.ApplicationId = types.StringValue(src.ApplicationId)
	{
		protoValue := src.ApplicationResourceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ApplicationResourceIds = dataValue
	}
	{
		protoValue := src.ResourceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ResourceIds = dataValue
	}
	dst.SubscriptionId = types.StringValue(src.SubscriptionId)
}
func CopyReadApplicationAzureResourcesResponse(dst *ApplicationAzureResourcesResourceModel, src *configv1.ReadApplicationAzureResourcesResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.ApplicationId = types.StringValue(src.ApplicationId)
	{
		protoValue := src.ApplicationResourceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ApplicationResourceIds = dataValue
	}
	{
		protoValue := src.ResourceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ResourceIds = dataValue
	}
	dst.SubscriptionId = types.StringValue(src.SubscriptionId)
}
func CopyUpdateApplicationAzureResourcesResponse(dst *ApplicationAzureResourcesResourceModel, src *configv1.UpdateApplicationAzureResourcesResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.ApplicationId = types.StringValue(src.ApplicationId)
	{
		protoValue := src.ApplicationResourceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ApplicationResourceIds = dataValue
	}
	{
		protoValue := src.ResourceIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ResourceIds = dataValue
	}
	dst.SubscriptionId = types.StringValue(src.SubscriptionId)
}
func CopyCreateApplicationPolicyRuleResponse(dst *ApplicationPolicyRuleResourceModel, src *configv1.CreateApplicationPolicyRuleResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.Action = types.StringValue(src.Action)
	dst.ApplicationId = types.StringValue(src.ApplicationId)
	dst.Description = types.StringPointerValue(src.Description)
	dst.ExternalScope = types.BoolPointerValue(src.ExternalScope)
	{
		protoValue := src.FromIpListIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.FromIpListIds = dataValue
	}
	{
		protoValue := src.FromLabels
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForApplicationPolicyRule_FromLabels(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.ApplicationPolicyRule_FromLabels = protoElement
					var dataValue attr.Value
					dataValue = ConvertApplicationPolicyRule_FromLabelsToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.FromLabels = dataValue
	}
	{
		protoValue := src.ToIpListIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ToIpListIds = dataValue
	}
	{
		protoValue := src.ToLabels
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForApplicationPolicyRule_ToLabels(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.ApplicationPolicyRule_ToLabels = protoElement
					var dataValue attr.Value
					dataValue = ConvertApplicationPolicyRule_ToLabelsToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ToLabels = dataValue
	}
	{
		protoValue := src.ToPortRanges
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForApplicationPolicyRule_ToPortRanges(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.ApplicationPolicyRule_ToPortRanges = protoElement
					var dataValue attr.Value
					dataValue = ConvertApplicationPolicyRule_ToPortRangesToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ToPortRanges = dataValue
	}
}
func CopyReadApplicationPolicyRuleResponse(dst *ApplicationPolicyRuleResourceModel, src *configv1.ReadApplicationPolicyRuleResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.Action = types.StringValue(src.Action)
	dst.ApplicationId = types.StringValue(src.ApplicationId)
	dst.Description = types.StringPointerValue(src.Description)
	dst.ExternalScope = types.BoolPointerValue(src.ExternalScope)
	{
		protoValue := src.FromIpListIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.FromIpListIds = dataValue
	}
	{
		protoValue := src.FromLabels
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForApplicationPolicyRule_FromLabels(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.ApplicationPolicyRule_FromLabels = protoElement
					var dataValue attr.Value
					dataValue = ConvertApplicationPolicyRule_FromLabelsToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.FromLabels = dataValue
	}
	{
		protoValue := src.ToIpListIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ToIpListIds = dataValue
	}
	{
		protoValue := src.ToLabels
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForApplicationPolicyRule_ToLabels(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.ApplicationPolicyRule_ToLabels = protoElement
					var dataValue attr.Value
					dataValue = ConvertApplicationPolicyRule_ToLabelsToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ToLabels = dataValue
	}
	{
		protoValue := src.ToPortRanges
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForApplicationPolicyRule_ToPortRanges(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.ApplicationPolicyRule_ToPortRanges = protoElement
					var dataValue attr.Value
					dataValue = ConvertApplicationPolicyRule_ToPortRangesToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ToPortRanges = dataValue
	}
}
func CopyUpdateApplicationPolicyRuleResponse(dst *ApplicationPolicyRuleResourceModel, src *configv1.UpdateApplicationPolicyRuleResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.Action = types.StringValue(src.Action)
	dst.ApplicationId = types.StringValue(src.ApplicationId)
	dst.Description = types.StringPointerValue(src.Description)
	dst.ExternalScope = types.BoolPointerValue(src.ExternalScope)
	{
		protoValue := src.FromIpListIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.FromIpListIds = dataValue
	}
	{
		protoValue := src.FromLabels
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForApplicationPolicyRule_FromLabels(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.ApplicationPolicyRule_FromLabels = protoElement
					var dataValue attr.Value
					dataValue = ConvertApplicationPolicyRule_FromLabelsToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.FromLabels = dataValue
	}
	{
		protoValue := src.ToIpListIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ToIpListIds = dataValue
	}
	{
		protoValue := src.ToLabels
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForApplicationPolicyRule_ToLabels(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.ApplicationPolicyRule_ToLabels = protoElement
					var dataValue attr.Value
					dataValue = ConvertApplicationPolicyRule_ToLabelsToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ToLabels = dataValue
	}
	{
		protoValue := src.ToPortRanges
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForApplicationPolicyRule_ToPortRanges(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.ApplicationPolicyRule_ToPortRanges = protoElement
					var dataValue attr.Value
					dataValue = ConvertApplicationPolicyRule_ToPortRangesToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.ToPortRanges = dataValue
	}
}
func CopyCreateAwsAccountResponse(dst *AwsAccountResourceModel, src *configv1.CreateAwsAccountResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.AccountId = types.StringValue(src.AccountId)
	dst.Mode = types.StringValue(src.Mode)
	dst.Name = types.StringValue(src.Name)
	dst.OrganizationId = types.StringPointerValue(src.OrganizationId)
	dst.RoleArn = types.StringValue(src.RoleArn)
}
func CopyReadAwsAccountResponse(dst *AwsAccountResourceModel, src *configv1.ReadAwsAccountResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.AccountId = types.StringValue(src.AccountId)
	dst.Mode = types.StringValue(src.Mode)
	dst.Name = types.StringValue(src.Name)
	dst.OrganizationId = types.StringPointerValue(src.OrganizationId)
	dst.RoleArn = types.StringValue(src.RoleArn)
}
func CopyUpdateAwsAccountResponse(dst *AwsAccountResourceModel, src *configv1.UpdateAwsAccountResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.AccountId = types.StringValue(src.AccountId)
	dst.Mode = types.StringValue(src.Mode)
	dst.Name = types.StringValue(src.Name)
	dst.OrganizationId = types.StringPointerValue(src.OrganizationId)
	dst.RoleArn = types.StringValue(src.RoleArn)
}
func CopyCreateAwsFlowLogsS3BucketResponse(dst *AwsFlowLogsS3BucketResourceModel, src *configv1.CreateAwsFlowLogsS3BucketResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.AccountId = types.StringValue(src.AccountId)
	dst.S3BucketArn = types.StringValue(src.S3BucketArn)
}
func CopyReadAwsFlowLogsS3BucketResponse(dst *AwsFlowLogsS3BucketResourceModel, src *configv1.ReadAwsFlowLogsS3BucketResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.AccountId = types.StringValue(src.AccountId)
	dst.S3BucketArn = types.StringValue(src.S3BucketArn)
}
func CopyUpdateAwsFlowLogsS3BucketResponse(dst *AwsFlowLogsS3BucketResourceModel, src *configv1.UpdateAwsFlowLogsS3BucketResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.AccountId = types.StringValue(src.AccountId)
	dst.S3BucketArn = types.StringValue(src.S3BucketArn)
}
func CopyCreateAzureFlowLogsStorageAccountResponse(dst *AzureFlowLogsStorageAccountResourceModel, src *configv1.CreateAzureFlowLogsStorageAccountResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.StorageAccountResourceId = types.StringValue(src.StorageAccountResourceId)
	dst.SubscriptionId = types.StringValue(src.SubscriptionId)
}
func CopyReadAzureFlowLogsStorageAccountResponse(dst *AzureFlowLogsStorageAccountResourceModel, src *configv1.ReadAzureFlowLogsStorageAccountResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.StorageAccountResourceId = types.StringValue(src.StorageAccountResourceId)
	dst.SubscriptionId = types.StringValue(src.SubscriptionId)
}
func CopyUpdateAzureFlowLogsStorageAccountResponse(dst *AzureFlowLogsStorageAccountResourceModel, src *configv1.UpdateAzureFlowLogsStorageAccountResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.StorageAccountResourceId = types.StringValue(src.StorageAccountResourceId)
	dst.SubscriptionId = types.StringValue(src.SubscriptionId)
}
func CopyCreateAzureSubscriptionResponse(dst *AzureSubscriptionResourceModel, src *configv1.CreateAzureSubscriptionResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.ClientId = types.StringValue(src.ClientId)
	dst.Mode = types.StringValue(src.Mode)
	dst.Name = types.StringValue(src.Name)
	dst.SubscriptionId = types.StringValue(src.SubscriptionId)
	dst.TenantId = types.StringValue(src.TenantId)
}
func CopyReadAzureSubscriptionResponse(dst *AzureSubscriptionResourceModel, src *configv1.ReadAzureSubscriptionResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.ClientId = types.StringValue(src.ClientId)
	dst.Mode = types.StringValue(src.Mode)
	dst.Name = types.StringValue(src.Name)
	dst.SubscriptionId = types.StringValue(src.SubscriptionId)
	dst.TenantId = types.StringValue(src.TenantId)
}
func CopyUpdateAzureSubscriptionResponse(dst *AzureSubscriptionResourceModel, src *configv1.UpdateAzureSubscriptionResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.ClientId = types.StringValue(src.ClientId)
	dst.Mode = types.StringValue(src.Mode)
	dst.Name = types.StringValue(src.Name)
	dst.SubscriptionId = types.StringValue(src.SubscriptionId)
	dst.TenantId = types.StringValue(src.TenantId)
}
func CopyCreateDeploymentResponse(dst *DeploymentResourceModel, src *configv1.CreateDeploymentResponse) {
	dst.Id = types.StringValue(src.Id)
	{
		protoValue := src.AwsAccountIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsAccountIds = dataValue
	}
	{
		protoValue := src.AwsRegions
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsRegions = dataValue
	}
	{
		protoValue := src.AwsSubnetIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSubnetIds = dataValue
	}
	{
		protoValue := src.AwsTags
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForDeployment_AwsTags(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.Deployment_AwsTags = protoElement
					var dataValue attr.Value
					dataValue = ConvertDeployment_AwsTagsToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsTags = dataValue
	}
	{
		protoValue := src.AwsVpcIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpcIds = dataValue
	}
	{
		protoValue := src.AzureRegions
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureRegions = dataValue
	}
	{
		protoValue := src.AzureSubnetIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureSubnetIds = dataValue
	}
	{
		protoValue := src.AzureSubscriptionIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureSubscriptionIds = dataValue
	}
	{
		protoValue := src.AzureTags
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForDeployment_AzureTags(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.Deployment_AzureTags = protoElement
					var dataValue attr.Value
					dataValue = ConvertDeployment_AzureTagsToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureTags = dataValue
	}
	{
		protoValue := src.AzureVnetIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureVnetIds = dataValue
	}
	dst.Description = types.StringPointerValue(src.Description)
	dst.Name = types.StringValue(src.Name)
}
func CopyReadDeploymentResponse(dst *DeploymentResourceModel, src *configv1.ReadDeploymentResponse) {
	dst.Id = types.StringValue(src.Id)
	{
		protoValue := src.AwsAccountIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsAccountIds = dataValue
	}
	{
		protoValue := src.AwsRegions
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsRegions = dataValue
	}
	{
		protoValue := src.AwsSubnetIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSubnetIds = dataValue
	}
	{
		protoValue := src.AwsTags
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForDeployment_AwsTags(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.Deployment_AwsTags = protoElement
					var dataValue attr.Value
					dataValue = ConvertDeployment_AwsTagsToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsTags = dataValue
	}
	{
		protoValue := src.AwsVpcIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpcIds = dataValue
	}
	{
		protoValue := src.AzureRegions
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureRegions = dataValue
	}
	{
		protoValue := src.AzureSubnetIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureSubnetIds = dataValue
	}
	{
		protoValue := src.AzureSubscriptionIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureSubscriptionIds = dataValue
	}
	{
		protoValue := src.AzureTags
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForDeployment_AzureTags(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.Deployment_AzureTags = protoElement
					var dataValue attr.Value
					dataValue = ConvertDeployment_AzureTagsToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureTags = dataValue
	}
	{
		protoValue := src.AzureVnetIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureVnetIds = dataValue
	}
	dst.Description = types.StringPointerValue(src.Description)
	dst.Name = types.StringValue(src.Name)
}
func CopyUpdateDeploymentResponse(dst *DeploymentResourceModel, src *configv1.UpdateDeploymentResponse) {
	dst.Id = types.StringValue(src.Id)
	{
		protoValue := src.AwsAccountIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsAccountIds = dataValue
	}
	{
		protoValue := src.AwsRegions
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsRegions = dataValue
	}
	{
		protoValue := src.AwsSubnetIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsSubnetIds = dataValue
	}
	{
		protoValue := src.AwsTags
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForDeployment_AwsTags(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.Deployment_AwsTags = protoElement
					var dataValue attr.Value
					dataValue = ConvertDeployment_AwsTagsToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsTags = dataValue
	}
	{
		protoValue := src.AwsVpcIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsVpcIds = dataValue
	}
	{
		protoValue := src.AzureRegions
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureRegions = dataValue
	}
	{
		protoValue := src.AzureSubnetIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureSubnetIds = dataValue
	}
	{
		protoValue := src.AzureSubscriptionIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureSubscriptionIds = dataValue
	}
	{
		protoValue := src.AzureTags
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForDeployment_AzureTags(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.Deployment_AzureTags = protoElement
					var dataValue attr.Value
					dataValue = ConvertDeployment_AzureTagsToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureTags = dataValue
	}
	{
		protoValue := src.AzureVnetIds
		var dataValue types.List
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureVnetIds = dataValue
	}
	dst.Description = types.StringPointerValue(src.Description)
	dst.Name = types.StringValue(src.Name)
}
func CopyCreateIpListResponse(dst *IpListResourceModel, src *configv1.CreateIpListResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.Description = types.StringPointerValue(src.Description)
	{
		protoValue := src.IpAddresses
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForIpList_IpAddresses(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.IpList_IpAddresses = protoElement
					var dataValue attr.Value
					dataValue = ConvertIpList_IpAddressesToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.IpAddresses = dataValue
	}
	{
		protoValue := src.IpRanges
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForIpList_IpRanges(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.IpList_IpRanges = protoElement
					var dataValue attr.Value
					dataValue = ConvertIpList_IpRangesToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.IpRanges = dataValue
	}
	dst.Name = types.StringValue(src.Name)
}
func CopyReadIpListResponse(dst *IpListResourceModel, src *configv1.ReadIpListResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.Description = types.StringPointerValue(src.Description)
	{
		protoValue := src.IpAddresses
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForIpList_IpAddresses(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.IpList_IpAddresses = protoElement
					var dataValue attr.Value
					dataValue = ConvertIpList_IpAddressesToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.IpAddresses = dataValue
	}
	{
		protoValue := src.IpRanges
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForIpList_IpRanges(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.IpList_IpRanges = protoElement
					var dataValue attr.Value
					dataValue = ConvertIpList_IpRangesToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.IpRanges = dataValue
	}
	dst.Name = types.StringValue(src.Name)
}
func CopyUpdateIpListResponse(dst *IpListResourceModel, src *configv1.UpdateIpListResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.Description = types.StringPointerValue(src.Description)
	{
		protoValue := src.IpAddresses
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForIpList_IpAddresses(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.IpList_IpAddresses = protoElement
					var dataValue attr.Value
					dataValue = ConvertIpList_IpAddressesToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.IpAddresses = dataValue
	}
	{
		protoValue := src.IpRanges
		var dataValue types.List
		{
			dataElementType := types.ObjectType{
				AttrTypes: GetTypeAttrsForIpList_IpRanges(),
			}
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.ListNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue *configv1.IpList_IpRanges = protoElement
					var dataValue attr.Value
					dataValue = ConvertIpList_IpRangesToObjectValueFromProto(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.ListValueMust(dataElementType, dataValues)
			}
		}
		dst.IpRanges = dataValue
	}
	dst.Name = types.StringValue(src.Name)
}
func CopyCreateK8SClusterOnboardingCredentialResponse(dst *K8SClusterOnboardingCredentialResourceModel, src *configv1.CreateK8SClusterOnboardingCredentialResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.ClientId = types.StringValue(src.ClientId)
	dst.ClientSecret = types.StringValue(src.ClientSecret)
	dst.CreatedAt = types.StringValue(src.CreatedAt)
	dst.Description = types.StringPointerValue(src.Description)
	dst.IllumioRegion = types.StringValue(src.IllumioRegion)
	dst.Name = types.StringValue(src.Name)
}
func CopyReadK8SClusterOnboardingCredentialResponse(dst *K8SClusterOnboardingCredentialResourceModel, src *configv1.ReadK8SClusterOnboardingCredentialResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.ClientId = types.StringValue(src.ClientId)
	dst.CreatedAt = types.StringValue(src.CreatedAt)
	dst.Description = types.StringPointerValue(src.Description)
	dst.IllumioRegion = types.StringValue(src.IllumioRegion)
	dst.Name = types.StringValue(src.Name)
}
func CopyUpdateK8SClusterOnboardingCredentialResponse(dst *K8SClusterOnboardingCredentialResourceModel, src *configv1.UpdateK8SClusterOnboardingCredentialResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.ClientId = types.StringValue(src.ClientId)
	dst.CreatedAt = types.StringValue(src.CreatedAt)
	dst.Description = types.StringPointerValue(src.Description)
	dst.IllumioRegion = types.StringValue(src.IllumioRegion)
	dst.Name = types.StringValue(src.Name)
}
func CopyCreateTagToLabelResponse(dst *TagToLabelResourceModel, src *configv1.CreateTagToLabelResponse) {
	dst.Id = types.StringValue(src.Id)
	{
		protoValue := src.AwsTagKeys
		var dataValue types.Set
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.SetNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.SetValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsTagKeys = dataValue
	}
	{
		protoValue := src.AzureTagKeys
		var dataValue types.Set
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.SetNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.SetValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureTagKeys = dataValue
	}
	dst.Icon = ConvertTagToLabel_IconToObjectValueFromProto(src.Icon)
	dst.Key = types.StringValue(src.Key)
	dst.Name = types.StringValue(src.Name)
}
func CopyReadTagToLabelResponse(dst *TagToLabelResourceModel, src *configv1.ReadTagToLabelResponse) {
	dst.Id = types.StringValue(src.Id)
	{
		protoValue := src.AwsTagKeys
		var dataValue types.Set
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.SetNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.SetValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsTagKeys = dataValue
	}
	{
		protoValue := src.AzureTagKeys
		var dataValue types.Set
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.SetNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.SetValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureTagKeys = dataValue
	}
	dst.Icon = ConvertTagToLabel_IconToObjectValueFromProto(src.Icon)
	dst.Key = types.StringValue(src.Key)
	dst.Name = types.StringValue(src.Name)
}
func CopyUpdateTagToLabelResponse(dst *TagToLabelResourceModel, src *configv1.UpdateTagToLabelResponse) {
	dst.Id = types.StringValue(src.Id)
	{
		protoValue := src.AwsTagKeys
		var dataValue types.Set
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.SetNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.SetValueMust(dataElementType, dataValues)
			}
		}
		dst.AwsTagKeys = dataValue
	}
	{
		protoValue := src.AzureTagKeys
		var dataValue types.Set
		{
			dataElementType := types.StringType
			protoElements := protoValue
			if protoElements == nil {
				dataValue = types.SetNull(dataElementType)
			} else {
				dataValues := make([]attr.Value, 0, len(protoElements))
				for _, protoElement := range protoElements {
					var protoValue string = protoElement
					var dataValue attr.Value
					dataValue = types.StringValue(protoValue)
					dataValues = append(dataValues, dataValue)
				}
				dataValue = types.SetValueMust(dataElementType, dataValues)
			}
		}
		dst.AzureTagKeys = dataValue
	}
	dst.Icon = ConvertTagToLabel_IconToObjectValueFromProto(src.Icon)
	dst.Key = types.StringValue(src.Key)
	dst.Name = types.StringValue(src.Name)
}

type ApplicationPolicyRule_FromLabels struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func GetTypeAttrsForApplicationPolicyRule_FromLabels() map[string]attr.Type {
	return map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	}
}

func ConvertApplicationPolicyRule_FromLabelsToObjectValueFromProto(proto *configv1.ApplicationPolicyRule_FromLabels) basetypes.ObjectValue {
	return types.ObjectValueMust(
		GetTypeAttrsForApplicationPolicyRule_FromLabels(),
		map[string]attr.Value{
			"key":   types.StringValue(proto.Key),
			"value": types.StringValue(proto.Value),
		},
	)
}

func ConvertDataValueToApplicationPolicyRule_FromLabelsProto(ctx context.Context, dataValue attr.Value) (*configv1.ApplicationPolicyRule_FromLabels, diag.Diagnostics) {
	pv := ApplicationPolicyRule_FromLabels{}
	diags := tfsdk.ValueAs(ctx, dataValue, &pv)
	if diags.HasError() {
		return nil, diags
	}
	proto := &configv1.ApplicationPolicyRule_FromLabels{}
	proto.Key = pv.Key.ValueString()
	proto.Value = pv.Value.ValueString()
	return proto, diags
}

type ApplicationPolicyRule_ToLabels struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func GetTypeAttrsForApplicationPolicyRule_ToLabels() map[string]attr.Type {
	return map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	}
}

func ConvertApplicationPolicyRule_ToLabelsToObjectValueFromProto(proto *configv1.ApplicationPolicyRule_ToLabels) basetypes.ObjectValue {
	return types.ObjectValueMust(
		GetTypeAttrsForApplicationPolicyRule_ToLabels(),
		map[string]attr.Value{
			"key":   types.StringValue(proto.Key),
			"value": types.StringValue(proto.Value),
		},
	)
}

func ConvertDataValueToApplicationPolicyRule_ToLabelsProto(ctx context.Context, dataValue attr.Value) (*configv1.ApplicationPolicyRule_ToLabels, diag.Diagnostics) {
	pv := ApplicationPolicyRule_ToLabels{}
	diags := tfsdk.ValueAs(ctx, dataValue, &pv)
	if diags.HasError() {
		return nil, diags
	}
	proto := &configv1.ApplicationPolicyRule_ToLabels{}
	proto.Key = pv.Key.ValueString()
	proto.Value = pv.Value.ValueString()
	return proto, diags
}

type ApplicationPolicyRule_ToPortRanges struct {
	FromPort types.Int64  `tfsdk:"from_port"`
	Protocol types.String `tfsdk:"protocol"`
	ToPort   types.Int64  `tfsdk:"to_port"`
}

func GetTypeAttrsForApplicationPolicyRule_ToPortRanges() map[string]attr.Type {
	return map[string]attr.Type{
		"from_port": types.Int64Type,
		"protocol":  types.StringType,
		"to_port":   types.Int64Type,
	}
}

func ConvertApplicationPolicyRule_ToPortRangesToObjectValueFromProto(proto *configv1.ApplicationPolicyRule_ToPortRanges) basetypes.ObjectValue {
	return types.ObjectValueMust(
		GetTypeAttrsForApplicationPolicyRule_ToPortRanges(),
		map[string]attr.Value{
			"from_port": types.Int64Value(proto.FromPort),
			"protocol":  types.StringValue(proto.Protocol),
			"to_port":   types.Int64Value(proto.ToPort),
		},
	)
}

func ConvertDataValueToApplicationPolicyRule_ToPortRangesProto(ctx context.Context, dataValue attr.Value) (*configv1.ApplicationPolicyRule_ToPortRanges, diag.Diagnostics) {
	pv := ApplicationPolicyRule_ToPortRanges{}
	diags := tfsdk.ValueAs(ctx, dataValue, &pv)
	if diags.HasError() {
		return nil, diags
	}
	proto := &configv1.ApplicationPolicyRule_ToPortRanges{}
	proto.FromPort = pv.FromPort.ValueInt64()
	proto.Protocol = pv.Protocol.ValueString()
	proto.ToPort = pv.ToPort.ValueInt64()
	return proto, diags
}

type Deployment_AwsTags struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func GetTypeAttrsForDeployment_AwsTags() map[string]attr.Type {
	return map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	}
}

func ConvertDeployment_AwsTagsToObjectValueFromProto(proto *configv1.Deployment_AwsTags) basetypes.ObjectValue {
	return types.ObjectValueMust(
		GetTypeAttrsForDeployment_AwsTags(),
		map[string]attr.Value{
			"key":   types.StringValue(proto.Key),
			"value": types.StringValue(proto.Value),
		},
	)
}

func ConvertDataValueToDeployment_AwsTagsProto(ctx context.Context, dataValue attr.Value) (*configv1.Deployment_AwsTags, diag.Diagnostics) {
	pv := Deployment_AwsTags{}
	diags := tfsdk.ValueAs(ctx, dataValue, &pv)
	if diags.HasError() {
		return nil, diags
	}
	proto := &configv1.Deployment_AwsTags{}
	proto.Key = pv.Key.ValueString()
	proto.Value = pv.Value.ValueString()
	return proto, diags
}

type Deployment_AzureTags struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}

func GetTypeAttrsForDeployment_AzureTags() map[string]attr.Type {
	return map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
	}
}

func ConvertDeployment_AzureTagsToObjectValueFromProto(proto *configv1.Deployment_AzureTags) basetypes.ObjectValue {
	return types.ObjectValueMust(
		GetTypeAttrsForDeployment_AzureTags(),
		map[string]attr.Value{
			"key":   types.StringValue(proto.Key),
			"value": types.StringValue(proto.Value),
		},
	)
}

func ConvertDataValueToDeployment_AzureTagsProto(ctx context.Context, dataValue attr.Value) (*configv1.Deployment_AzureTags, diag.Diagnostics) {
	pv := Deployment_AzureTags{}
	diags := tfsdk.ValueAs(ctx, dataValue, &pv)
	if diags.HasError() {
		return nil, diags
	}
	proto := &configv1.Deployment_AzureTags{}
	proto.Key = pv.Key.ValueString()
	proto.Value = pv.Value.ValueString()
	return proto, diags
}

type IpList_IpAddresses struct {
	Exclusion types.Bool   `tfsdk:"exclusion"`
	IpAddress types.String `tfsdk:"ip_address"`
}

func GetTypeAttrsForIpList_IpAddresses() map[string]attr.Type {
	return map[string]attr.Type{
		"exclusion":  types.BoolType,
		"ip_address": types.StringType,
	}
}

func ConvertIpList_IpAddressesToObjectValueFromProto(proto *configv1.IpList_IpAddresses) basetypes.ObjectValue {
	return types.ObjectValueMust(
		GetTypeAttrsForIpList_IpAddresses(),
		map[string]attr.Value{
			"exclusion":  types.BoolValue(proto.Exclusion),
			"ip_address": types.StringValue(proto.IpAddress),
		},
	)
}

func ConvertDataValueToIpList_IpAddressesProto(ctx context.Context, dataValue attr.Value) (*configv1.IpList_IpAddresses, diag.Diagnostics) {
	pv := IpList_IpAddresses{}
	diags := tfsdk.ValueAs(ctx, dataValue, &pv)
	if diags.HasError() {
		return nil, diags
	}
	proto := &configv1.IpList_IpAddresses{}
	proto.Exclusion = pv.Exclusion.ValueBool()
	proto.IpAddress = pv.IpAddress.ValueString()
	return proto, diags
}

type IpList_IpRanges struct {
	Exclusion     types.Bool   `tfsdk:"exclusion"`
	FromIpAddress types.String `tfsdk:"from_ip_address"`
	ToIpAddress   types.String `tfsdk:"to_ip_address"`
}

func GetTypeAttrsForIpList_IpRanges() map[string]attr.Type {
	return map[string]attr.Type{
		"exclusion":       types.BoolType,
		"from_ip_address": types.StringType,
		"to_ip_address":   types.StringType,
	}
}

func ConvertIpList_IpRangesToObjectValueFromProto(proto *configv1.IpList_IpRanges) basetypes.ObjectValue {
	return types.ObjectValueMust(
		GetTypeAttrsForIpList_IpRanges(),
		map[string]attr.Value{
			"exclusion":       types.BoolValue(proto.Exclusion),
			"from_ip_address": types.StringValue(proto.FromIpAddress),
			"to_ip_address":   types.StringValue(proto.ToIpAddress),
		},
	)
}

func ConvertDataValueToIpList_IpRangesProto(ctx context.Context, dataValue attr.Value) (*configv1.IpList_IpRanges, diag.Diagnostics) {
	pv := IpList_IpRanges{}
	diags := tfsdk.ValueAs(ctx, dataValue, &pv)
	if diags.HasError() {
		return nil, diags
	}
	proto := &configv1.IpList_IpRanges{}
	proto.Exclusion = pv.Exclusion.ValueBool()
	proto.FromIpAddress = pv.FromIpAddress.ValueString()
	proto.ToIpAddress = pv.ToIpAddress.ValueString()
	return proto, diags
}

type TagToLabel_Icon struct {
	BackgroundColor types.String `tfsdk:"background_color"`
	ForegroundColor types.String `tfsdk:"foreground_color"`
	Name            types.String `tfsdk:"name"`
}

func GetTypeAttrsForTagToLabel_Icon() map[string]attr.Type {
	return map[string]attr.Type{
		"background_color": types.StringType,
		"foreground_color": types.StringType,
		"name":             types.StringType,
	}
}

func ConvertTagToLabel_IconToObjectValueFromProto(proto *configv1.TagToLabel_Icon) basetypes.ObjectValue {
	return types.ObjectValueMust(
		GetTypeAttrsForTagToLabel_Icon(),
		map[string]attr.Value{
			"background_color": types.StringValue(proto.BackgroundColor),
			"foreground_color": types.StringValue(proto.ForegroundColor),
			"name":             types.StringValue(proto.Name),
		},
	)
}

func ConvertDataValueToTagToLabel_IconProto(ctx context.Context, dataValue attr.Value) (*configv1.TagToLabel_Icon, diag.Diagnostics) {
	pv := TagToLabel_Icon{}
	diags := tfsdk.ValueAs(ctx, dataValue, &pv)
	if diags.HasError() {
		return nil, diags
	}
	proto := &configv1.TagToLabel_Icon{}
	proto.BackgroundColor = pv.BackgroundColor.ValueString()
	proto.ForegroundColor = pv.ForegroundColor.ValueString()
	proto.Name = pv.Name.ValueString()
	return proto, diags
}
