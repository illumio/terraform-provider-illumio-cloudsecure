// Copyright (c) Illumio, Inc.
// SPDX-License-Identifier: MPL-2.0
// Code generated by providergen. DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	resource_schema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	configv1 "github.com/illumio/terraform-provider-illumio-cloudsecure/api/illumio/cloud/config/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ProviderData is the state of the provider, which is passed to resources and data sources at runtime as their ProviderData.
type ProviderData interface {
	// Client returns the CloudSecure Config API client.
	Client() configv1.ConfigServiceClient

	// RequestTimeout returns the maximum duration of each API request.
	RequestTimeout() time.Duration
}

func (p *Provider) Resources(ctx context.Context) []func() resource.Resource {
	resources := p.schema.Resources()
	resp := make([]func() resource.Resource, 0, len(resources))
	for _, r := range resources {
		switch r.TypeName {
		case "aws_account":
			resp = append(resp, func() resource.Resource { return NewAwsAccountResource(r.Schema) })
		case "aws_flow_logs_s3_bucket":
			resp = append(resp, func() resource.Resource { return NewAwsFlowLogsS3BucketResource(r.Schema) })
		case "azure_flow_logs_storage_account":
			resp = append(resp, func() resource.Resource { return NewAzureFlowLogsStorageAccountResource(r.Schema) })
		case "azure_subscription":
			resp = append(resp, func() resource.Resource { return NewAzureSubscriptionResource(r.Schema) })
		case "deployment":
			resp = append(resp, func() resource.Resource { return NewDeploymentResource(r.Schema) })
		case "k8s_cluster_onboarding_credential":
			resp = append(resp, func() resource.Resource { return NewK8SClusterOnboardingCredentialResource(r.Schema) })
		}
	}
	return resp
}

func (p *Provider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		// TODO: Add support for data sources.
	}
}

// AwsAccountResource implements the aws_account resource.
type AwsAccountResource struct {
	// schema is the schema of the aws_account resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &AwsAccountResource{}
var _ resource.ResourceWithImportState = &AwsAccountResource{}

// NewAwsAccountResource returns a new aws_account resource.
func NewAwsAccountResource(schema resource_schema.Schema) resource.Resource {
	return &AwsAccountResource{
		schema: schema,
	}
}

func (r *AwsAccountResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_aws_account"
}

func (r *AwsAccountResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *AwsAccountResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *AwsAccountResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data AwsAccountResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewCreateAwsAccountRequest(&data)

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "aws_account"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateAwsAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create aws_account, got error: %s", err))
		return
	}

	CopyCreateAwsAccountResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "aws_account", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AwsAccountResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data AwsAccountResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewReadAwsAccountRequest(&data)

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "aws_account", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadAwsAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No aws_account found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read aws_account, got error: %s", err))
			return
		}
	}

	CopyReadAwsAccountResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "aws_account", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AwsAccountResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData AwsAccountResourceModel
	var afterData AwsAccountResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewUpdateAwsAccountRequest(&beforeData, &afterData)

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "aws_account", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateAwsAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No aws_account found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update aws_account, got error: %s", err))
			return
		}
	}

	CopyUpdateAwsAccountResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "aws_account", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *AwsAccountResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data AwsAccountResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewDeleteAwsAccountRequest(&data)

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "aws_account", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteAwsAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "aws_account", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete aws_account, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "aws_account", "id": protoReq.Id})
}

func (r *AwsAccountResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// AwsFlowLogsS3BucketResource implements the aws_flow_logs_s3_bucket resource.
type AwsFlowLogsS3BucketResource struct {
	// schema is the schema of the aws_flow_logs_s3_bucket resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &AwsFlowLogsS3BucketResource{}
var _ resource.ResourceWithImportState = &AwsFlowLogsS3BucketResource{}

// NewAwsFlowLogsS3BucketResource returns a new aws_flow_logs_s3_bucket resource.
func NewAwsFlowLogsS3BucketResource(schema resource_schema.Schema) resource.Resource {
	return &AwsFlowLogsS3BucketResource{
		schema: schema,
	}
}

func (r *AwsFlowLogsS3BucketResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_aws_flow_logs_s3_bucket"
}

func (r *AwsFlowLogsS3BucketResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *AwsFlowLogsS3BucketResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *AwsFlowLogsS3BucketResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data AwsFlowLogsS3BucketResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewCreateAwsFlowLogsS3BucketRequest(&data)

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "aws_flow_logs_s3_bucket"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateAwsFlowLogsS3Bucket(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create aws_flow_logs_s3_bucket, got error: %s", err))
		return
	}

	CopyCreateAwsFlowLogsS3BucketResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AwsFlowLogsS3BucketResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data AwsFlowLogsS3BucketResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewReadAwsFlowLogsS3BucketRequest(&data)

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadAwsFlowLogsS3Bucket(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No aws_flow_logs_s3_bucket found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read aws_flow_logs_s3_bucket, got error: %s", err))
			return
		}
	}

	CopyReadAwsFlowLogsS3BucketResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AwsFlowLogsS3BucketResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData AwsFlowLogsS3BucketResourceModel
	var afterData AwsFlowLogsS3BucketResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewUpdateAwsFlowLogsS3BucketRequest(&beforeData, &afterData)

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateAwsFlowLogsS3Bucket(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No aws_flow_logs_s3_bucket found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update aws_flow_logs_s3_bucket, got error: %s", err))
			return
		}
	}

	CopyUpdateAwsFlowLogsS3BucketResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *AwsFlowLogsS3BucketResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data AwsFlowLogsS3BucketResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewDeleteAwsFlowLogsS3BucketRequest(&data)

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteAwsFlowLogsS3Bucket(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete aws_flow_logs_s3_bucket, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "aws_flow_logs_s3_bucket", "id": protoReq.Id})
}

func (r *AwsFlowLogsS3BucketResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// AzureFlowLogsStorageAccountResource implements the azure_flow_logs_storage_account resource.
type AzureFlowLogsStorageAccountResource struct {
	// schema is the schema of the azure_flow_logs_storage_account resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &AzureFlowLogsStorageAccountResource{}
var _ resource.ResourceWithImportState = &AzureFlowLogsStorageAccountResource{}

// NewAzureFlowLogsStorageAccountResource returns a new azure_flow_logs_storage_account resource.
func NewAzureFlowLogsStorageAccountResource(schema resource_schema.Schema) resource.Resource {
	return &AzureFlowLogsStorageAccountResource{
		schema: schema,
	}
}

func (r *AzureFlowLogsStorageAccountResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_azure_flow_logs_storage_account"
}

func (r *AzureFlowLogsStorageAccountResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *AzureFlowLogsStorageAccountResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *AzureFlowLogsStorageAccountResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data AzureFlowLogsStorageAccountResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewCreateAzureFlowLogsStorageAccountRequest(&data)

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "azure_flow_logs_storage_account"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateAzureFlowLogsStorageAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create azure_flow_logs_storage_account, got error: %s", err))
		return
	}

	CopyCreateAzureFlowLogsStorageAccountResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AzureFlowLogsStorageAccountResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data AzureFlowLogsStorageAccountResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewReadAzureFlowLogsStorageAccountRequest(&data)

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadAzureFlowLogsStorageAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No azure_flow_logs_storage_account found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read azure_flow_logs_storage_account, got error: %s", err))
			return
		}
	}

	CopyReadAzureFlowLogsStorageAccountResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AzureFlowLogsStorageAccountResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData AzureFlowLogsStorageAccountResourceModel
	var afterData AzureFlowLogsStorageAccountResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewUpdateAzureFlowLogsStorageAccountRequest(&beforeData, &afterData)

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateAzureFlowLogsStorageAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No azure_flow_logs_storage_account found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update azure_flow_logs_storage_account, got error: %s", err))
			return
		}
	}

	CopyUpdateAzureFlowLogsStorageAccountResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *AzureFlowLogsStorageAccountResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data AzureFlowLogsStorageAccountResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewDeleteAzureFlowLogsStorageAccountRequest(&data)

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteAzureFlowLogsStorageAccount(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete azure_flow_logs_storage_account, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "azure_flow_logs_storage_account", "id": protoReq.Id})
}

func (r *AzureFlowLogsStorageAccountResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// AzureSubscriptionResource implements the azure_subscription resource.
type AzureSubscriptionResource struct {
	// schema is the schema of the azure_subscription resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &AzureSubscriptionResource{}
var _ resource.ResourceWithImportState = &AzureSubscriptionResource{}

// NewAzureSubscriptionResource returns a new azure_subscription resource.
func NewAzureSubscriptionResource(schema resource_schema.Schema) resource.Resource {
	return &AzureSubscriptionResource{
		schema: schema,
	}
}

func (r *AzureSubscriptionResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_azure_subscription"
}

func (r *AzureSubscriptionResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *AzureSubscriptionResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *AzureSubscriptionResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data AzureSubscriptionResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewCreateAzureSubscriptionRequest(&data)

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "azure_subscription"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateAzureSubscription(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create azure_subscription, got error: %s", err))
		return
	}

	CopyCreateAzureSubscriptionResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "azure_subscription", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AzureSubscriptionResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data AzureSubscriptionResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewReadAzureSubscriptionRequest(&data)

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "azure_subscription", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadAzureSubscription(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No azure_subscription found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read azure_subscription, got error: %s", err))
			return
		}
	}

	CopyReadAzureSubscriptionResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "azure_subscription", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AzureSubscriptionResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData AzureSubscriptionResourceModel
	var afterData AzureSubscriptionResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewUpdateAzureSubscriptionRequest(&beforeData, &afterData)

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "azure_subscription", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateAzureSubscription(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No azure_subscription found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update azure_subscription, got error: %s", err))
			return
		}
	}

	CopyUpdateAzureSubscriptionResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "azure_subscription", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *AzureSubscriptionResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data AzureSubscriptionResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewDeleteAzureSubscriptionRequest(&data)

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "azure_subscription", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteAzureSubscription(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "azure_subscription", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete azure_subscription, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "azure_subscription", "id": protoReq.Id})
}

func (r *AzureSubscriptionResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// DeploymentResource implements the deployment resource.
type DeploymentResource struct {
	// schema is the schema of the deployment resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &DeploymentResource{}
var _ resource.ResourceWithImportState = &DeploymentResource{}

// NewDeploymentResource returns a new deployment resource.
func NewDeploymentResource(schema resource_schema.Schema) resource.Resource {
	return &DeploymentResource{
		schema: schema,
	}
}

func (r *DeploymentResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_deployment"
}

func (r *DeploymentResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *DeploymentResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *DeploymentResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data DeploymentResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewCreateDeploymentRequest(&data)

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "deployment"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateDeployment(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create deployment, got error: %s", err))
		return
	}

	CopyCreateDeploymentResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "deployment", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DeploymentResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data DeploymentResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewReadDeploymentRequest(&data)

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "deployment", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadDeployment(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No deployment found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read deployment, got error: %s", err))
			return
		}
	}

	CopyReadDeploymentResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "deployment", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DeploymentResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData DeploymentResourceModel
	var afterData DeploymentResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewUpdateDeploymentRequest(&beforeData, &afterData)

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "deployment", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateDeployment(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No deployment found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update deployment, got error: %s", err))
			return
		}
	}

	CopyUpdateDeploymentResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "deployment", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *DeploymentResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data DeploymentResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewDeleteDeploymentRequest(&data)

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "deployment", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteDeployment(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "deployment", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete deployment, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "deployment", "id": protoReq.Id})
}

func (r *DeploymentResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

// K8SClusterOnboardingCredentialResource implements the k8s_cluster_onboarding_credential resource.
type K8SClusterOnboardingCredentialResource struct {
	// schema is the schema of the k8s_cluster_onboarding_credential resource.
	schema resource_schema.Schema

	// providerData is the provider configuration.
	config ProviderData
}

var _ resource.ResourceWithConfigure = &K8SClusterOnboardingCredentialResource{}
var _ resource.ResourceWithImportState = &K8SClusterOnboardingCredentialResource{}

// NewK8SClusterOnboardingCredentialResource returns a new k8s_cluster_onboarding_credential resource.
func NewK8SClusterOnboardingCredentialResource(schema resource_schema.Schema) resource.Resource {
	return &K8SClusterOnboardingCredentialResource{
		schema: schema,
	}
}

func (r *K8SClusterOnboardingCredentialResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_k8s_cluster_onboarding_credential"
}

func (r *K8SClusterOnboardingCredentialResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = r.schema
}

func (r *K8SClusterOnboardingCredentialResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData, ok := req.ProviderData.(ProviderData)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected ProviderData, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.config = providerData
}

func (r *K8SClusterOnboardingCredentialResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data K8SClusterOnboardingCredentialResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewCreateK8SClusterOnboardingCredentialRequest(&data)

	tflog.Trace(ctx, "creating a resource", map[string]any{"type": "k8s_cluster_onboarding_credential"})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().CreateK8SClusterOnboardingCredential(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to create k8s_cluster_onboarding_credential, got error: %s", err))
		return
	}

	CopyCreateK8SClusterOnboardingCredentialResponse(&data, protoResp)

	tflog.Trace(ctx, "created a resource", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *K8SClusterOnboardingCredentialResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data K8SClusterOnboardingCredentialResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewReadK8SClusterOnboardingCredentialRequest(&data)

	tflog.Trace(ctx, "reading a resource", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().ReadK8SClusterOnboardingCredential(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddWarning("Resource Not Found", fmt.Sprintf("No k8s_cluster_onboarding_credential found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to read k8s_cluster_onboarding_credential, got error: %s", err))
			return
		}
	}

	CopyReadK8SClusterOnboardingCredentialResponse(&data, protoResp)

	tflog.Trace(ctx, "read a resource", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *K8SClusterOnboardingCredentialResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var beforeData K8SClusterOnboardingCredentialResourceModel
	var afterData K8SClusterOnboardingCredentialResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &beforeData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &afterData)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewUpdateK8SClusterOnboardingCredentialRequest(&beforeData, &afterData)

	tflog.Trace(ctx, "updating a resource", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoReq.Id, "update_mask": protoReq.UpdateMask.Paths})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	protoResp, err := r.config.Client().UpdateK8SClusterOnboardingCredential(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			resp.Diagnostics.AddError("Resource Not Found", fmt.Sprintf("No k8s_cluster_onboarding_credential found with id %s", protoReq.Id))
			resp.State.RemoveResource(ctx)
			return
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to update k8s_cluster_onboarding_credential, got error: %s", err))
			return
		}
	}

	CopyUpdateK8SClusterOnboardingCredentialResponse(&afterData, protoResp)

	tflog.Trace(ctx, "updated a resource", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoResp.Id})

	resp.Diagnostics.Append(resp.State.Set(ctx, &afterData)...)
}

func (r *K8SClusterOnboardingCredentialResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data K8SClusterOnboardingCredentialResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	protoReq := NewDeleteK8SClusterOnboardingCredentialRequest(&data)

	tflog.Trace(ctx, "deleting a resource", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoReq.Id})

	rpcCtx, rpcCancel := context.WithTimeout(ctx, r.config.RequestTimeout())
	_, err := r.config.Client().DeleteK8SClusterOnboardingCredential(rpcCtx, protoReq)
	rpcCancel()
	if err != nil {
		switch status.Code(err) {
		case codes.NotFound:
			tflog.Trace(ctx, "resource was already deleted", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoReq.Id})
		default:
			resp.Diagnostics.AddError("Config API Error", fmt.Sprintf("Unable to delete k8s_cluster_onboarding_credential, got error: %s", err))
			return
		}
	}

	tflog.Trace(ctx, "deleted a resource", map[string]any{"type": "k8s_cluster_onboarding_credential", "id": protoReq.Id})
}

func (r *K8SClusterOnboardingCredentialResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO
}

type AwsAccountResourceModel struct {
	Id             types.String `tfsdk:"id"`
	AccountId      types.String `tfsdk:"account_id"`
	Mode           types.String `tfsdk:"mode"`
	Name           types.String `tfsdk:"name"`
	OrganizationId types.String `tfsdk:"organization_id"`
	RoleArn        types.String `tfsdk:"role_arn"`
	RoleExternalId types.String `tfsdk:"role_external_id"`
}

type AwsFlowLogsS3BucketResourceModel struct {
	Id          types.String `tfsdk:"id"`
	AccountId   types.String `tfsdk:"account_id"`
	S3BucketArn types.String `tfsdk:"s3_bucket_arn"`
}

type AzureFlowLogsStorageAccountResourceModel struct {
	Id                       types.String `tfsdk:"id"`
	StorageAccountResourceId types.String `tfsdk:"storage_account_resource_id"`
	SubscriptionId           types.String `tfsdk:"subscription_id"`
}

type AzureSubscriptionResourceModel struct {
	Id             types.String `tfsdk:"id"`
	ClientId       types.String `tfsdk:"client_id"`
	ClientSecret   types.String `tfsdk:"client_secret"`
	Mode           types.String `tfsdk:"mode"`
	Name           types.String `tfsdk:"name"`
	SubscriptionId types.String `tfsdk:"subscription_id"`
	TenantId       types.String `tfsdk:"tenant_id"`
}

type DeploymentResourceModel struct {
	Id          types.String `tfsdk:"id"`
	Accounts    types.List   `tfsdk:"accounts"`
	Description types.String `tfsdk:"description"`
	Envionment  types.String `tfsdk:"envionment"`
	Regions     types.List   `tfsdk:"regions"`
	Subnets     types.List   `tfsdk:"subnets"`
	Tags        types.List   `tfsdk:"tags"`
	Vnets       types.List   `tfsdk:"vnets"`
}

type DeploymentAccountsInstance struct {
	Id    types.String `tfsdk:"id"`
	Cloud types.String `tfsdk:"cloud"`
}

type DeploymentRegionsInstance struct {
	Id    types.String `tfsdk:"id"`
	Cloud types.String `tfsdk:"cloud"`
}

type DeploymentSubnetsInstance struct {
	Cloud types.String `tfsdk:"cloud"`
	Id    types.String `tfsdk:"id"`
}

type DeploymentTagsInstance struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
	Cloud types.String `tfsdk:"cloud"`
}

type DeploymentVnetsInstance struct {
	Cloud types.String `tfsdk:"cloud"`
	Id    types.String `tfsdk:"id"`
}

type K8SClusterOnboardingCredentialResourceModel struct {
	Id            types.String `tfsdk:"id"`
	ClientId      types.String `tfsdk:"client_id"`
	ClientSecret  types.String `tfsdk:"client_secret"`
	CreatedAt     types.String `tfsdk:"created_at"`
	Description   types.String `tfsdk:"description"`
	IllumioRegion types.String `tfsdk:"illumio_region"`
	Name          types.String `tfsdk:"name"`
}

func GetTypeAttrsForDeploymentAccountsInstance() map[string]attr.Type {
	return map[string]attr.Type{
		"id":    types.StringType,
		"cloud": types.StringType,
	}
}

func ConvertDeploymentAccountsInstanceToObjectValueFromProto(proto *configv1.DeploymentAccountsInstance) basetypes.ObjectValue {
	return types.ObjectValueMust(
		GetTypeAttrsForDeploymentAccountsInstance(),
		map[string]attr.Value{
			"id":    types.StringValue(proto.Id),
			"cloud": types.StringValue(proto.Cloud),
		},
	)
}

func ConvertDataValueToDeploymentAccountsInstanceProto(dataValue attr.Value) *configv1.DeploymentAccountsInstance {
	pv := DeploymentAccountsInstance{}
	diags := tfsdk.ValueAs(context.Background(), dataValue, &pv)
	if len(diags) > 0 {
		log.Fatalf("Unexpected diagnostics: %s", diags)
	}
	proto := &configv1.DeploymentAccountsInstance{}
	proto.Id = pv.Id.ValueString()
	proto.Cloud = pv.Cloud.ValueString()
	return proto
}
func ConvertDataValueToListDeploymentAccountsInstanceProto(data attr.Value) []*configv1.DeploymentAccountsInstance {
	var protoValue []*configv1.DeploymentAccountsInstance
	{
		dataElements := data.(types.List).Elements()
		listProtoValues := make([]*configv1.DeploymentAccountsInstance, 0, len(dataElements))
		for _, dataElement := range dataElements {
			var dataValue attr.Value = dataElement
			listProtoValues = append(listProtoValues, ConvertDataValueToDeploymentAccountsInstanceProto(dataValue))
		}
		protoValue = listProtoValues
	}
	return protoValue
}

func GetTypeAttrsForDeploymentRegionsInstance() map[string]attr.Type {
	return map[string]attr.Type{
		"id":    types.StringType,
		"cloud": types.StringType,
	}
}

func ConvertDeploymentRegionsInstanceToObjectValueFromProto(proto *configv1.DeploymentRegionsInstance) basetypes.ObjectValue {
	return types.ObjectValueMust(
		GetTypeAttrsForDeploymentRegionsInstance(),
		map[string]attr.Value{
			"id":    types.StringValue(proto.Id),
			"cloud": types.StringValue(proto.Cloud),
		},
	)
}

func ConvertDataValueToDeploymentRegionsInstanceProto(dataValue attr.Value) *configv1.DeploymentRegionsInstance {
	pv := DeploymentRegionsInstance{}
	diags := tfsdk.ValueAs(context.Background(), dataValue, &pv)
	if len(diags) > 0 {
		log.Fatalf("Unexpected diagnostics: %s", diags)
	}
	proto := &configv1.DeploymentRegionsInstance{}
	proto.Id = pv.Id.ValueString()
	proto.Cloud = pv.Cloud.ValueString()
	return proto
}
func ConvertDataValueToListDeploymentRegionsInstanceProto(data attr.Value) []*configv1.DeploymentRegionsInstance {
	var protoValue []*configv1.DeploymentRegionsInstance
	{
		dataElements := data.(types.List).Elements()
		listProtoValues := make([]*configv1.DeploymentRegionsInstance, 0, len(dataElements))
		for _, dataElement := range dataElements {
			var dataValue attr.Value = dataElement
			listProtoValues = append(listProtoValues, ConvertDataValueToDeploymentRegionsInstanceProto(dataValue))
		}
		protoValue = listProtoValues
	}
	return protoValue
}

func GetTypeAttrsForDeploymentSubnetsInstance() map[string]attr.Type {
	return map[string]attr.Type{
		"cloud": types.StringType,
		"id":    types.StringType,
	}
}

func ConvertDeploymentSubnetsInstanceToObjectValueFromProto(proto *configv1.DeploymentSubnetsInstance) basetypes.ObjectValue {
	return types.ObjectValueMust(
		GetTypeAttrsForDeploymentSubnetsInstance(),
		map[string]attr.Value{
			"cloud": types.StringValue(proto.Cloud),
			"id":    types.StringValue(proto.Id),
		},
	)
}

func ConvertDataValueToDeploymentSubnetsInstanceProto(dataValue attr.Value) *configv1.DeploymentSubnetsInstance {
	pv := DeploymentSubnetsInstance{}
	diags := tfsdk.ValueAs(context.Background(), dataValue, &pv)
	if len(diags) > 0 {
		log.Fatalf("Unexpected diagnostics: %s", diags)
	}
	proto := &configv1.DeploymentSubnetsInstance{}
	proto.Cloud = pv.Cloud.ValueString()
	proto.Id = pv.Id.ValueString()
	return proto
}
func ConvertDataValueToListDeploymentSubnetsInstanceProto(data attr.Value) []*configv1.DeploymentSubnetsInstance {
	var protoValue []*configv1.DeploymentSubnetsInstance
	{
		dataElements := data.(types.List).Elements()
		listProtoValues := make([]*configv1.DeploymentSubnetsInstance, 0, len(dataElements))
		for _, dataElement := range dataElements {
			var dataValue attr.Value = dataElement
			listProtoValues = append(listProtoValues, ConvertDataValueToDeploymentSubnetsInstanceProto(dataValue))
		}
		protoValue = listProtoValues
	}
	return protoValue
}

func GetTypeAttrsForDeploymentTagsInstance() map[string]attr.Type {
	return map[string]attr.Type{
		"key":   types.StringType,
		"value": types.StringType,
		"cloud": types.StringType,
	}
}

func ConvertDeploymentTagsInstanceToObjectValueFromProto(proto *configv1.DeploymentTagsInstance) basetypes.ObjectValue {
	return types.ObjectValueMust(
		GetTypeAttrsForDeploymentTagsInstance(),
		map[string]attr.Value{
			"key":   types.StringValue(proto.Key),
			"value": types.StringValue(proto.Value),
			"cloud": types.StringValue(proto.Cloud),
		},
	)
}

func ConvertDataValueToDeploymentTagsInstanceProto(dataValue attr.Value) *configv1.DeploymentTagsInstance {
	pv := DeploymentTagsInstance{}
	diags := tfsdk.ValueAs(context.Background(), dataValue, &pv)
	if len(diags) > 0 {
		log.Fatalf("Unexpected diagnostics: %s", diags)
	}
	proto := &configv1.DeploymentTagsInstance{}
	proto.Key = pv.Key.ValueString()
	proto.Value = pv.Value.ValueString()
	proto.Cloud = pv.Cloud.ValueString()
	return proto
}
func ConvertDataValueToListDeploymentTagsInstanceProto(data attr.Value) []*configv1.DeploymentTagsInstance {
	var protoValue []*configv1.DeploymentTagsInstance
	{
		dataElements := data.(types.List).Elements()
		listProtoValues := make([]*configv1.DeploymentTagsInstance, 0, len(dataElements))
		for _, dataElement := range dataElements {
			var dataValue attr.Value = dataElement
			listProtoValues = append(listProtoValues, ConvertDataValueToDeploymentTagsInstanceProto(dataValue))
		}
		protoValue = listProtoValues
	}
	return protoValue
}

func GetTypeAttrsForDeploymentVnetsInstance() map[string]attr.Type {
	return map[string]attr.Type{
		"cloud": types.StringType,
		"id":    types.StringType,
	}
}

func ConvertDeploymentVnetsInstanceToObjectValueFromProto(proto *configv1.DeploymentVnetsInstance) basetypes.ObjectValue {
	return types.ObjectValueMust(
		GetTypeAttrsForDeploymentVnetsInstance(),
		map[string]attr.Value{
			"cloud": types.StringValue(proto.Cloud),
			"id":    types.StringValue(proto.Id),
		},
	)
}

func ConvertDataValueToDeploymentVnetsInstanceProto(dataValue attr.Value) *configv1.DeploymentVnetsInstance {
	pv := DeploymentVnetsInstance{}
	diags := tfsdk.ValueAs(context.Background(), dataValue, &pv)
	if len(diags) > 0 {
		log.Fatalf("Unexpected diagnostics: %s", diags)
	}
	proto := &configv1.DeploymentVnetsInstance{}
	proto.Cloud = pv.Cloud.ValueString()
	proto.Id = pv.Id.ValueString()
	return proto
}
func ConvertDataValueToListDeploymentVnetsInstanceProto(data attr.Value) []*configv1.DeploymentVnetsInstance {
	var protoValue []*configv1.DeploymentVnetsInstance
	{
		dataElements := data.(types.List).Elements()
		listProtoValues := make([]*configv1.DeploymentVnetsInstance, 0, len(dataElements))
		for _, dataElement := range dataElements {
			var dataValue attr.Value = dataElement
			listProtoValues = append(listProtoValues, ConvertDataValueToDeploymentVnetsInstanceProto(dataValue))
		}
		protoValue = listProtoValues
	}
	return protoValue
}

func NewCreateAwsAccountRequest(data *AwsAccountResourceModel) *configv1.CreateAwsAccountRequest {
	proto := &configv1.CreateAwsAccountRequest{}
	if !data.AccountId.IsUnknown() && !data.AccountId.IsNull() {
		var dataValue attr.Value = data.AccountId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.AccountId = protoValue
	}
	if !data.Mode.IsUnknown() && !data.Mode.IsNull() {
		var dataValue attr.Value = data.Mode
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Mode = protoValue
	}
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		var dataValue attr.Value = data.Name
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Name = protoValue
	}
	if !data.OrganizationId.IsUnknown() && !data.OrganizationId.IsNull() {
		var dataValue attr.Value = data.OrganizationId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.OrganizationId = &protoValue
	}
	if !data.RoleArn.IsUnknown() && !data.RoleArn.IsNull() {
		var dataValue attr.Value = data.RoleArn
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.RoleArn = protoValue
	}
	if !data.RoleExternalId.IsUnknown() && !data.RoleExternalId.IsNull() {
		var dataValue attr.Value = data.RoleExternalId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.RoleExternalId = protoValue
	}
	return proto
}

func NewReadAwsAccountRequest(data *AwsAccountResourceModel) *configv1.ReadAwsAccountRequest {
	proto := &configv1.ReadAwsAccountRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto
}

func NewDeleteAwsAccountRequest(data *AwsAccountResourceModel) *configv1.DeleteAwsAccountRequest {
	proto := &configv1.DeleteAwsAccountRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto
}

func NewCreateAwsFlowLogsS3BucketRequest(data *AwsFlowLogsS3BucketResourceModel) *configv1.CreateAwsFlowLogsS3BucketRequest {
	proto := &configv1.CreateAwsFlowLogsS3BucketRequest{}
	if !data.AccountId.IsUnknown() && !data.AccountId.IsNull() {
		var dataValue attr.Value = data.AccountId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.AccountId = protoValue
	}
	if !data.S3BucketArn.IsUnknown() && !data.S3BucketArn.IsNull() {
		var dataValue attr.Value = data.S3BucketArn
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.S3BucketArn = protoValue
	}
	return proto
}

func NewReadAwsFlowLogsS3BucketRequest(data *AwsFlowLogsS3BucketResourceModel) *configv1.ReadAwsFlowLogsS3BucketRequest {
	proto := &configv1.ReadAwsFlowLogsS3BucketRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto
}

func NewDeleteAwsFlowLogsS3BucketRequest(data *AwsFlowLogsS3BucketResourceModel) *configv1.DeleteAwsFlowLogsS3BucketRequest {
	proto := &configv1.DeleteAwsFlowLogsS3BucketRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto
}

func NewCreateAzureFlowLogsStorageAccountRequest(data *AzureFlowLogsStorageAccountResourceModel) *configv1.CreateAzureFlowLogsStorageAccountRequest {
	proto := &configv1.CreateAzureFlowLogsStorageAccountRequest{}
	if !data.StorageAccountResourceId.IsUnknown() && !data.StorageAccountResourceId.IsNull() {
		var dataValue attr.Value = data.StorageAccountResourceId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.StorageAccountResourceId = protoValue
	}
	if !data.SubscriptionId.IsUnknown() && !data.SubscriptionId.IsNull() {
		var dataValue attr.Value = data.SubscriptionId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.SubscriptionId = protoValue
	}
	return proto
}

func NewReadAzureFlowLogsStorageAccountRequest(data *AzureFlowLogsStorageAccountResourceModel) *configv1.ReadAzureFlowLogsStorageAccountRequest {
	proto := &configv1.ReadAzureFlowLogsStorageAccountRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto
}

func NewDeleteAzureFlowLogsStorageAccountRequest(data *AzureFlowLogsStorageAccountResourceModel) *configv1.DeleteAzureFlowLogsStorageAccountRequest {
	proto := &configv1.DeleteAzureFlowLogsStorageAccountRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto
}

func NewCreateAzureSubscriptionRequest(data *AzureSubscriptionResourceModel) *configv1.CreateAzureSubscriptionRequest {
	proto := &configv1.CreateAzureSubscriptionRequest{}
	if !data.ClientId.IsUnknown() && !data.ClientId.IsNull() {
		var dataValue attr.Value = data.ClientId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.ClientId = protoValue
	}
	if !data.ClientSecret.IsUnknown() && !data.ClientSecret.IsNull() {
		var dataValue attr.Value = data.ClientSecret
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.ClientSecret = protoValue
	}
	if !data.Mode.IsUnknown() && !data.Mode.IsNull() {
		var dataValue attr.Value = data.Mode
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Mode = protoValue
	}
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		var dataValue attr.Value = data.Name
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Name = protoValue
	}
	if !data.SubscriptionId.IsUnknown() && !data.SubscriptionId.IsNull() {
		var dataValue attr.Value = data.SubscriptionId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.SubscriptionId = protoValue
	}
	if !data.TenantId.IsUnknown() && !data.TenantId.IsNull() {
		var dataValue attr.Value = data.TenantId
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.TenantId = protoValue
	}
	return proto
}

func NewReadAzureSubscriptionRequest(data *AzureSubscriptionResourceModel) *configv1.ReadAzureSubscriptionRequest {
	proto := &configv1.ReadAzureSubscriptionRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto
}

func NewDeleteAzureSubscriptionRequest(data *AzureSubscriptionResourceModel) *configv1.DeleteAzureSubscriptionRequest {
	proto := &configv1.DeleteAzureSubscriptionRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto
}

func NewCreateDeploymentRequest(data *DeploymentResourceModel) *configv1.CreateDeploymentRequest {
	proto := &configv1.CreateDeploymentRequest{}
	if !data.Accounts.IsUnknown() && !data.Accounts.IsNull() {
		var dataValue attr.Value = data.Accounts
		var protoValue []*configv1.DeploymentAccountsInstance
		protoValue = ConvertDataValueToListDeploymentAccountsInstanceProto(dataValue)
		proto.Accounts = protoValue
	}
	if !data.Description.IsUnknown() && !data.Description.IsNull() {
		var dataValue attr.Value = data.Description
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Description = &protoValue
	}
	if !data.Envionment.IsUnknown() && !data.Envionment.IsNull() {
		var dataValue attr.Value = data.Envionment
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Envionment = protoValue
	}
	if !data.Regions.IsUnknown() && !data.Regions.IsNull() {
		var dataValue attr.Value = data.Regions
		var protoValue []*configv1.DeploymentRegionsInstance
		protoValue = ConvertDataValueToListDeploymentRegionsInstanceProto(dataValue)
		proto.Regions = protoValue
	}
	if !data.Subnets.IsUnknown() && !data.Subnets.IsNull() {
		var dataValue attr.Value = data.Subnets
		var protoValue []*configv1.DeploymentSubnetsInstance
		protoValue = ConvertDataValueToListDeploymentSubnetsInstanceProto(dataValue)
		proto.Subnets = protoValue
	}
	if !data.Tags.IsUnknown() && !data.Tags.IsNull() {
		var dataValue attr.Value = data.Tags
		var protoValue []*configv1.DeploymentTagsInstance
		protoValue = ConvertDataValueToListDeploymentTagsInstanceProto(dataValue)
		proto.Tags = protoValue
	}
	if !data.Vnets.IsUnknown() && !data.Vnets.IsNull() {
		var dataValue attr.Value = data.Vnets
		var protoValue []*configv1.DeploymentVnetsInstance
		protoValue = ConvertDataValueToListDeploymentVnetsInstanceProto(dataValue)
		proto.Vnets = protoValue
	}
	return proto
}

func NewReadDeploymentRequest(data *DeploymentResourceModel) *configv1.ReadDeploymentRequest {
	proto := &configv1.ReadDeploymentRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto
}

func NewDeleteDeploymentRequest(data *DeploymentResourceModel) *configv1.DeleteDeploymentRequest {
	proto := &configv1.DeleteDeploymentRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto
}

func NewCreateK8SClusterOnboardingCredentialRequest(data *K8SClusterOnboardingCredentialResourceModel) *configv1.CreateK8SClusterOnboardingCredentialRequest {
	proto := &configv1.CreateK8SClusterOnboardingCredentialRequest{}
	if !data.Description.IsUnknown() && !data.Description.IsNull() {
		var dataValue attr.Value = data.Description
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Description = &protoValue
	}
	if !data.IllumioRegion.IsUnknown() && !data.IllumioRegion.IsNull() {
		var dataValue attr.Value = data.IllumioRegion
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.IllumioRegion = protoValue
	}
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		var dataValue attr.Value = data.Name
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Name = protoValue
	}
	return proto
}

func NewReadK8SClusterOnboardingCredentialRequest(data *K8SClusterOnboardingCredentialResourceModel) *configv1.ReadK8SClusterOnboardingCredentialRequest {
	proto := &configv1.ReadK8SClusterOnboardingCredentialRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto
}

func NewDeleteK8SClusterOnboardingCredentialRequest(data *K8SClusterOnboardingCredentialResourceModel) *configv1.DeleteK8SClusterOnboardingCredentialRequest {
	proto := &configv1.DeleteK8SClusterOnboardingCredentialRequest{}
	if !data.Id.IsUnknown() && !data.Id.IsNull() {
		var dataValue attr.Value = data.Id
		var protoValue string
		protoValue = dataValue.(types.String).ValueString()
		proto.Id = protoValue
	}
	return proto
}

func NewUpdateAwsAccountRequest(beforeData, afterData *AwsAccountResourceModel) *configv1.UpdateAwsAccountRequest {
	proto := &configv1.UpdateAwsAccountRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	if !afterData.Name.Equal(beforeData.Name) {
		proto.UpdateMask.Append(proto, "name")
		if !afterData.Name.IsUnknown() && !afterData.Name.IsNull() {
			var dataValue attr.Value = afterData.Name
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Name = protoValue

		}
	}
	return proto
}

func NewUpdateAwsFlowLogsS3BucketRequest(beforeData, afterData *AwsFlowLogsS3BucketResourceModel) *configv1.UpdateAwsFlowLogsS3BucketRequest {
	proto := &configv1.UpdateAwsFlowLogsS3BucketRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	return proto
}

func NewUpdateAzureFlowLogsStorageAccountRequest(beforeData, afterData *AzureFlowLogsStorageAccountResourceModel) *configv1.UpdateAzureFlowLogsStorageAccountRequest {
	proto := &configv1.UpdateAzureFlowLogsStorageAccountRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	return proto
}

func NewUpdateAzureSubscriptionRequest(beforeData, afterData *AzureSubscriptionResourceModel) *configv1.UpdateAzureSubscriptionRequest {
	proto := &configv1.UpdateAzureSubscriptionRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	if !afterData.Name.Equal(beforeData.Name) {
		proto.UpdateMask.Append(proto, "name")
		if !afterData.Name.IsUnknown() && !afterData.Name.IsNull() {
			var dataValue attr.Value = afterData.Name
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Name = protoValue

		}
	}
	return proto
}

func NewUpdateDeploymentRequest(beforeData, afterData *DeploymentResourceModel) *configv1.UpdateDeploymentRequest {
	proto := &configv1.UpdateDeploymentRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	if !afterData.Accounts.Equal(beforeData.Accounts) {
		proto.UpdateMask.Append(proto, "accounts")
		if !afterData.Accounts.IsUnknown() && !afterData.Accounts.IsNull() {
			var dataValue attr.Value = afterData.Accounts
			proto.Accounts = ConvertDataValueToListDeploymentAccountsInstanceProto(dataValue)

		}
	}
	if !afterData.Description.Equal(beforeData.Description) {
		proto.UpdateMask.Append(proto, "description")
		if !afterData.Description.IsUnknown() && !afterData.Description.IsNull() {
			var dataValue attr.Value = afterData.Description
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Description = &protoValue

		}
	}
	if !afterData.Regions.Equal(beforeData.Regions) {
		proto.UpdateMask.Append(proto, "regions")
		if !afterData.Regions.IsUnknown() && !afterData.Regions.IsNull() {
			var dataValue attr.Value = afterData.Regions
			proto.Regions = ConvertDataValueToListDeploymentRegionsInstanceProto(dataValue)

		}
	}
	if !afterData.Subnets.Equal(beforeData.Subnets) {
		proto.UpdateMask.Append(proto, "subnets")
		if !afterData.Subnets.IsUnknown() && !afterData.Subnets.IsNull() {
			var dataValue attr.Value = afterData.Subnets
			proto.Subnets = ConvertDataValueToListDeploymentSubnetsInstanceProto(dataValue)

		}
	}
	if !afterData.Tags.Equal(beforeData.Tags) {
		proto.UpdateMask.Append(proto, "tags")
		if !afterData.Tags.IsUnknown() && !afterData.Tags.IsNull() {
			var dataValue attr.Value = afterData.Tags
			proto.Tags = ConvertDataValueToListDeploymentTagsInstanceProto(dataValue)

		}
	}
	if !afterData.Vnets.Equal(beforeData.Vnets) {
		proto.UpdateMask.Append(proto, "vnets")
		if !afterData.Vnets.IsUnknown() && !afterData.Vnets.IsNull() {
			var dataValue attr.Value = afterData.Vnets
			proto.Vnets = ConvertDataValueToListDeploymentVnetsInstanceProto(dataValue)

		}
	}
	return proto
}

func NewUpdateK8SClusterOnboardingCredentialRequest(beforeData, afterData *K8SClusterOnboardingCredentialResourceModel) *configv1.UpdateK8SClusterOnboardingCredentialRequest {
	proto := &configv1.UpdateK8SClusterOnboardingCredentialRequest{}
	proto.UpdateMask, _ = fieldmaskpb.New(proto)
	proto.Id = beforeData.Id.ValueString()
	if !afterData.Description.Equal(beforeData.Description) {
		proto.UpdateMask.Append(proto, "description")
		if !afterData.Description.IsUnknown() && !afterData.Description.IsNull() {
			var dataValue attr.Value = afterData.Description
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Description = &protoValue

		}
	}
	if !afterData.Name.Equal(beforeData.Name) {
		proto.UpdateMask.Append(proto, "name")
		if !afterData.Name.IsUnknown() && !afterData.Name.IsNull() {
			var dataValue attr.Value = afterData.Name
			var protoValue string
			protoValue = dataValue.(types.String).ValueString()
			proto.Name = protoValue

		}
	}
	return proto
}
func CopyCreateAwsAccountResponse(dst *AwsAccountResourceModel, src *configv1.CreateAwsAccountResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.AccountId = types.StringValue(src.AccountId)
	dst.Mode = types.StringValue(src.Mode)
	dst.Name = types.StringValue(src.Name)
	dst.OrganizationId = types.StringPointerValue(src.OrganizationId)
	dst.RoleArn = types.StringValue(src.RoleArn)
}
func CopyReadAwsAccountResponse(dst *AwsAccountResourceModel, src *configv1.ReadAwsAccountResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.AccountId = types.StringValue(src.AccountId)
	dst.Mode = types.StringValue(src.Mode)
	dst.Name = types.StringValue(src.Name)
	dst.OrganizationId = types.StringPointerValue(src.OrganizationId)
	dst.RoleArn = types.StringValue(src.RoleArn)
}
func CopyUpdateAwsAccountResponse(dst *AwsAccountResourceModel, src *configv1.UpdateAwsAccountResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.AccountId = types.StringValue(src.AccountId)
	dst.Mode = types.StringValue(src.Mode)
	dst.Name = types.StringValue(src.Name)
	dst.OrganizationId = types.StringPointerValue(src.OrganizationId)
	dst.RoleArn = types.StringValue(src.RoleArn)
}
func CopyCreateAwsFlowLogsS3BucketResponse(dst *AwsFlowLogsS3BucketResourceModel, src *configv1.CreateAwsFlowLogsS3BucketResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.AccountId = types.StringValue(src.AccountId)
	dst.S3BucketArn = types.StringValue(src.S3BucketArn)
}
func CopyReadAwsFlowLogsS3BucketResponse(dst *AwsFlowLogsS3BucketResourceModel, src *configv1.ReadAwsFlowLogsS3BucketResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.AccountId = types.StringValue(src.AccountId)
	dst.S3BucketArn = types.StringValue(src.S3BucketArn)
}
func CopyUpdateAwsFlowLogsS3BucketResponse(dst *AwsFlowLogsS3BucketResourceModel, src *configv1.UpdateAwsFlowLogsS3BucketResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.AccountId = types.StringValue(src.AccountId)
	dst.S3BucketArn = types.StringValue(src.S3BucketArn)
}
func CopyCreateAzureFlowLogsStorageAccountResponse(dst *AzureFlowLogsStorageAccountResourceModel, src *configv1.CreateAzureFlowLogsStorageAccountResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.StorageAccountResourceId = types.StringValue(src.StorageAccountResourceId)
	dst.SubscriptionId = types.StringValue(src.SubscriptionId)
}
func CopyReadAzureFlowLogsStorageAccountResponse(dst *AzureFlowLogsStorageAccountResourceModel, src *configv1.ReadAzureFlowLogsStorageAccountResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.StorageAccountResourceId = types.StringValue(src.StorageAccountResourceId)
	dst.SubscriptionId = types.StringValue(src.SubscriptionId)
}
func CopyUpdateAzureFlowLogsStorageAccountResponse(dst *AzureFlowLogsStorageAccountResourceModel, src *configv1.UpdateAzureFlowLogsStorageAccountResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.StorageAccountResourceId = types.StringValue(src.StorageAccountResourceId)
	dst.SubscriptionId = types.StringValue(src.SubscriptionId)
}
func CopyCreateAzureSubscriptionResponse(dst *AzureSubscriptionResourceModel, src *configv1.CreateAzureSubscriptionResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.ClientId = types.StringValue(src.ClientId)
	dst.Mode = types.StringValue(src.Mode)
	dst.Name = types.StringValue(src.Name)
	dst.SubscriptionId = types.StringValue(src.SubscriptionId)
	dst.TenantId = types.StringValue(src.TenantId)
}
func CopyReadAzureSubscriptionResponse(dst *AzureSubscriptionResourceModel, src *configv1.ReadAzureSubscriptionResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.ClientId = types.StringValue(src.ClientId)
	dst.Mode = types.StringValue(src.Mode)
	dst.Name = types.StringValue(src.Name)
	dst.SubscriptionId = types.StringValue(src.SubscriptionId)
	dst.TenantId = types.StringValue(src.TenantId)
}
func CopyUpdateAzureSubscriptionResponse(dst *AzureSubscriptionResourceModel, src *configv1.UpdateAzureSubscriptionResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.ClientId = types.StringValue(src.ClientId)
	dst.Mode = types.StringValue(src.Mode)
	dst.Name = types.StringValue(src.Name)
	dst.SubscriptionId = types.StringValue(src.SubscriptionId)
	dst.TenantId = types.StringValue(src.TenantId)
}
func CopyCreateDeploymentResponse(dst *DeploymentResourceModel, src *configv1.CreateDeploymentResponse) {
	dst.Id = types.StringValue(src.Id)
	{
		vals := make([]attr.Value, 0, len(src.Accounts))
		for _, val := range src.Accounts {
			vals = append(vals, ConvertDeploymentAccountsInstanceToObjectValueFromProto(val))
		}
		dst.Accounts = types.ListValueMust(types.ObjectType{
			AttrTypes: GetTypeAttrsForDeploymentAccountsInstance(),
		}, vals)
	}
	dst.Description = types.StringPointerValue(src.Description)
	{
		vals := make([]attr.Value, 0, len(src.Regions))
		for _, val := range src.Regions {
			vals = append(vals, ConvertDeploymentRegionsInstanceToObjectValueFromProto(val))
		}
		dst.Regions = types.ListValueMust(types.ObjectType{
			AttrTypes: GetTypeAttrsForDeploymentRegionsInstance(),
		}, vals)
	}
	{
		vals := make([]attr.Value, 0, len(src.Subnets))
		for _, val := range src.Subnets {
			vals = append(vals, ConvertDeploymentSubnetsInstanceToObjectValueFromProto(val))
		}
		dst.Subnets = types.ListValueMust(types.ObjectType{
			AttrTypes: GetTypeAttrsForDeploymentSubnetsInstance(),
		}, vals)
	}
	{
		vals := make([]attr.Value, 0, len(src.Tags))
		for _, val := range src.Tags {
			vals = append(vals, ConvertDeploymentTagsInstanceToObjectValueFromProto(val))
		}
		dst.Tags = types.ListValueMust(types.ObjectType{
			AttrTypes: GetTypeAttrsForDeploymentTagsInstance(),
		}, vals)
	}
	{
		vals := make([]attr.Value, 0, len(src.Vnets))
		for _, val := range src.Vnets {
			vals = append(vals, ConvertDeploymentVnetsInstanceToObjectValueFromProto(val))
		}
		dst.Vnets = types.ListValueMust(types.ObjectType{
			AttrTypes: GetTypeAttrsForDeploymentVnetsInstance(),
		}, vals)
	}
}
func CopyReadDeploymentResponse(dst *DeploymentResourceModel, src *configv1.ReadDeploymentResponse) {
	dst.Id = types.StringValue(src.Id)
	{
		vals := make([]attr.Value, 0, len(src.Accounts))
		for _, val := range src.Accounts {
			vals = append(vals, ConvertDeploymentAccountsInstanceToObjectValueFromProto(val))
		}
		dst.Accounts = types.ListValueMust(types.ObjectType{
			AttrTypes: GetTypeAttrsForDeploymentAccountsInstance(),
		}, vals)
	}
	dst.Description = types.StringPointerValue(src.Description)
	{
		vals := make([]attr.Value, 0, len(src.Regions))
		for _, val := range src.Regions {
			vals = append(vals, ConvertDeploymentRegionsInstanceToObjectValueFromProto(val))
		}
		dst.Regions = types.ListValueMust(types.ObjectType{
			AttrTypes: GetTypeAttrsForDeploymentRegionsInstance(),
		}, vals)
	}
	{
		vals := make([]attr.Value, 0, len(src.Subnets))
		for _, val := range src.Subnets {
			vals = append(vals, ConvertDeploymentSubnetsInstanceToObjectValueFromProto(val))
		}
		dst.Subnets = types.ListValueMust(types.ObjectType{
			AttrTypes: GetTypeAttrsForDeploymentSubnetsInstance(),
		}, vals)
	}
	{
		vals := make([]attr.Value, 0, len(src.Tags))
		for _, val := range src.Tags {
			vals = append(vals, ConvertDeploymentTagsInstanceToObjectValueFromProto(val))
		}
		dst.Tags = types.ListValueMust(types.ObjectType{
			AttrTypes: GetTypeAttrsForDeploymentTagsInstance(),
		}, vals)
	}
	{
		vals := make([]attr.Value, 0, len(src.Vnets))
		for _, val := range src.Vnets {
			vals = append(vals, ConvertDeploymentVnetsInstanceToObjectValueFromProto(val))
		}
		dst.Vnets = types.ListValueMust(types.ObjectType{
			AttrTypes: GetTypeAttrsForDeploymentVnetsInstance(),
		}, vals)
	}
}
func CopyUpdateDeploymentResponse(dst *DeploymentResourceModel, src *configv1.UpdateDeploymentResponse) {
	dst.Id = types.StringValue(src.Id)
	{
		vals := make([]attr.Value, 0, len(src.Accounts))
		for _, val := range src.Accounts {
			vals = append(vals, ConvertDeploymentAccountsInstanceToObjectValueFromProto(val))
		}
		dst.Accounts = types.ListValueMust(types.ObjectType{
			AttrTypes: GetTypeAttrsForDeploymentAccountsInstance(),
		}, vals)
	}
	dst.Description = types.StringPointerValue(src.Description)
	{
		vals := make([]attr.Value, 0, len(src.Regions))
		for _, val := range src.Regions {
			vals = append(vals, ConvertDeploymentRegionsInstanceToObjectValueFromProto(val))
		}
		dst.Regions = types.ListValueMust(types.ObjectType{
			AttrTypes: GetTypeAttrsForDeploymentRegionsInstance(),
		}, vals)
	}
	{
		vals := make([]attr.Value, 0, len(src.Subnets))
		for _, val := range src.Subnets {
			vals = append(vals, ConvertDeploymentSubnetsInstanceToObjectValueFromProto(val))
		}
		dst.Subnets = types.ListValueMust(types.ObjectType{
			AttrTypes: GetTypeAttrsForDeploymentSubnetsInstance(),
		}, vals)
	}
	{
		vals := make([]attr.Value, 0, len(src.Tags))
		for _, val := range src.Tags {
			vals = append(vals, ConvertDeploymentTagsInstanceToObjectValueFromProto(val))
		}
		dst.Tags = types.ListValueMust(types.ObjectType{
			AttrTypes: GetTypeAttrsForDeploymentTagsInstance(),
		}, vals)
	}
	{
		vals := make([]attr.Value, 0, len(src.Vnets))
		for _, val := range src.Vnets {
			vals = append(vals, ConvertDeploymentVnetsInstanceToObjectValueFromProto(val))
		}
		dst.Vnets = types.ListValueMust(types.ObjectType{
			AttrTypes: GetTypeAttrsForDeploymentVnetsInstance(),
		}, vals)
	}
}
func CopyCreateK8SClusterOnboardingCredentialResponse(dst *K8SClusterOnboardingCredentialResourceModel, src *configv1.CreateK8SClusterOnboardingCredentialResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.ClientId = types.StringValue(src.ClientId)
	dst.ClientSecret = types.StringValue(src.ClientSecret)
	dst.CreatedAt = types.StringValue(src.CreatedAt)
	dst.Description = types.StringPointerValue(src.Description)
	dst.IllumioRegion = types.StringValue(src.IllumioRegion)
	dst.Name = types.StringValue(src.Name)
}
func CopyReadK8SClusterOnboardingCredentialResponse(dst *K8SClusterOnboardingCredentialResourceModel, src *configv1.ReadK8SClusterOnboardingCredentialResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.ClientId = types.StringValue(src.ClientId)
	dst.CreatedAt = types.StringValue(src.CreatedAt)
	dst.Description = types.StringPointerValue(src.Description)
	dst.IllumioRegion = types.StringValue(src.IllumioRegion)
	dst.Name = types.StringValue(src.Name)
}
func CopyUpdateK8SClusterOnboardingCredentialResponse(dst *K8SClusterOnboardingCredentialResourceModel, src *configv1.UpdateK8SClusterOnboardingCredentialResponse) {
	dst.Id = types.StringValue(src.Id)
	dst.ClientId = types.StringValue(src.ClientId)
	dst.CreatedAt = types.StringValue(src.CreatedAt)
	dst.Description = types.StringPointerValue(src.Description)
	dst.IllumioRegion = types.StringValue(src.IllumioRegion)
	dst.Name = types.StringValue(src.Name)
}
