// Copyright (c) Illumio, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: illumio/cloud/config/v1/config.proto

package configv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateApplicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeploymentId  string                 `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateApplicationRequest) Reset() {
	*x = CreateApplicationRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationRequest) ProtoMessage() {}

func (x *CreateApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationRequest.ProtoReflect.Descriptor instead.
func (*CreateApplicationRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *CreateApplicationRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *CreateApplicationRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateApplicationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateApplicationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeploymentId  string                 `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateApplicationResponse) Reset() {
	*x = CreateApplicationResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationResponse) ProtoMessage() {}

func (x *CreateApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationResponse.ProtoReflect.Descriptor instead.
func (*CreateApplicationResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *CreateApplicationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateApplicationResponse) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *CreateApplicationResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateApplicationResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ReadApplicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadApplicationRequest) Reset() {
	*x = ReadApplicationRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationRequest) ProtoMessage() {}

func (x *ReadApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationRequest.ProtoReflect.Descriptor instead.
func (*ReadApplicationRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *ReadApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadApplicationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeploymentId  string                 `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadApplicationResponse) Reset() {
	*x = ReadApplicationResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationResponse) ProtoMessage() {}

func (x *ReadApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationResponse.ProtoReflect.Descriptor instead.
func (*ReadApplicationResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{3}
}

func (x *ReadApplicationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadApplicationResponse) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *ReadApplicationResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ReadApplicationResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateApplicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,5,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateApplicationRequest) Reset() {
	*x = UpdateApplicationRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationRequest) ProtoMessage() {}

func (x *UpdateApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationRequest.ProtoReflect.Descriptor instead.
func (*UpdateApplicationRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateApplicationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateApplicationRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateApplicationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeploymentId  string                 `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateApplicationResponse) Reset() {
	*x = UpdateApplicationResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationResponse) ProtoMessage() {}

func (x *UpdateApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationResponse.ProtoReflect.Descriptor instead.
func (*UpdateApplicationResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateApplicationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationResponse) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *UpdateApplicationResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateApplicationResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteApplicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteApplicationRequest) Reset() {
	*x = DeleteApplicationRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationRequest) ProtoMessage() {}

func (x *DeleteApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationRequest.ProtoReflect.Descriptor instead.
func (*DeleteApplicationRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateApplicationAwsResourcesRequest struct {
	state                                  protoimpl.MessageState `protogen:"open.v1"`
	AccountId                              string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ApplicationId                          string                 `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	Arns                                   []string               `protobuf:"bytes,4,rep,name=arns,proto3" json:"arns,omitempty"`
	AwsCustomerGatewayIds                  []string               `protobuf:"bytes,5,rep,name=aws_customer_gateway_ids,json=awsCustomerGatewayIds,proto3" json:"aws_customer_gateway_ids,omitempty"`
	AwsDxConnectionIds                     []string               `protobuf:"bytes,6,rep,name=aws_dx_connection_ids,json=awsDxConnectionIds,proto3" json:"aws_dx_connection_ids,omitempty"`
	AwsDxVirtualInterfaceIds               []string               `protobuf:"bytes,7,rep,name=aws_dx_virtual_interface_ids,json=awsDxVirtualInterfaceIds,proto3" json:"aws_dx_virtual_interface_ids,omitempty"`
	AwsEbsVolumeIds                        []string               `protobuf:"bytes,8,rep,name=aws_ebs_volume_ids,json=awsEbsVolumeIds,proto3" json:"aws_ebs_volume_ids,omitempty"`
	AwsEc2InstanceConnectEndpointIds       []string               `protobuf:"bytes,9,rep,name=aws_ec2_instance_connect_endpoint_ids,json=awsEc2InstanceConnectEndpointIds,proto3" json:"aws_ec2_instance_connect_endpoint_ids,omitempty"`
	AwsEc2TransitGatewayAttachmentIds      []string               `protobuf:"bytes,10,rep,name=aws_ec2_transit_gateway_attachment_ids,json=awsEc2TransitGatewayAttachmentIds,proto3" json:"aws_ec2_transit_gateway_attachment_ids,omitempty"`
	AwsEc2TransitGatewayIds                []string               `protobuf:"bytes,11,rep,name=aws_ec2_transit_gateway_ids,json=awsEc2TransitGatewayIds,proto3" json:"aws_ec2_transit_gateway_ids,omitempty"`
	AwsEc2TransitGatewayMulticastDomainIds []string               `protobuf:"bytes,12,rep,name=aws_ec2_transit_gateway_multicast_domain_ids,json=awsEc2TransitGatewayMulticastDomainIds,proto3" json:"aws_ec2_transit_gateway_multicast_domain_ids,omitempty"`
	AwsEc2TransitGatewayRouteTableIds      []string               `protobuf:"bytes,13,rep,name=aws_ec2_transit_gateway_route_table_ids,json=awsEc2TransitGatewayRouteTableIds,proto3" json:"aws_ec2_transit_gateway_route_table_ids,omitempty"`
	AwsEgressOnlyInternetGatewayIds        []string               `protobuf:"bytes,14,rep,name=aws_egress_only_internet_gateway_ids,json=awsEgressOnlyInternetGatewayIds,proto3" json:"aws_egress_only_internet_gateway_ids,omitempty"`
	AwsEipIds                              []string               `protobuf:"bytes,15,rep,name=aws_eip_ids,json=awsEipIds,proto3" json:"aws_eip_ids,omitempty"`
	AwsFlowLogIds                          []string               `protobuf:"bytes,16,rep,name=aws_flow_log_ids,json=awsFlowLogIds,proto3" json:"aws_flow_log_ids,omitempty"`
	AwsInstancesIds                        []string               `protobuf:"bytes,17,rep,name=aws_instances_ids,json=awsInstancesIds,proto3" json:"aws_instances_ids,omitempty"`
	AwsInternetGatewayIds                  []string               `protobuf:"bytes,18,rep,name=aws_internet_gateway_ids,json=awsInternetGatewayIds,proto3" json:"aws_internet_gateway_ids,omitempty"`
	AwsNatGatewayIds                       []string               `protobuf:"bytes,19,rep,name=aws_nat_gateway_ids,json=awsNatGatewayIds,proto3" json:"aws_nat_gateway_ids,omitempty"`
	AwsNetworkAclIds                       []string               `protobuf:"bytes,20,rep,name=aws_network_acl_ids,json=awsNetworkAclIds,proto3" json:"aws_network_acl_ids,omitempty"`
	AwsNetworkInterfaceIds                 []string               `protobuf:"bytes,21,rep,name=aws_network_interface_ids,json=awsNetworkInterfaceIds,proto3" json:"aws_network_interface_ids,omitempty"`
	AwsRdsClusterIds                       []string               `protobuf:"bytes,22,rep,name=aws_rds_cluster_ids,json=awsRdsClusterIds,proto3" json:"aws_rds_cluster_ids,omitempty"`
	AwsRouteTableIds                       []string               `protobuf:"bytes,23,rep,name=aws_route_table_ids,json=awsRouteTableIds,proto3" json:"aws_route_table_ids,omitempty"`
	AwsSecurityGroupIds                    []string               `protobuf:"bytes,24,rep,name=aws_security_group_ids,json=awsSecurityGroupIds,proto3" json:"aws_security_group_ids,omitempty"`
	AwsSecurityGroupRuleIds                []string               `protobuf:"bytes,25,rep,name=aws_security_group_rule_ids,json=awsSecurityGroupRuleIds,proto3" json:"aws_security_group_rule_ids,omitempty"`
	AwsSpotFleetRequestIds                 []string               `protobuf:"bytes,26,rep,name=aws_spot_fleet_request_ids,json=awsSpotFleetRequestIds,proto3" json:"aws_spot_fleet_request_ids,omitempty"`
	AwsSpotInstanceRequestIds              []string               `protobuf:"bytes,27,rep,name=aws_spot_instance_request_ids,json=awsSpotInstanceRequestIds,proto3" json:"aws_spot_instance_request_ids,omitempty"`
	AwsSubnetIds                           []string               `protobuf:"bytes,28,rep,name=aws_subnet_ids,json=awsSubnetIds,proto3" json:"aws_subnet_ids,omitempty"`
	AwsVpcEndpointIds                      []string               `protobuf:"bytes,29,rep,name=aws_vpc_endpoint_ids,json=awsVpcEndpointIds,proto3" json:"aws_vpc_endpoint_ids,omitempty"`
	AwsVpcEndpointServiceIds               []string               `protobuf:"bytes,30,rep,name=aws_vpc_endpoint_service_ids,json=awsVpcEndpointServiceIds,proto3" json:"aws_vpc_endpoint_service_ids,omitempty"`
	AwsVpcIds                              []string               `protobuf:"bytes,31,rep,name=aws_vpc_ids,json=awsVpcIds,proto3" json:"aws_vpc_ids,omitempty"`
	AwsVpcPeeringConnectionIds             []string               `protobuf:"bytes,32,rep,name=aws_vpc_peering_connection_ids,json=awsVpcPeeringConnectionIds,proto3" json:"aws_vpc_peering_connection_ids,omitempty"`
	AwsVpnConnectionIds                    []string               `protobuf:"bytes,33,rep,name=aws_vpn_connection_ids,json=awsVpnConnectionIds,proto3" json:"aws_vpn_connection_ids,omitempty"`
	AwsVpnGatewayIds                       []string               `protobuf:"bytes,34,rep,name=aws_vpn_gateway_ids,json=awsVpnGatewayIds,proto3" json:"aws_vpn_gateway_ids,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *CreateApplicationAwsResourcesRequest) Reset() {
	*x = CreateApplicationAwsResourcesRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateApplicationAwsResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationAwsResourcesRequest) ProtoMessage() {}

func (x *CreateApplicationAwsResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationAwsResourcesRequest.ProtoReflect.Descriptor instead.
func (*CreateApplicationAwsResourcesRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{7}
}

func (x *CreateApplicationAwsResourcesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateApplicationAwsResourcesRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *CreateApplicationAwsResourcesRequest) GetArns() []string {
	if x != nil {
		return x.Arns
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsCustomerGatewayIds() []string {
	if x != nil {
		return x.AwsCustomerGatewayIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsDxConnectionIds() []string {
	if x != nil {
		return x.AwsDxConnectionIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsDxVirtualInterfaceIds() []string {
	if x != nil {
		return x.AwsDxVirtualInterfaceIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsEbsVolumeIds() []string {
	if x != nil {
		return x.AwsEbsVolumeIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsEc2InstanceConnectEndpointIds() []string {
	if x != nil {
		return x.AwsEc2InstanceConnectEndpointIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsEc2TransitGatewayAttachmentIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayAttachmentIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsEc2TransitGatewayIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsEc2TransitGatewayMulticastDomainIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayMulticastDomainIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsEc2TransitGatewayRouteTableIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayRouteTableIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsEgressOnlyInternetGatewayIds() []string {
	if x != nil {
		return x.AwsEgressOnlyInternetGatewayIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsEipIds() []string {
	if x != nil {
		return x.AwsEipIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsFlowLogIds() []string {
	if x != nil {
		return x.AwsFlowLogIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsInstancesIds() []string {
	if x != nil {
		return x.AwsInstancesIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsInternetGatewayIds() []string {
	if x != nil {
		return x.AwsInternetGatewayIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsNatGatewayIds() []string {
	if x != nil {
		return x.AwsNatGatewayIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsNetworkAclIds() []string {
	if x != nil {
		return x.AwsNetworkAclIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsNetworkInterfaceIds() []string {
	if x != nil {
		return x.AwsNetworkInterfaceIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsRdsClusterIds() []string {
	if x != nil {
		return x.AwsRdsClusterIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsRouteTableIds() []string {
	if x != nil {
		return x.AwsRouteTableIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsSecurityGroupIds() []string {
	if x != nil {
		return x.AwsSecurityGroupIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsSecurityGroupRuleIds() []string {
	if x != nil {
		return x.AwsSecurityGroupRuleIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsSpotFleetRequestIds() []string {
	if x != nil {
		return x.AwsSpotFleetRequestIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsSpotInstanceRequestIds() []string {
	if x != nil {
		return x.AwsSpotInstanceRequestIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsSubnetIds() []string {
	if x != nil {
		return x.AwsSubnetIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsVpcEndpointIds() []string {
	if x != nil {
		return x.AwsVpcEndpointIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsVpcEndpointServiceIds() []string {
	if x != nil {
		return x.AwsVpcEndpointServiceIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsVpcIds() []string {
	if x != nil {
		return x.AwsVpcIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsVpcPeeringConnectionIds() []string {
	if x != nil {
		return x.AwsVpcPeeringConnectionIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsVpnConnectionIds() []string {
	if x != nil {
		return x.AwsVpnConnectionIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesRequest) GetAwsVpnGatewayIds() []string {
	if x != nil {
		return x.AwsVpnGatewayIds
	}
	return nil
}

type CreateApplicationAwsResourcesResponse struct {
	state                                  protoimpl.MessageState `protogen:"open.v1"`
	Id                                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId                              string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ApplicationId                          string                 `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationResourceIds                 []string               `protobuf:"bytes,36,rep,name=application_resource_ids,json=applicationResourceIds,proto3" json:"application_resource_ids,omitempty"`
	Arns                                   []string               `protobuf:"bytes,4,rep,name=arns,proto3" json:"arns,omitempty"`
	AwsCustomerGatewayIds                  []string               `protobuf:"bytes,5,rep,name=aws_customer_gateway_ids,json=awsCustomerGatewayIds,proto3" json:"aws_customer_gateway_ids,omitempty"`
	AwsDxConnectionIds                     []string               `protobuf:"bytes,6,rep,name=aws_dx_connection_ids,json=awsDxConnectionIds,proto3" json:"aws_dx_connection_ids,omitempty"`
	AwsDxVirtualInterfaceIds               []string               `protobuf:"bytes,7,rep,name=aws_dx_virtual_interface_ids,json=awsDxVirtualInterfaceIds,proto3" json:"aws_dx_virtual_interface_ids,omitempty"`
	AwsEbsVolumeIds                        []string               `protobuf:"bytes,8,rep,name=aws_ebs_volume_ids,json=awsEbsVolumeIds,proto3" json:"aws_ebs_volume_ids,omitempty"`
	AwsEc2InstanceConnectEndpointIds       []string               `protobuf:"bytes,9,rep,name=aws_ec2_instance_connect_endpoint_ids,json=awsEc2InstanceConnectEndpointIds,proto3" json:"aws_ec2_instance_connect_endpoint_ids,omitempty"`
	AwsEc2TransitGatewayAttachmentIds      []string               `protobuf:"bytes,10,rep,name=aws_ec2_transit_gateway_attachment_ids,json=awsEc2TransitGatewayAttachmentIds,proto3" json:"aws_ec2_transit_gateway_attachment_ids,omitempty"`
	AwsEc2TransitGatewayIds                []string               `protobuf:"bytes,11,rep,name=aws_ec2_transit_gateway_ids,json=awsEc2TransitGatewayIds,proto3" json:"aws_ec2_transit_gateway_ids,omitempty"`
	AwsEc2TransitGatewayMulticastDomainIds []string               `protobuf:"bytes,12,rep,name=aws_ec2_transit_gateway_multicast_domain_ids,json=awsEc2TransitGatewayMulticastDomainIds,proto3" json:"aws_ec2_transit_gateway_multicast_domain_ids,omitempty"`
	AwsEc2TransitGatewayRouteTableIds      []string               `protobuf:"bytes,13,rep,name=aws_ec2_transit_gateway_route_table_ids,json=awsEc2TransitGatewayRouteTableIds,proto3" json:"aws_ec2_transit_gateway_route_table_ids,omitempty"`
	AwsEgressOnlyInternetGatewayIds        []string               `protobuf:"bytes,14,rep,name=aws_egress_only_internet_gateway_ids,json=awsEgressOnlyInternetGatewayIds,proto3" json:"aws_egress_only_internet_gateway_ids,omitempty"`
	AwsEipIds                              []string               `protobuf:"bytes,15,rep,name=aws_eip_ids,json=awsEipIds,proto3" json:"aws_eip_ids,omitempty"`
	AwsFlowLogIds                          []string               `protobuf:"bytes,16,rep,name=aws_flow_log_ids,json=awsFlowLogIds,proto3" json:"aws_flow_log_ids,omitempty"`
	AwsInstancesIds                        []string               `protobuf:"bytes,17,rep,name=aws_instances_ids,json=awsInstancesIds,proto3" json:"aws_instances_ids,omitempty"`
	AwsInternetGatewayIds                  []string               `protobuf:"bytes,18,rep,name=aws_internet_gateway_ids,json=awsInternetGatewayIds,proto3" json:"aws_internet_gateway_ids,omitempty"`
	AwsNatGatewayIds                       []string               `protobuf:"bytes,19,rep,name=aws_nat_gateway_ids,json=awsNatGatewayIds,proto3" json:"aws_nat_gateway_ids,omitempty"`
	AwsNetworkAclIds                       []string               `protobuf:"bytes,20,rep,name=aws_network_acl_ids,json=awsNetworkAclIds,proto3" json:"aws_network_acl_ids,omitempty"`
	AwsNetworkInterfaceIds                 []string               `protobuf:"bytes,21,rep,name=aws_network_interface_ids,json=awsNetworkInterfaceIds,proto3" json:"aws_network_interface_ids,omitempty"`
	AwsRdsClusterIds                       []string               `protobuf:"bytes,22,rep,name=aws_rds_cluster_ids,json=awsRdsClusterIds,proto3" json:"aws_rds_cluster_ids,omitempty"`
	AwsRouteTableIds                       []string               `protobuf:"bytes,23,rep,name=aws_route_table_ids,json=awsRouteTableIds,proto3" json:"aws_route_table_ids,omitempty"`
	AwsSecurityGroupIds                    []string               `protobuf:"bytes,24,rep,name=aws_security_group_ids,json=awsSecurityGroupIds,proto3" json:"aws_security_group_ids,omitempty"`
	AwsSecurityGroupRuleIds                []string               `protobuf:"bytes,25,rep,name=aws_security_group_rule_ids,json=awsSecurityGroupRuleIds,proto3" json:"aws_security_group_rule_ids,omitempty"`
	AwsSpotFleetRequestIds                 []string               `protobuf:"bytes,26,rep,name=aws_spot_fleet_request_ids,json=awsSpotFleetRequestIds,proto3" json:"aws_spot_fleet_request_ids,omitempty"`
	AwsSpotInstanceRequestIds              []string               `protobuf:"bytes,27,rep,name=aws_spot_instance_request_ids,json=awsSpotInstanceRequestIds,proto3" json:"aws_spot_instance_request_ids,omitempty"`
	AwsSubnetIds                           []string               `protobuf:"bytes,28,rep,name=aws_subnet_ids,json=awsSubnetIds,proto3" json:"aws_subnet_ids,omitempty"`
	AwsVpcEndpointIds                      []string               `protobuf:"bytes,29,rep,name=aws_vpc_endpoint_ids,json=awsVpcEndpointIds,proto3" json:"aws_vpc_endpoint_ids,omitempty"`
	AwsVpcEndpointServiceIds               []string               `protobuf:"bytes,30,rep,name=aws_vpc_endpoint_service_ids,json=awsVpcEndpointServiceIds,proto3" json:"aws_vpc_endpoint_service_ids,omitempty"`
	AwsVpcIds                              []string               `protobuf:"bytes,31,rep,name=aws_vpc_ids,json=awsVpcIds,proto3" json:"aws_vpc_ids,omitempty"`
	AwsVpcPeeringConnectionIds             []string               `protobuf:"bytes,32,rep,name=aws_vpc_peering_connection_ids,json=awsVpcPeeringConnectionIds,proto3" json:"aws_vpc_peering_connection_ids,omitempty"`
	AwsVpnConnectionIds                    []string               `protobuf:"bytes,33,rep,name=aws_vpn_connection_ids,json=awsVpnConnectionIds,proto3" json:"aws_vpn_connection_ids,omitempty"`
	AwsVpnGatewayIds                       []string               `protobuf:"bytes,34,rep,name=aws_vpn_gateway_ids,json=awsVpnGatewayIds,proto3" json:"aws_vpn_gateway_ids,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *CreateApplicationAwsResourcesResponse) Reset() {
	*x = CreateApplicationAwsResourcesResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateApplicationAwsResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationAwsResourcesResponse) ProtoMessage() {}

func (x *CreateApplicationAwsResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationAwsResourcesResponse.ProtoReflect.Descriptor instead.
func (*CreateApplicationAwsResourcesResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{8}
}

func (x *CreateApplicationAwsResourcesResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateApplicationAwsResourcesResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateApplicationAwsResourcesResponse) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *CreateApplicationAwsResourcesResponse) GetApplicationResourceIds() []string {
	if x != nil {
		return x.ApplicationResourceIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetArns() []string {
	if x != nil {
		return x.Arns
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsCustomerGatewayIds() []string {
	if x != nil {
		return x.AwsCustomerGatewayIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsDxConnectionIds() []string {
	if x != nil {
		return x.AwsDxConnectionIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsDxVirtualInterfaceIds() []string {
	if x != nil {
		return x.AwsDxVirtualInterfaceIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsEbsVolumeIds() []string {
	if x != nil {
		return x.AwsEbsVolumeIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsEc2InstanceConnectEndpointIds() []string {
	if x != nil {
		return x.AwsEc2InstanceConnectEndpointIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsEc2TransitGatewayAttachmentIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayAttachmentIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsEc2TransitGatewayIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsEc2TransitGatewayMulticastDomainIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayMulticastDomainIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsEc2TransitGatewayRouteTableIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayRouteTableIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsEgressOnlyInternetGatewayIds() []string {
	if x != nil {
		return x.AwsEgressOnlyInternetGatewayIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsEipIds() []string {
	if x != nil {
		return x.AwsEipIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsFlowLogIds() []string {
	if x != nil {
		return x.AwsFlowLogIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsInstancesIds() []string {
	if x != nil {
		return x.AwsInstancesIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsInternetGatewayIds() []string {
	if x != nil {
		return x.AwsInternetGatewayIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsNatGatewayIds() []string {
	if x != nil {
		return x.AwsNatGatewayIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsNetworkAclIds() []string {
	if x != nil {
		return x.AwsNetworkAclIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsNetworkInterfaceIds() []string {
	if x != nil {
		return x.AwsNetworkInterfaceIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsRdsClusterIds() []string {
	if x != nil {
		return x.AwsRdsClusterIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsRouteTableIds() []string {
	if x != nil {
		return x.AwsRouteTableIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsSecurityGroupIds() []string {
	if x != nil {
		return x.AwsSecurityGroupIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsSecurityGroupRuleIds() []string {
	if x != nil {
		return x.AwsSecurityGroupRuleIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsSpotFleetRequestIds() []string {
	if x != nil {
		return x.AwsSpotFleetRequestIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsSpotInstanceRequestIds() []string {
	if x != nil {
		return x.AwsSpotInstanceRequestIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsSubnetIds() []string {
	if x != nil {
		return x.AwsSubnetIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsVpcEndpointIds() []string {
	if x != nil {
		return x.AwsVpcEndpointIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsVpcEndpointServiceIds() []string {
	if x != nil {
		return x.AwsVpcEndpointServiceIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsVpcIds() []string {
	if x != nil {
		return x.AwsVpcIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsVpcPeeringConnectionIds() []string {
	if x != nil {
		return x.AwsVpcPeeringConnectionIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsVpnConnectionIds() []string {
	if x != nil {
		return x.AwsVpnConnectionIds
	}
	return nil
}

func (x *CreateApplicationAwsResourcesResponse) GetAwsVpnGatewayIds() []string {
	if x != nil {
		return x.AwsVpnGatewayIds
	}
	return nil
}

type ReadApplicationAwsResourcesRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId              string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ApplicationId          string                 `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationResourceIds []string               `protobuf:"bytes,36,rep,name=application_resource_ids,json=applicationResourceIds,proto3" json:"application_resource_ids,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ReadApplicationAwsResourcesRequest) Reset() {
	*x = ReadApplicationAwsResourcesRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadApplicationAwsResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationAwsResourcesRequest) ProtoMessage() {}

func (x *ReadApplicationAwsResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationAwsResourcesRequest.ProtoReflect.Descriptor instead.
func (*ReadApplicationAwsResourcesRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{9}
}

func (x *ReadApplicationAwsResourcesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadApplicationAwsResourcesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReadApplicationAwsResourcesRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ReadApplicationAwsResourcesRequest) GetApplicationResourceIds() []string {
	if x != nil {
		return x.ApplicationResourceIds
	}
	return nil
}

type ReadApplicationAwsResourcesResponse struct {
	state                                  protoimpl.MessageState `protogen:"open.v1"`
	Id                                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId                              string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ApplicationId                          string                 `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationResourceIds                 []string               `protobuf:"bytes,36,rep,name=application_resource_ids,json=applicationResourceIds,proto3" json:"application_resource_ids,omitempty"`
	Arns                                   []string               `protobuf:"bytes,4,rep,name=arns,proto3" json:"arns,omitempty"`
	AwsCustomerGatewayIds                  []string               `protobuf:"bytes,5,rep,name=aws_customer_gateway_ids,json=awsCustomerGatewayIds,proto3" json:"aws_customer_gateway_ids,omitempty"`
	AwsDxConnectionIds                     []string               `protobuf:"bytes,6,rep,name=aws_dx_connection_ids,json=awsDxConnectionIds,proto3" json:"aws_dx_connection_ids,omitempty"`
	AwsDxVirtualInterfaceIds               []string               `protobuf:"bytes,7,rep,name=aws_dx_virtual_interface_ids,json=awsDxVirtualInterfaceIds,proto3" json:"aws_dx_virtual_interface_ids,omitempty"`
	AwsEbsVolumeIds                        []string               `protobuf:"bytes,8,rep,name=aws_ebs_volume_ids,json=awsEbsVolumeIds,proto3" json:"aws_ebs_volume_ids,omitempty"`
	AwsEc2InstanceConnectEndpointIds       []string               `protobuf:"bytes,9,rep,name=aws_ec2_instance_connect_endpoint_ids,json=awsEc2InstanceConnectEndpointIds,proto3" json:"aws_ec2_instance_connect_endpoint_ids,omitempty"`
	AwsEc2TransitGatewayAttachmentIds      []string               `protobuf:"bytes,10,rep,name=aws_ec2_transit_gateway_attachment_ids,json=awsEc2TransitGatewayAttachmentIds,proto3" json:"aws_ec2_transit_gateway_attachment_ids,omitempty"`
	AwsEc2TransitGatewayIds                []string               `protobuf:"bytes,11,rep,name=aws_ec2_transit_gateway_ids,json=awsEc2TransitGatewayIds,proto3" json:"aws_ec2_transit_gateway_ids,omitempty"`
	AwsEc2TransitGatewayMulticastDomainIds []string               `protobuf:"bytes,12,rep,name=aws_ec2_transit_gateway_multicast_domain_ids,json=awsEc2TransitGatewayMulticastDomainIds,proto3" json:"aws_ec2_transit_gateway_multicast_domain_ids,omitempty"`
	AwsEc2TransitGatewayRouteTableIds      []string               `protobuf:"bytes,13,rep,name=aws_ec2_transit_gateway_route_table_ids,json=awsEc2TransitGatewayRouteTableIds,proto3" json:"aws_ec2_transit_gateway_route_table_ids,omitempty"`
	AwsEgressOnlyInternetGatewayIds        []string               `protobuf:"bytes,14,rep,name=aws_egress_only_internet_gateway_ids,json=awsEgressOnlyInternetGatewayIds,proto3" json:"aws_egress_only_internet_gateway_ids,omitempty"`
	AwsEipIds                              []string               `protobuf:"bytes,15,rep,name=aws_eip_ids,json=awsEipIds,proto3" json:"aws_eip_ids,omitempty"`
	AwsFlowLogIds                          []string               `protobuf:"bytes,16,rep,name=aws_flow_log_ids,json=awsFlowLogIds,proto3" json:"aws_flow_log_ids,omitempty"`
	AwsInstancesIds                        []string               `protobuf:"bytes,17,rep,name=aws_instances_ids,json=awsInstancesIds,proto3" json:"aws_instances_ids,omitempty"`
	AwsInternetGatewayIds                  []string               `protobuf:"bytes,18,rep,name=aws_internet_gateway_ids,json=awsInternetGatewayIds,proto3" json:"aws_internet_gateway_ids,omitempty"`
	AwsNatGatewayIds                       []string               `protobuf:"bytes,19,rep,name=aws_nat_gateway_ids,json=awsNatGatewayIds,proto3" json:"aws_nat_gateway_ids,omitempty"`
	AwsNetworkAclIds                       []string               `protobuf:"bytes,20,rep,name=aws_network_acl_ids,json=awsNetworkAclIds,proto3" json:"aws_network_acl_ids,omitempty"`
	AwsNetworkInterfaceIds                 []string               `protobuf:"bytes,21,rep,name=aws_network_interface_ids,json=awsNetworkInterfaceIds,proto3" json:"aws_network_interface_ids,omitempty"`
	AwsRdsClusterIds                       []string               `protobuf:"bytes,22,rep,name=aws_rds_cluster_ids,json=awsRdsClusterIds,proto3" json:"aws_rds_cluster_ids,omitempty"`
	AwsRouteTableIds                       []string               `protobuf:"bytes,23,rep,name=aws_route_table_ids,json=awsRouteTableIds,proto3" json:"aws_route_table_ids,omitempty"`
	AwsSecurityGroupIds                    []string               `protobuf:"bytes,24,rep,name=aws_security_group_ids,json=awsSecurityGroupIds,proto3" json:"aws_security_group_ids,omitempty"`
	AwsSecurityGroupRuleIds                []string               `protobuf:"bytes,25,rep,name=aws_security_group_rule_ids,json=awsSecurityGroupRuleIds,proto3" json:"aws_security_group_rule_ids,omitempty"`
	AwsSpotFleetRequestIds                 []string               `protobuf:"bytes,26,rep,name=aws_spot_fleet_request_ids,json=awsSpotFleetRequestIds,proto3" json:"aws_spot_fleet_request_ids,omitempty"`
	AwsSpotInstanceRequestIds              []string               `protobuf:"bytes,27,rep,name=aws_spot_instance_request_ids,json=awsSpotInstanceRequestIds,proto3" json:"aws_spot_instance_request_ids,omitempty"`
	AwsSubnetIds                           []string               `protobuf:"bytes,28,rep,name=aws_subnet_ids,json=awsSubnetIds,proto3" json:"aws_subnet_ids,omitempty"`
	AwsVpcEndpointIds                      []string               `protobuf:"bytes,29,rep,name=aws_vpc_endpoint_ids,json=awsVpcEndpointIds,proto3" json:"aws_vpc_endpoint_ids,omitempty"`
	AwsVpcEndpointServiceIds               []string               `protobuf:"bytes,30,rep,name=aws_vpc_endpoint_service_ids,json=awsVpcEndpointServiceIds,proto3" json:"aws_vpc_endpoint_service_ids,omitempty"`
	AwsVpcIds                              []string               `protobuf:"bytes,31,rep,name=aws_vpc_ids,json=awsVpcIds,proto3" json:"aws_vpc_ids,omitempty"`
	AwsVpcPeeringConnectionIds             []string               `protobuf:"bytes,32,rep,name=aws_vpc_peering_connection_ids,json=awsVpcPeeringConnectionIds,proto3" json:"aws_vpc_peering_connection_ids,omitempty"`
	AwsVpnConnectionIds                    []string               `protobuf:"bytes,33,rep,name=aws_vpn_connection_ids,json=awsVpnConnectionIds,proto3" json:"aws_vpn_connection_ids,omitempty"`
	AwsVpnGatewayIds                       []string               `protobuf:"bytes,34,rep,name=aws_vpn_gateway_ids,json=awsVpnGatewayIds,proto3" json:"aws_vpn_gateway_ids,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *ReadApplicationAwsResourcesResponse) Reset() {
	*x = ReadApplicationAwsResourcesResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadApplicationAwsResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationAwsResourcesResponse) ProtoMessage() {}

func (x *ReadApplicationAwsResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationAwsResourcesResponse.ProtoReflect.Descriptor instead.
func (*ReadApplicationAwsResourcesResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{10}
}

func (x *ReadApplicationAwsResourcesResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadApplicationAwsResourcesResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReadApplicationAwsResourcesResponse) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ReadApplicationAwsResourcesResponse) GetApplicationResourceIds() []string {
	if x != nil {
		return x.ApplicationResourceIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetArns() []string {
	if x != nil {
		return x.Arns
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsCustomerGatewayIds() []string {
	if x != nil {
		return x.AwsCustomerGatewayIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsDxConnectionIds() []string {
	if x != nil {
		return x.AwsDxConnectionIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsDxVirtualInterfaceIds() []string {
	if x != nil {
		return x.AwsDxVirtualInterfaceIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsEbsVolumeIds() []string {
	if x != nil {
		return x.AwsEbsVolumeIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsEc2InstanceConnectEndpointIds() []string {
	if x != nil {
		return x.AwsEc2InstanceConnectEndpointIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsEc2TransitGatewayAttachmentIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayAttachmentIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsEc2TransitGatewayIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsEc2TransitGatewayMulticastDomainIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayMulticastDomainIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsEc2TransitGatewayRouteTableIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayRouteTableIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsEgressOnlyInternetGatewayIds() []string {
	if x != nil {
		return x.AwsEgressOnlyInternetGatewayIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsEipIds() []string {
	if x != nil {
		return x.AwsEipIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsFlowLogIds() []string {
	if x != nil {
		return x.AwsFlowLogIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsInstancesIds() []string {
	if x != nil {
		return x.AwsInstancesIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsInternetGatewayIds() []string {
	if x != nil {
		return x.AwsInternetGatewayIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsNatGatewayIds() []string {
	if x != nil {
		return x.AwsNatGatewayIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsNetworkAclIds() []string {
	if x != nil {
		return x.AwsNetworkAclIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsNetworkInterfaceIds() []string {
	if x != nil {
		return x.AwsNetworkInterfaceIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsRdsClusterIds() []string {
	if x != nil {
		return x.AwsRdsClusterIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsRouteTableIds() []string {
	if x != nil {
		return x.AwsRouteTableIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsSecurityGroupIds() []string {
	if x != nil {
		return x.AwsSecurityGroupIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsSecurityGroupRuleIds() []string {
	if x != nil {
		return x.AwsSecurityGroupRuleIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsSpotFleetRequestIds() []string {
	if x != nil {
		return x.AwsSpotFleetRequestIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsSpotInstanceRequestIds() []string {
	if x != nil {
		return x.AwsSpotInstanceRequestIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsSubnetIds() []string {
	if x != nil {
		return x.AwsSubnetIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsVpcEndpointIds() []string {
	if x != nil {
		return x.AwsVpcEndpointIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsVpcEndpointServiceIds() []string {
	if x != nil {
		return x.AwsVpcEndpointServiceIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsVpcIds() []string {
	if x != nil {
		return x.AwsVpcIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsVpcPeeringConnectionIds() []string {
	if x != nil {
		return x.AwsVpcPeeringConnectionIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsVpnConnectionIds() []string {
	if x != nil {
		return x.AwsVpnConnectionIds
	}
	return nil
}

func (x *ReadApplicationAwsResourcesResponse) GetAwsVpnGatewayIds() []string {
	if x != nil {
		return x.AwsVpnGatewayIds
	}
	return nil
}

type UpdateApplicationAwsResourcesRequest struct {
	state                                  protoimpl.MessageState `protogen:"open.v1"`
	Id                                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId                              string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ApplicationId                          string                 `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationResourceIds                 []string               `protobuf:"bytes,36,rep,name=application_resource_ids,json=applicationResourceIds,proto3" json:"application_resource_ids,omitempty"`
	Arns                                   []string               `protobuf:"bytes,4,rep,name=arns,proto3" json:"arns,omitempty"`
	AwsCustomerGatewayIds                  []string               `protobuf:"bytes,5,rep,name=aws_customer_gateway_ids,json=awsCustomerGatewayIds,proto3" json:"aws_customer_gateway_ids,omitempty"`
	AwsDxConnectionIds                     []string               `protobuf:"bytes,6,rep,name=aws_dx_connection_ids,json=awsDxConnectionIds,proto3" json:"aws_dx_connection_ids,omitempty"`
	AwsDxVirtualInterfaceIds               []string               `protobuf:"bytes,7,rep,name=aws_dx_virtual_interface_ids,json=awsDxVirtualInterfaceIds,proto3" json:"aws_dx_virtual_interface_ids,omitempty"`
	AwsEbsVolumeIds                        []string               `protobuf:"bytes,8,rep,name=aws_ebs_volume_ids,json=awsEbsVolumeIds,proto3" json:"aws_ebs_volume_ids,omitempty"`
	AwsEc2InstanceConnectEndpointIds       []string               `protobuf:"bytes,9,rep,name=aws_ec2_instance_connect_endpoint_ids,json=awsEc2InstanceConnectEndpointIds,proto3" json:"aws_ec2_instance_connect_endpoint_ids,omitempty"`
	AwsEc2TransitGatewayAttachmentIds      []string               `protobuf:"bytes,10,rep,name=aws_ec2_transit_gateway_attachment_ids,json=awsEc2TransitGatewayAttachmentIds,proto3" json:"aws_ec2_transit_gateway_attachment_ids,omitempty"`
	AwsEc2TransitGatewayIds                []string               `protobuf:"bytes,11,rep,name=aws_ec2_transit_gateway_ids,json=awsEc2TransitGatewayIds,proto3" json:"aws_ec2_transit_gateway_ids,omitempty"`
	AwsEc2TransitGatewayMulticastDomainIds []string               `protobuf:"bytes,12,rep,name=aws_ec2_transit_gateway_multicast_domain_ids,json=awsEc2TransitGatewayMulticastDomainIds,proto3" json:"aws_ec2_transit_gateway_multicast_domain_ids,omitempty"`
	AwsEc2TransitGatewayRouteTableIds      []string               `protobuf:"bytes,13,rep,name=aws_ec2_transit_gateway_route_table_ids,json=awsEc2TransitGatewayRouteTableIds,proto3" json:"aws_ec2_transit_gateway_route_table_ids,omitempty"`
	AwsEgressOnlyInternetGatewayIds        []string               `protobuf:"bytes,14,rep,name=aws_egress_only_internet_gateway_ids,json=awsEgressOnlyInternetGatewayIds,proto3" json:"aws_egress_only_internet_gateway_ids,omitempty"`
	AwsEipIds                              []string               `protobuf:"bytes,15,rep,name=aws_eip_ids,json=awsEipIds,proto3" json:"aws_eip_ids,omitempty"`
	AwsFlowLogIds                          []string               `protobuf:"bytes,16,rep,name=aws_flow_log_ids,json=awsFlowLogIds,proto3" json:"aws_flow_log_ids,omitempty"`
	AwsInstancesIds                        []string               `protobuf:"bytes,17,rep,name=aws_instances_ids,json=awsInstancesIds,proto3" json:"aws_instances_ids,omitempty"`
	AwsInternetGatewayIds                  []string               `protobuf:"bytes,18,rep,name=aws_internet_gateway_ids,json=awsInternetGatewayIds,proto3" json:"aws_internet_gateway_ids,omitempty"`
	AwsNatGatewayIds                       []string               `protobuf:"bytes,19,rep,name=aws_nat_gateway_ids,json=awsNatGatewayIds,proto3" json:"aws_nat_gateway_ids,omitempty"`
	AwsNetworkAclIds                       []string               `protobuf:"bytes,20,rep,name=aws_network_acl_ids,json=awsNetworkAclIds,proto3" json:"aws_network_acl_ids,omitempty"`
	AwsNetworkInterfaceIds                 []string               `protobuf:"bytes,21,rep,name=aws_network_interface_ids,json=awsNetworkInterfaceIds,proto3" json:"aws_network_interface_ids,omitempty"`
	AwsRdsClusterIds                       []string               `protobuf:"bytes,22,rep,name=aws_rds_cluster_ids,json=awsRdsClusterIds,proto3" json:"aws_rds_cluster_ids,omitempty"`
	AwsRouteTableIds                       []string               `protobuf:"bytes,23,rep,name=aws_route_table_ids,json=awsRouteTableIds,proto3" json:"aws_route_table_ids,omitempty"`
	AwsSecurityGroupIds                    []string               `protobuf:"bytes,24,rep,name=aws_security_group_ids,json=awsSecurityGroupIds,proto3" json:"aws_security_group_ids,omitempty"`
	AwsSecurityGroupRuleIds                []string               `protobuf:"bytes,25,rep,name=aws_security_group_rule_ids,json=awsSecurityGroupRuleIds,proto3" json:"aws_security_group_rule_ids,omitempty"`
	AwsSpotFleetRequestIds                 []string               `protobuf:"bytes,26,rep,name=aws_spot_fleet_request_ids,json=awsSpotFleetRequestIds,proto3" json:"aws_spot_fleet_request_ids,omitempty"`
	AwsSpotInstanceRequestIds              []string               `protobuf:"bytes,27,rep,name=aws_spot_instance_request_ids,json=awsSpotInstanceRequestIds,proto3" json:"aws_spot_instance_request_ids,omitempty"`
	AwsSubnetIds                           []string               `protobuf:"bytes,28,rep,name=aws_subnet_ids,json=awsSubnetIds,proto3" json:"aws_subnet_ids,omitempty"`
	AwsVpcEndpointIds                      []string               `protobuf:"bytes,29,rep,name=aws_vpc_endpoint_ids,json=awsVpcEndpointIds,proto3" json:"aws_vpc_endpoint_ids,omitempty"`
	AwsVpcEndpointServiceIds               []string               `protobuf:"bytes,30,rep,name=aws_vpc_endpoint_service_ids,json=awsVpcEndpointServiceIds,proto3" json:"aws_vpc_endpoint_service_ids,omitempty"`
	AwsVpcIds                              []string               `protobuf:"bytes,31,rep,name=aws_vpc_ids,json=awsVpcIds,proto3" json:"aws_vpc_ids,omitempty"`
	AwsVpcPeeringConnectionIds             []string               `protobuf:"bytes,32,rep,name=aws_vpc_peering_connection_ids,json=awsVpcPeeringConnectionIds,proto3" json:"aws_vpc_peering_connection_ids,omitempty"`
	AwsVpnConnectionIds                    []string               `protobuf:"bytes,33,rep,name=aws_vpn_connection_ids,json=awsVpnConnectionIds,proto3" json:"aws_vpn_connection_ids,omitempty"`
	AwsVpnGatewayIds                       []string               `protobuf:"bytes,34,rep,name=aws_vpn_gateway_ids,json=awsVpnGatewayIds,proto3" json:"aws_vpn_gateway_ids,omitempty"`
	UpdateMask                             *fieldmaskpb.FieldMask `protobuf:"bytes,35,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *UpdateApplicationAwsResourcesRequest) Reset() {
	*x = UpdateApplicationAwsResourcesRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationAwsResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationAwsResourcesRequest) ProtoMessage() {}

func (x *UpdateApplicationAwsResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationAwsResourcesRequest.ProtoReflect.Descriptor instead.
func (*UpdateApplicationAwsResourcesRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateApplicationAwsResourcesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationAwsResourcesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UpdateApplicationAwsResourcesRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *UpdateApplicationAwsResourcesRequest) GetApplicationResourceIds() []string {
	if x != nil {
		return x.ApplicationResourceIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetArns() []string {
	if x != nil {
		return x.Arns
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsCustomerGatewayIds() []string {
	if x != nil {
		return x.AwsCustomerGatewayIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsDxConnectionIds() []string {
	if x != nil {
		return x.AwsDxConnectionIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsDxVirtualInterfaceIds() []string {
	if x != nil {
		return x.AwsDxVirtualInterfaceIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsEbsVolumeIds() []string {
	if x != nil {
		return x.AwsEbsVolumeIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsEc2InstanceConnectEndpointIds() []string {
	if x != nil {
		return x.AwsEc2InstanceConnectEndpointIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsEc2TransitGatewayAttachmentIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayAttachmentIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsEc2TransitGatewayIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsEc2TransitGatewayMulticastDomainIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayMulticastDomainIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsEc2TransitGatewayRouteTableIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayRouteTableIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsEgressOnlyInternetGatewayIds() []string {
	if x != nil {
		return x.AwsEgressOnlyInternetGatewayIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsEipIds() []string {
	if x != nil {
		return x.AwsEipIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsFlowLogIds() []string {
	if x != nil {
		return x.AwsFlowLogIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsInstancesIds() []string {
	if x != nil {
		return x.AwsInstancesIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsInternetGatewayIds() []string {
	if x != nil {
		return x.AwsInternetGatewayIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsNatGatewayIds() []string {
	if x != nil {
		return x.AwsNatGatewayIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsNetworkAclIds() []string {
	if x != nil {
		return x.AwsNetworkAclIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsNetworkInterfaceIds() []string {
	if x != nil {
		return x.AwsNetworkInterfaceIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsRdsClusterIds() []string {
	if x != nil {
		return x.AwsRdsClusterIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsRouteTableIds() []string {
	if x != nil {
		return x.AwsRouteTableIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsSecurityGroupIds() []string {
	if x != nil {
		return x.AwsSecurityGroupIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsSecurityGroupRuleIds() []string {
	if x != nil {
		return x.AwsSecurityGroupRuleIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsSpotFleetRequestIds() []string {
	if x != nil {
		return x.AwsSpotFleetRequestIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsSpotInstanceRequestIds() []string {
	if x != nil {
		return x.AwsSpotInstanceRequestIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsSubnetIds() []string {
	if x != nil {
		return x.AwsSubnetIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsVpcEndpointIds() []string {
	if x != nil {
		return x.AwsVpcEndpointIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsVpcEndpointServiceIds() []string {
	if x != nil {
		return x.AwsVpcEndpointServiceIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsVpcIds() []string {
	if x != nil {
		return x.AwsVpcIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsVpcPeeringConnectionIds() []string {
	if x != nil {
		return x.AwsVpcPeeringConnectionIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsVpnConnectionIds() []string {
	if x != nil {
		return x.AwsVpnConnectionIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetAwsVpnGatewayIds() []string {
	if x != nil {
		return x.AwsVpnGatewayIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateApplicationAwsResourcesResponse struct {
	state                                  protoimpl.MessageState `protogen:"open.v1"`
	Id                                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId                              string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ApplicationId                          string                 `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationResourceIds                 []string               `protobuf:"bytes,36,rep,name=application_resource_ids,json=applicationResourceIds,proto3" json:"application_resource_ids,omitempty"`
	Arns                                   []string               `protobuf:"bytes,4,rep,name=arns,proto3" json:"arns,omitempty"`
	AwsCustomerGatewayIds                  []string               `protobuf:"bytes,5,rep,name=aws_customer_gateway_ids,json=awsCustomerGatewayIds,proto3" json:"aws_customer_gateway_ids,omitempty"`
	AwsDxConnectionIds                     []string               `protobuf:"bytes,6,rep,name=aws_dx_connection_ids,json=awsDxConnectionIds,proto3" json:"aws_dx_connection_ids,omitempty"`
	AwsDxVirtualInterfaceIds               []string               `protobuf:"bytes,7,rep,name=aws_dx_virtual_interface_ids,json=awsDxVirtualInterfaceIds,proto3" json:"aws_dx_virtual_interface_ids,omitempty"`
	AwsEbsVolumeIds                        []string               `protobuf:"bytes,8,rep,name=aws_ebs_volume_ids,json=awsEbsVolumeIds,proto3" json:"aws_ebs_volume_ids,omitempty"`
	AwsEc2InstanceConnectEndpointIds       []string               `protobuf:"bytes,9,rep,name=aws_ec2_instance_connect_endpoint_ids,json=awsEc2InstanceConnectEndpointIds,proto3" json:"aws_ec2_instance_connect_endpoint_ids,omitempty"`
	AwsEc2TransitGatewayAttachmentIds      []string               `protobuf:"bytes,10,rep,name=aws_ec2_transit_gateway_attachment_ids,json=awsEc2TransitGatewayAttachmentIds,proto3" json:"aws_ec2_transit_gateway_attachment_ids,omitempty"`
	AwsEc2TransitGatewayIds                []string               `protobuf:"bytes,11,rep,name=aws_ec2_transit_gateway_ids,json=awsEc2TransitGatewayIds,proto3" json:"aws_ec2_transit_gateway_ids,omitempty"`
	AwsEc2TransitGatewayMulticastDomainIds []string               `protobuf:"bytes,12,rep,name=aws_ec2_transit_gateway_multicast_domain_ids,json=awsEc2TransitGatewayMulticastDomainIds,proto3" json:"aws_ec2_transit_gateway_multicast_domain_ids,omitempty"`
	AwsEc2TransitGatewayRouteTableIds      []string               `protobuf:"bytes,13,rep,name=aws_ec2_transit_gateway_route_table_ids,json=awsEc2TransitGatewayRouteTableIds,proto3" json:"aws_ec2_transit_gateway_route_table_ids,omitempty"`
	AwsEgressOnlyInternetGatewayIds        []string               `protobuf:"bytes,14,rep,name=aws_egress_only_internet_gateway_ids,json=awsEgressOnlyInternetGatewayIds,proto3" json:"aws_egress_only_internet_gateway_ids,omitempty"`
	AwsEipIds                              []string               `protobuf:"bytes,15,rep,name=aws_eip_ids,json=awsEipIds,proto3" json:"aws_eip_ids,omitempty"`
	AwsFlowLogIds                          []string               `protobuf:"bytes,16,rep,name=aws_flow_log_ids,json=awsFlowLogIds,proto3" json:"aws_flow_log_ids,omitempty"`
	AwsInstancesIds                        []string               `protobuf:"bytes,17,rep,name=aws_instances_ids,json=awsInstancesIds,proto3" json:"aws_instances_ids,omitempty"`
	AwsInternetGatewayIds                  []string               `protobuf:"bytes,18,rep,name=aws_internet_gateway_ids,json=awsInternetGatewayIds,proto3" json:"aws_internet_gateway_ids,omitempty"`
	AwsNatGatewayIds                       []string               `protobuf:"bytes,19,rep,name=aws_nat_gateway_ids,json=awsNatGatewayIds,proto3" json:"aws_nat_gateway_ids,omitempty"`
	AwsNetworkAclIds                       []string               `protobuf:"bytes,20,rep,name=aws_network_acl_ids,json=awsNetworkAclIds,proto3" json:"aws_network_acl_ids,omitempty"`
	AwsNetworkInterfaceIds                 []string               `protobuf:"bytes,21,rep,name=aws_network_interface_ids,json=awsNetworkInterfaceIds,proto3" json:"aws_network_interface_ids,omitempty"`
	AwsRdsClusterIds                       []string               `protobuf:"bytes,22,rep,name=aws_rds_cluster_ids,json=awsRdsClusterIds,proto3" json:"aws_rds_cluster_ids,omitempty"`
	AwsRouteTableIds                       []string               `protobuf:"bytes,23,rep,name=aws_route_table_ids,json=awsRouteTableIds,proto3" json:"aws_route_table_ids,omitempty"`
	AwsSecurityGroupIds                    []string               `protobuf:"bytes,24,rep,name=aws_security_group_ids,json=awsSecurityGroupIds,proto3" json:"aws_security_group_ids,omitempty"`
	AwsSecurityGroupRuleIds                []string               `protobuf:"bytes,25,rep,name=aws_security_group_rule_ids,json=awsSecurityGroupRuleIds,proto3" json:"aws_security_group_rule_ids,omitempty"`
	AwsSpotFleetRequestIds                 []string               `protobuf:"bytes,26,rep,name=aws_spot_fleet_request_ids,json=awsSpotFleetRequestIds,proto3" json:"aws_spot_fleet_request_ids,omitempty"`
	AwsSpotInstanceRequestIds              []string               `protobuf:"bytes,27,rep,name=aws_spot_instance_request_ids,json=awsSpotInstanceRequestIds,proto3" json:"aws_spot_instance_request_ids,omitempty"`
	AwsSubnetIds                           []string               `protobuf:"bytes,28,rep,name=aws_subnet_ids,json=awsSubnetIds,proto3" json:"aws_subnet_ids,omitempty"`
	AwsVpcEndpointIds                      []string               `protobuf:"bytes,29,rep,name=aws_vpc_endpoint_ids,json=awsVpcEndpointIds,proto3" json:"aws_vpc_endpoint_ids,omitempty"`
	AwsVpcEndpointServiceIds               []string               `protobuf:"bytes,30,rep,name=aws_vpc_endpoint_service_ids,json=awsVpcEndpointServiceIds,proto3" json:"aws_vpc_endpoint_service_ids,omitempty"`
	AwsVpcIds                              []string               `protobuf:"bytes,31,rep,name=aws_vpc_ids,json=awsVpcIds,proto3" json:"aws_vpc_ids,omitempty"`
	AwsVpcPeeringConnectionIds             []string               `protobuf:"bytes,32,rep,name=aws_vpc_peering_connection_ids,json=awsVpcPeeringConnectionIds,proto3" json:"aws_vpc_peering_connection_ids,omitempty"`
	AwsVpnConnectionIds                    []string               `protobuf:"bytes,33,rep,name=aws_vpn_connection_ids,json=awsVpnConnectionIds,proto3" json:"aws_vpn_connection_ids,omitempty"`
	AwsVpnGatewayIds                       []string               `protobuf:"bytes,34,rep,name=aws_vpn_gateway_ids,json=awsVpnGatewayIds,proto3" json:"aws_vpn_gateway_ids,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *UpdateApplicationAwsResourcesResponse) Reset() {
	*x = UpdateApplicationAwsResourcesResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationAwsResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationAwsResourcesResponse) ProtoMessage() {}

func (x *UpdateApplicationAwsResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationAwsResourcesResponse.ProtoReflect.Descriptor instead.
func (*UpdateApplicationAwsResourcesResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateApplicationAwsResourcesResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationAwsResourcesResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UpdateApplicationAwsResourcesResponse) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *UpdateApplicationAwsResourcesResponse) GetApplicationResourceIds() []string {
	if x != nil {
		return x.ApplicationResourceIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetArns() []string {
	if x != nil {
		return x.Arns
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsCustomerGatewayIds() []string {
	if x != nil {
		return x.AwsCustomerGatewayIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsDxConnectionIds() []string {
	if x != nil {
		return x.AwsDxConnectionIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsDxVirtualInterfaceIds() []string {
	if x != nil {
		return x.AwsDxVirtualInterfaceIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsEbsVolumeIds() []string {
	if x != nil {
		return x.AwsEbsVolumeIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsEc2InstanceConnectEndpointIds() []string {
	if x != nil {
		return x.AwsEc2InstanceConnectEndpointIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsEc2TransitGatewayAttachmentIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayAttachmentIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsEc2TransitGatewayIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsEc2TransitGatewayMulticastDomainIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayMulticastDomainIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsEc2TransitGatewayRouteTableIds() []string {
	if x != nil {
		return x.AwsEc2TransitGatewayRouteTableIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsEgressOnlyInternetGatewayIds() []string {
	if x != nil {
		return x.AwsEgressOnlyInternetGatewayIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsEipIds() []string {
	if x != nil {
		return x.AwsEipIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsFlowLogIds() []string {
	if x != nil {
		return x.AwsFlowLogIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsInstancesIds() []string {
	if x != nil {
		return x.AwsInstancesIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsInternetGatewayIds() []string {
	if x != nil {
		return x.AwsInternetGatewayIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsNatGatewayIds() []string {
	if x != nil {
		return x.AwsNatGatewayIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsNetworkAclIds() []string {
	if x != nil {
		return x.AwsNetworkAclIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsNetworkInterfaceIds() []string {
	if x != nil {
		return x.AwsNetworkInterfaceIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsRdsClusterIds() []string {
	if x != nil {
		return x.AwsRdsClusterIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsRouteTableIds() []string {
	if x != nil {
		return x.AwsRouteTableIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsSecurityGroupIds() []string {
	if x != nil {
		return x.AwsSecurityGroupIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsSecurityGroupRuleIds() []string {
	if x != nil {
		return x.AwsSecurityGroupRuleIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsSpotFleetRequestIds() []string {
	if x != nil {
		return x.AwsSpotFleetRequestIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsSpotInstanceRequestIds() []string {
	if x != nil {
		return x.AwsSpotInstanceRequestIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsSubnetIds() []string {
	if x != nil {
		return x.AwsSubnetIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsVpcEndpointIds() []string {
	if x != nil {
		return x.AwsVpcEndpointIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsVpcEndpointServiceIds() []string {
	if x != nil {
		return x.AwsVpcEndpointServiceIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsVpcIds() []string {
	if x != nil {
		return x.AwsVpcIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsVpcPeeringConnectionIds() []string {
	if x != nil {
		return x.AwsVpcPeeringConnectionIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsVpnConnectionIds() []string {
	if x != nil {
		return x.AwsVpnConnectionIds
	}
	return nil
}

func (x *UpdateApplicationAwsResourcesResponse) GetAwsVpnGatewayIds() []string {
	if x != nil {
		return x.AwsVpnGatewayIds
	}
	return nil
}

type DeleteApplicationAwsResourcesRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId              string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ApplicationId          string                 `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationResourceIds []string               `protobuf:"bytes,36,rep,name=application_resource_ids,json=applicationResourceIds,proto3" json:"application_resource_ids,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DeleteApplicationAwsResourcesRequest) Reset() {
	*x = DeleteApplicationAwsResourcesRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApplicationAwsResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationAwsResourcesRequest) ProtoMessage() {}

func (x *DeleteApplicationAwsResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationAwsResourcesRequest.ProtoReflect.Descriptor instead.
func (*DeleteApplicationAwsResourcesRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteApplicationAwsResourcesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteApplicationAwsResourcesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DeleteApplicationAwsResourcesRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *DeleteApplicationAwsResourcesRequest) GetApplicationResourceIds() []string {
	if x != nil {
		return x.ApplicationResourceIds
	}
	return nil
}

type CreateApplicationAzureResourcesRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ApplicationId  string                 `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ResourceIds    []string               `protobuf:"bytes,3,rep,name=resource_ids,json=resourceIds,proto3" json:"resource_ids,omitempty"`
	SubscriptionId string                 `protobuf:"bytes,4,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateApplicationAzureResourcesRequest) Reset() {
	*x = CreateApplicationAzureResourcesRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateApplicationAzureResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationAzureResourcesRequest) ProtoMessage() {}

func (x *CreateApplicationAzureResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationAzureResourcesRequest.ProtoReflect.Descriptor instead.
func (*CreateApplicationAzureResourcesRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{14}
}

func (x *CreateApplicationAzureResourcesRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *CreateApplicationAzureResourcesRequest) GetResourceIds() []string {
	if x != nil {
		return x.ResourceIds
	}
	return nil
}

func (x *CreateApplicationAzureResourcesRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type CreateApplicationAzureResourcesResponse struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplicationId          string                 `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationResourceIds []string               `protobuf:"bytes,6,rep,name=application_resource_ids,json=applicationResourceIds,proto3" json:"application_resource_ids,omitempty"`
	ResourceIds            []string               `protobuf:"bytes,3,rep,name=resource_ids,json=resourceIds,proto3" json:"resource_ids,omitempty"`
	SubscriptionId         string                 `protobuf:"bytes,4,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CreateApplicationAzureResourcesResponse) Reset() {
	*x = CreateApplicationAzureResourcesResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateApplicationAzureResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationAzureResourcesResponse) ProtoMessage() {}

func (x *CreateApplicationAzureResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationAzureResourcesResponse.ProtoReflect.Descriptor instead.
func (*CreateApplicationAzureResourcesResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{15}
}

func (x *CreateApplicationAzureResourcesResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateApplicationAzureResourcesResponse) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *CreateApplicationAzureResourcesResponse) GetApplicationResourceIds() []string {
	if x != nil {
		return x.ApplicationResourceIds
	}
	return nil
}

func (x *CreateApplicationAzureResourcesResponse) GetResourceIds() []string {
	if x != nil {
		return x.ResourceIds
	}
	return nil
}

func (x *CreateApplicationAzureResourcesResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type ReadApplicationAzureResourcesRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplicationId          string                 `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationResourceIds []string               `protobuf:"bytes,6,rep,name=application_resource_ids,json=applicationResourceIds,proto3" json:"application_resource_ids,omitempty"`
	SubscriptionId         string                 `protobuf:"bytes,4,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ReadApplicationAzureResourcesRequest) Reset() {
	*x = ReadApplicationAzureResourcesRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadApplicationAzureResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationAzureResourcesRequest) ProtoMessage() {}

func (x *ReadApplicationAzureResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationAzureResourcesRequest.ProtoReflect.Descriptor instead.
func (*ReadApplicationAzureResourcesRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{16}
}

func (x *ReadApplicationAzureResourcesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadApplicationAzureResourcesRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ReadApplicationAzureResourcesRequest) GetApplicationResourceIds() []string {
	if x != nil {
		return x.ApplicationResourceIds
	}
	return nil
}

func (x *ReadApplicationAzureResourcesRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type ReadApplicationAzureResourcesResponse struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplicationId          string                 `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationResourceIds []string               `protobuf:"bytes,6,rep,name=application_resource_ids,json=applicationResourceIds,proto3" json:"application_resource_ids,omitempty"`
	ResourceIds            []string               `protobuf:"bytes,3,rep,name=resource_ids,json=resourceIds,proto3" json:"resource_ids,omitempty"`
	SubscriptionId         string                 `protobuf:"bytes,4,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ReadApplicationAzureResourcesResponse) Reset() {
	*x = ReadApplicationAzureResourcesResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadApplicationAzureResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadApplicationAzureResourcesResponse) ProtoMessage() {}

func (x *ReadApplicationAzureResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadApplicationAzureResourcesResponse.ProtoReflect.Descriptor instead.
func (*ReadApplicationAzureResourcesResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{17}
}

func (x *ReadApplicationAzureResourcesResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadApplicationAzureResourcesResponse) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ReadApplicationAzureResourcesResponse) GetApplicationResourceIds() []string {
	if x != nil {
		return x.ApplicationResourceIds
	}
	return nil
}

func (x *ReadApplicationAzureResourcesResponse) GetResourceIds() []string {
	if x != nil {
		return x.ResourceIds
	}
	return nil
}

func (x *ReadApplicationAzureResourcesResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type UpdateApplicationAzureResourcesRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplicationId          string                 `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationResourceIds []string               `protobuf:"bytes,6,rep,name=application_resource_ids,json=applicationResourceIds,proto3" json:"application_resource_ids,omitempty"`
	ResourceIds            []string               `protobuf:"bytes,3,rep,name=resource_ids,json=resourceIds,proto3" json:"resource_ids,omitempty"`
	SubscriptionId         string                 `protobuf:"bytes,4,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	UpdateMask             *fieldmaskpb.FieldMask `protobuf:"bytes,5,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateApplicationAzureResourcesRequest) Reset() {
	*x = UpdateApplicationAzureResourcesRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationAzureResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationAzureResourcesRequest) ProtoMessage() {}

func (x *UpdateApplicationAzureResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationAzureResourcesRequest.ProtoReflect.Descriptor instead.
func (*UpdateApplicationAzureResourcesRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateApplicationAzureResourcesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationAzureResourcesRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *UpdateApplicationAzureResourcesRequest) GetApplicationResourceIds() []string {
	if x != nil {
		return x.ApplicationResourceIds
	}
	return nil
}

func (x *UpdateApplicationAzureResourcesRequest) GetResourceIds() []string {
	if x != nil {
		return x.ResourceIds
	}
	return nil
}

func (x *UpdateApplicationAzureResourcesRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *UpdateApplicationAzureResourcesRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateApplicationAzureResourcesResponse struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplicationId          string                 `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationResourceIds []string               `protobuf:"bytes,6,rep,name=application_resource_ids,json=applicationResourceIds,proto3" json:"application_resource_ids,omitempty"`
	ResourceIds            []string               `protobuf:"bytes,3,rep,name=resource_ids,json=resourceIds,proto3" json:"resource_ids,omitempty"`
	SubscriptionId         string                 `protobuf:"bytes,4,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateApplicationAzureResourcesResponse) Reset() {
	*x = UpdateApplicationAzureResourcesResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateApplicationAzureResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationAzureResourcesResponse) ProtoMessage() {}

func (x *UpdateApplicationAzureResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationAzureResourcesResponse.ProtoReflect.Descriptor instead.
func (*UpdateApplicationAzureResourcesResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateApplicationAzureResourcesResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationAzureResourcesResponse) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *UpdateApplicationAzureResourcesResponse) GetApplicationResourceIds() []string {
	if x != nil {
		return x.ApplicationResourceIds
	}
	return nil
}

func (x *UpdateApplicationAzureResourcesResponse) GetResourceIds() []string {
	if x != nil {
		return x.ResourceIds
	}
	return nil
}

func (x *UpdateApplicationAzureResourcesResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type DeleteApplicationAzureResourcesRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplicationId          string                 `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationResourceIds []string               `protobuf:"bytes,6,rep,name=application_resource_ids,json=applicationResourceIds,proto3" json:"application_resource_ids,omitempty"`
	SubscriptionId         string                 `protobuf:"bytes,4,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DeleteApplicationAzureResourcesRequest) Reset() {
	*x = DeleteApplicationAzureResourcesRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApplicationAzureResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationAzureResourcesRequest) ProtoMessage() {}

func (x *DeleteApplicationAzureResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationAzureResourcesRequest.ProtoReflect.Descriptor instead.
func (*DeleteApplicationAzureResourcesRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteApplicationAzureResourcesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteApplicationAzureResourcesRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *DeleteApplicationAzureResourcesRequest) GetApplicationResourceIds() []string {
	if x != nil {
		return x.ApplicationResourceIds
	}
	return nil
}

func (x *DeleteApplicationAzureResourcesRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type CreateAwsAccountRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AccountId      string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Mode           string                 `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationId *string                `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3,oneof" json:"organization_id,omitempty"`
	RoleArn        string                 `protobuf:"bytes,8,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty"`
	RoleExternalId string                 `protobuf:"bytes,9,opt,name=role_external_id,json=roleExternalId,proto3" json:"role_external_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateAwsAccountRequest) Reset() {
	*x = CreateAwsAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAwsAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAwsAccountRequest) ProtoMessage() {}

func (x *CreateAwsAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAwsAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateAwsAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{21}
}

func (x *CreateAwsAccountRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateAwsAccountRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *CreateAwsAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAwsAccountRequest) GetOrganizationId() string {
	if x != nil && x.OrganizationId != nil {
		return *x.OrganizationId
	}
	return ""
}

func (x *CreateAwsAccountRequest) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

func (x *CreateAwsAccountRequest) GetRoleExternalId() string {
	if x != nil {
		return x.RoleExternalId
	}
	return ""
}

type CreateAwsAccountResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId      string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Mode           string                 `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationId *string                `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3,oneof" json:"organization_id,omitempty"`
	RoleArn        string                 `protobuf:"bytes,8,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateAwsAccountResponse) Reset() {
	*x = CreateAwsAccountResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAwsAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAwsAccountResponse) ProtoMessage() {}

func (x *CreateAwsAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAwsAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateAwsAccountResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{22}
}

func (x *CreateAwsAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateAwsAccountResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateAwsAccountResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *CreateAwsAccountResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAwsAccountResponse) GetOrganizationId() string {
	if x != nil && x.OrganizationId != nil {
		return *x.OrganizationId
	}
	return ""
}

func (x *CreateAwsAccountResponse) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

type ReadAwsAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadAwsAccountRequest) Reset() {
	*x = ReadAwsAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAwsAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAwsAccountRequest) ProtoMessage() {}

func (x *ReadAwsAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAwsAccountRequest.ProtoReflect.Descriptor instead.
func (*ReadAwsAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{23}
}

func (x *ReadAwsAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadAwsAccountResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId      string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Mode           string                 `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationId *string                `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3,oneof" json:"organization_id,omitempty"`
	RoleArn        string                 `protobuf:"bytes,8,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReadAwsAccountResponse) Reset() {
	*x = ReadAwsAccountResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAwsAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAwsAccountResponse) ProtoMessage() {}

func (x *ReadAwsAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAwsAccountResponse.ProtoReflect.Descriptor instead.
func (*ReadAwsAccountResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{24}
}

func (x *ReadAwsAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadAwsAccountResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReadAwsAccountResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ReadAwsAccountResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReadAwsAccountResponse) GetOrganizationId() string {
	if x != nil && x.OrganizationId != nil {
		return *x.OrganizationId
	}
	return ""
}

func (x *ReadAwsAccountResponse) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

type UpdateAwsAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,10,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAwsAccountRequest) Reset() {
	*x = UpdateAwsAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAwsAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAwsAccountRequest) ProtoMessage() {}

func (x *UpdateAwsAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAwsAccountRequest.ProtoReflect.Descriptor instead.
func (*UpdateAwsAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateAwsAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAwsAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAwsAccountRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateAwsAccountResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId      string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Mode           string                 `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationId *string                `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3,oneof" json:"organization_id,omitempty"`
	RoleArn        string                 `protobuf:"bytes,8,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateAwsAccountResponse) Reset() {
	*x = UpdateAwsAccountResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAwsAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAwsAccountResponse) ProtoMessage() {}

func (x *UpdateAwsAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAwsAccountResponse.ProtoReflect.Descriptor instead.
func (*UpdateAwsAccountResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateAwsAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAwsAccountResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UpdateAwsAccountResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *UpdateAwsAccountResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAwsAccountResponse) GetOrganizationId() string {
	if x != nil && x.OrganizationId != nil {
		return *x.OrganizationId
	}
	return ""
}

func (x *UpdateAwsAccountResponse) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

type DeleteAwsAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAwsAccountRequest) Reset() {
	*x = DeleteAwsAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAwsAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAwsAccountRequest) ProtoMessage() {}

func (x *DeleteAwsAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAwsAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteAwsAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteAwsAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateAwsFlowLogsS3BucketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	S3BucketArn   string                 `protobuf:"bytes,3,opt,name=s3_bucket_arn,json=s3BucketArn,proto3" json:"s3_bucket_arn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAwsFlowLogsS3BucketRequest) Reset() {
	*x = CreateAwsFlowLogsS3BucketRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAwsFlowLogsS3BucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAwsFlowLogsS3BucketRequest) ProtoMessage() {}

func (x *CreateAwsFlowLogsS3BucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAwsFlowLogsS3BucketRequest.ProtoReflect.Descriptor instead.
func (*CreateAwsFlowLogsS3BucketRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{28}
}

func (x *CreateAwsFlowLogsS3BucketRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateAwsFlowLogsS3BucketRequest) GetS3BucketArn() string {
	if x != nil {
		return x.S3BucketArn
	}
	return ""
}

type CreateAwsFlowLogsS3BucketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId     string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	S3BucketArn   string                 `protobuf:"bytes,3,opt,name=s3_bucket_arn,json=s3BucketArn,proto3" json:"s3_bucket_arn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAwsFlowLogsS3BucketResponse) Reset() {
	*x = CreateAwsFlowLogsS3BucketResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAwsFlowLogsS3BucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAwsFlowLogsS3BucketResponse) ProtoMessage() {}

func (x *CreateAwsFlowLogsS3BucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAwsFlowLogsS3BucketResponse.ProtoReflect.Descriptor instead.
func (*CreateAwsFlowLogsS3BucketResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{29}
}

func (x *CreateAwsFlowLogsS3BucketResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateAwsFlowLogsS3BucketResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateAwsFlowLogsS3BucketResponse) GetS3BucketArn() string {
	if x != nil {
		return x.S3BucketArn
	}
	return ""
}

type ReadAwsFlowLogsS3BucketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadAwsFlowLogsS3BucketRequest) Reset() {
	*x = ReadAwsFlowLogsS3BucketRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAwsFlowLogsS3BucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAwsFlowLogsS3BucketRequest) ProtoMessage() {}

func (x *ReadAwsFlowLogsS3BucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAwsFlowLogsS3BucketRequest.ProtoReflect.Descriptor instead.
func (*ReadAwsFlowLogsS3BucketRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{30}
}

func (x *ReadAwsFlowLogsS3BucketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadAwsFlowLogsS3BucketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId     string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	S3BucketArn   string                 `protobuf:"bytes,3,opt,name=s3_bucket_arn,json=s3BucketArn,proto3" json:"s3_bucket_arn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadAwsFlowLogsS3BucketResponse) Reset() {
	*x = ReadAwsFlowLogsS3BucketResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAwsFlowLogsS3BucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAwsFlowLogsS3BucketResponse) ProtoMessage() {}

func (x *ReadAwsFlowLogsS3BucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAwsFlowLogsS3BucketResponse.ProtoReflect.Descriptor instead.
func (*ReadAwsFlowLogsS3BucketResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{31}
}

func (x *ReadAwsFlowLogsS3BucketResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadAwsFlowLogsS3BucketResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReadAwsFlowLogsS3BucketResponse) GetS3BucketArn() string {
	if x != nil {
		return x.S3BucketArn
	}
	return ""
}

type UpdateAwsFlowLogsS3BucketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAwsFlowLogsS3BucketRequest) Reset() {
	*x = UpdateAwsFlowLogsS3BucketRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAwsFlowLogsS3BucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAwsFlowLogsS3BucketRequest) ProtoMessage() {}

func (x *UpdateAwsFlowLogsS3BucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAwsFlowLogsS3BucketRequest.ProtoReflect.Descriptor instead.
func (*UpdateAwsFlowLogsS3BucketRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateAwsFlowLogsS3BucketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAwsFlowLogsS3BucketRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateAwsFlowLogsS3BucketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId     string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	S3BucketArn   string                 `protobuf:"bytes,3,opt,name=s3_bucket_arn,json=s3BucketArn,proto3" json:"s3_bucket_arn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAwsFlowLogsS3BucketResponse) Reset() {
	*x = UpdateAwsFlowLogsS3BucketResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAwsFlowLogsS3BucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAwsFlowLogsS3BucketResponse) ProtoMessage() {}

func (x *UpdateAwsFlowLogsS3BucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAwsFlowLogsS3BucketResponse.ProtoReflect.Descriptor instead.
func (*UpdateAwsFlowLogsS3BucketResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateAwsFlowLogsS3BucketResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAwsFlowLogsS3BucketResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UpdateAwsFlowLogsS3BucketResponse) GetS3BucketArn() string {
	if x != nil {
		return x.S3BucketArn
	}
	return ""
}

type DeleteAwsFlowLogsS3BucketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAwsFlowLogsS3BucketRequest) Reset() {
	*x = DeleteAwsFlowLogsS3BucketRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAwsFlowLogsS3BucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAwsFlowLogsS3BucketRequest) ProtoMessage() {}

func (x *DeleteAwsFlowLogsS3BucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAwsFlowLogsS3BucketRequest.ProtoReflect.Descriptor instead.
func (*DeleteAwsFlowLogsS3BucketRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteAwsFlowLogsS3BucketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateAzureFlowLogsStorageAccountRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	StorageAccountResourceId string                 `protobuf:"bytes,2,opt,name=storage_account_resource_id,json=storageAccountResourceId,proto3" json:"storage_account_resource_id,omitempty"`
	SubscriptionId           string                 `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CreateAzureFlowLogsStorageAccountRequest) Reset() {
	*x = CreateAzureFlowLogsStorageAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAzureFlowLogsStorageAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAzureFlowLogsStorageAccountRequest) ProtoMessage() {}

func (x *CreateAzureFlowLogsStorageAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAzureFlowLogsStorageAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateAzureFlowLogsStorageAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{35}
}

func (x *CreateAzureFlowLogsStorageAccountRequest) GetStorageAccountResourceId() string {
	if x != nil {
		return x.StorageAccountResourceId
	}
	return ""
}

func (x *CreateAzureFlowLogsStorageAccountRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type CreateAzureFlowLogsStorageAccountResponse struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StorageAccountResourceId string                 `protobuf:"bytes,2,opt,name=storage_account_resource_id,json=storageAccountResourceId,proto3" json:"storage_account_resource_id,omitempty"`
	SubscriptionId           string                 `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CreateAzureFlowLogsStorageAccountResponse) Reset() {
	*x = CreateAzureFlowLogsStorageAccountResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAzureFlowLogsStorageAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAzureFlowLogsStorageAccountResponse) ProtoMessage() {}

func (x *CreateAzureFlowLogsStorageAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAzureFlowLogsStorageAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateAzureFlowLogsStorageAccountResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{36}
}

func (x *CreateAzureFlowLogsStorageAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateAzureFlowLogsStorageAccountResponse) GetStorageAccountResourceId() string {
	if x != nil {
		return x.StorageAccountResourceId
	}
	return ""
}

func (x *CreateAzureFlowLogsStorageAccountResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type ReadAzureFlowLogsStorageAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadAzureFlowLogsStorageAccountRequest) Reset() {
	*x = ReadAzureFlowLogsStorageAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAzureFlowLogsStorageAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAzureFlowLogsStorageAccountRequest) ProtoMessage() {}

func (x *ReadAzureFlowLogsStorageAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAzureFlowLogsStorageAccountRequest.ProtoReflect.Descriptor instead.
func (*ReadAzureFlowLogsStorageAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{37}
}

func (x *ReadAzureFlowLogsStorageAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadAzureFlowLogsStorageAccountResponse struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StorageAccountResourceId string                 `protobuf:"bytes,2,opt,name=storage_account_resource_id,json=storageAccountResourceId,proto3" json:"storage_account_resource_id,omitempty"`
	SubscriptionId           string                 `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ReadAzureFlowLogsStorageAccountResponse) Reset() {
	*x = ReadAzureFlowLogsStorageAccountResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAzureFlowLogsStorageAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAzureFlowLogsStorageAccountResponse) ProtoMessage() {}

func (x *ReadAzureFlowLogsStorageAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAzureFlowLogsStorageAccountResponse.ProtoReflect.Descriptor instead.
func (*ReadAzureFlowLogsStorageAccountResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{38}
}

func (x *ReadAzureFlowLogsStorageAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadAzureFlowLogsStorageAccountResponse) GetStorageAccountResourceId() string {
	if x != nil {
		return x.StorageAccountResourceId
	}
	return ""
}

func (x *ReadAzureFlowLogsStorageAccountResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type UpdateAzureFlowLogsStorageAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAzureFlowLogsStorageAccountRequest) Reset() {
	*x = UpdateAzureFlowLogsStorageAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAzureFlowLogsStorageAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAzureFlowLogsStorageAccountRequest) ProtoMessage() {}

func (x *UpdateAzureFlowLogsStorageAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAzureFlowLogsStorageAccountRequest.ProtoReflect.Descriptor instead.
func (*UpdateAzureFlowLogsStorageAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateAzureFlowLogsStorageAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAzureFlowLogsStorageAccountRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateAzureFlowLogsStorageAccountResponse struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StorageAccountResourceId string                 `protobuf:"bytes,2,opt,name=storage_account_resource_id,json=storageAccountResourceId,proto3" json:"storage_account_resource_id,omitempty"`
	SubscriptionId           string                 `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UpdateAzureFlowLogsStorageAccountResponse) Reset() {
	*x = UpdateAzureFlowLogsStorageAccountResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAzureFlowLogsStorageAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAzureFlowLogsStorageAccountResponse) ProtoMessage() {}

func (x *UpdateAzureFlowLogsStorageAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAzureFlowLogsStorageAccountResponse.ProtoReflect.Descriptor instead.
func (*UpdateAzureFlowLogsStorageAccountResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateAzureFlowLogsStorageAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAzureFlowLogsStorageAccountResponse) GetStorageAccountResourceId() string {
	if x != nil {
		return x.StorageAccountResourceId
	}
	return ""
}

func (x *UpdateAzureFlowLogsStorageAccountResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type DeleteAzureFlowLogsStorageAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAzureFlowLogsStorageAccountRequest) Reset() {
	*x = DeleteAzureFlowLogsStorageAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAzureFlowLogsStorageAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAzureFlowLogsStorageAccountRequest) ProtoMessage() {}

func (x *DeleteAzureFlowLogsStorageAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAzureFlowLogsStorageAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteAzureFlowLogsStorageAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{41}
}

func (x *DeleteAzureFlowLogsStorageAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateAzureSubscriptionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ClientId       string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret   string                 `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Mode           string                 `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	SubscriptionId string                 `protobuf:"bytes,6,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	TenantId       string                 `protobuf:"bytes,7,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateAzureSubscriptionRequest) Reset() {
	*x = CreateAzureSubscriptionRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAzureSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAzureSubscriptionRequest) ProtoMessage() {}

func (x *CreateAzureSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAzureSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateAzureSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{42}
}

func (x *CreateAzureSubscriptionRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateAzureSubscriptionRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *CreateAzureSubscriptionRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *CreateAzureSubscriptionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAzureSubscriptionRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *CreateAzureSubscriptionRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type CreateAzureSubscriptionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId       string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Mode           string                 `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	SubscriptionId string                 `protobuf:"bytes,6,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	TenantId       string                 `protobuf:"bytes,7,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateAzureSubscriptionResponse) Reset() {
	*x = CreateAzureSubscriptionResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAzureSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAzureSubscriptionResponse) ProtoMessage() {}

func (x *CreateAzureSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAzureSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*CreateAzureSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{43}
}

func (x *CreateAzureSubscriptionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateAzureSubscriptionResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateAzureSubscriptionResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *CreateAzureSubscriptionResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAzureSubscriptionResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *CreateAzureSubscriptionResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ReadAzureSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadAzureSubscriptionRequest) Reset() {
	*x = ReadAzureSubscriptionRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAzureSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAzureSubscriptionRequest) ProtoMessage() {}

func (x *ReadAzureSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAzureSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*ReadAzureSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{44}
}

func (x *ReadAzureSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadAzureSubscriptionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId       string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Mode           string                 `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	SubscriptionId string                 `protobuf:"bytes,6,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	TenantId       string                 `protobuf:"bytes,7,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReadAzureSubscriptionResponse) Reset() {
	*x = ReadAzureSubscriptionResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAzureSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAzureSubscriptionResponse) ProtoMessage() {}

func (x *ReadAzureSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAzureSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*ReadAzureSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{45}
}

func (x *ReadAzureSubscriptionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadAzureSubscriptionResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ReadAzureSubscriptionResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ReadAzureSubscriptionResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReadAzureSubscriptionResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *ReadAzureSubscriptionResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type UpdateAzureSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,8,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAzureSubscriptionRequest) Reset() {
	*x = UpdateAzureSubscriptionRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAzureSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAzureSubscriptionRequest) ProtoMessage() {}

func (x *UpdateAzureSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAzureSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateAzureSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{46}
}

func (x *UpdateAzureSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAzureSubscriptionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAzureSubscriptionRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateAzureSubscriptionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId       string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Mode           string                 `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	SubscriptionId string                 `protobuf:"bytes,6,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	TenantId       string                 `protobuf:"bytes,7,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateAzureSubscriptionResponse) Reset() {
	*x = UpdateAzureSubscriptionResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAzureSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAzureSubscriptionResponse) ProtoMessage() {}

func (x *UpdateAzureSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAzureSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*UpdateAzureSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateAzureSubscriptionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAzureSubscriptionResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *UpdateAzureSubscriptionResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *UpdateAzureSubscriptionResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAzureSubscriptionResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *UpdateAzureSubscriptionResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type DeleteAzureSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAzureSubscriptionRequest) Reset() {
	*x = DeleteAzureSubscriptionRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAzureSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAzureSubscriptionRequest) ProtoMessage() {}

func (x *DeleteAzureSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAzureSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*DeleteAzureSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteAzureSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Deployment_AwsTags struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Deployment_AwsTags) Reset() {
	*x = Deployment_AwsTags{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deployment_AwsTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_AwsTags) ProtoMessage() {}

func (x *Deployment_AwsTags) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_AwsTags.ProtoReflect.Descriptor instead.
func (*Deployment_AwsTags) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{49}
}

func (x *Deployment_AwsTags) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Deployment_AwsTags) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Deployment_AzureTags struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Deployment_AzureTags) Reset() {
	*x = Deployment_AzureTags{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deployment_AzureTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_AzureTags) ProtoMessage() {}

func (x *Deployment_AzureTags) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_AzureTags.ProtoReflect.Descriptor instead.
func (*Deployment_AzureTags) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{50}
}

func (x *Deployment_AzureTags) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Deployment_AzureTags) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CreateDeploymentRequest struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	AwsAccountIds        []string                `protobuf:"bytes,2,rep,name=aws_account_ids,json=awsAccountIds,proto3" json:"aws_account_ids,omitempty"`
	AwsRegions           []string                `protobuf:"bytes,3,rep,name=aws_regions,json=awsRegions,proto3" json:"aws_regions,omitempty"`
	AwsSubnetIds         []string                `protobuf:"bytes,4,rep,name=aws_subnet_ids,json=awsSubnetIds,proto3" json:"aws_subnet_ids,omitempty"`
	AwsTags              []*Deployment_AwsTags   `protobuf:"bytes,5,rep,name=aws_tags,json=awsTags,proto3" json:"aws_tags,omitempty"`
	AwsVpcIds            []string                `protobuf:"bytes,6,rep,name=aws_vpc_ids,json=awsVpcIds,proto3" json:"aws_vpc_ids,omitempty"`
	AzureRegions         []string                `protobuf:"bytes,7,rep,name=azure_regions,json=azureRegions,proto3" json:"azure_regions,omitempty"`
	AzureSubnetIds       []string                `protobuf:"bytes,8,rep,name=azure_subnet_ids,json=azureSubnetIds,proto3" json:"azure_subnet_ids,omitempty"`
	AzureSubscriptionIds []string                `protobuf:"bytes,9,rep,name=azure_subscription_ids,json=azureSubscriptionIds,proto3" json:"azure_subscription_ids,omitempty"`
	AzureTags            []*Deployment_AzureTags `protobuf:"bytes,10,rep,name=azure_tags,json=azureTags,proto3" json:"azure_tags,omitempty"`
	AzureVnetIds         []string                `protobuf:"bytes,11,rep,name=azure_vnet_ids,json=azureVnetIds,proto3" json:"azure_vnet_ids,omitempty"`
	Description          *string                 `protobuf:"bytes,12,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Name                 string                  `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateDeploymentRequest) Reset() {
	*x = CreateDeploymentRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentRequest) ProtoMessage() {}

func (x *CreateDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentRequest.ProtoReflect.Descriptor instead.
func (*CreateDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{51}
}

func (x *CreateDeploymentRequest) GetAwsAccountIds() []string {
	if x != nil {
		return x.AwsAccountIds
	}
	return nil
}

func (x *CreateDeploymentRequest) GetAwsRegions() []string {
	if x != nil {
		return x.AwsRegions
	}
	return nil
}

func (x *CreateDeploymentRequest) GetAwsSubnetIds() []string {
	if x != nil {
		return x.AwsSubnetIds
	}
	return nil
}

func (x *CreateDeploymentRequest) GetAwsTags() []*Deployment_AwsTags {
	if x != nil {
		return x.AwsTags
	}
	return nil
}

func (x *CreateDeploymentRequest) GetAwsVpcIds() []string {
	if x != nil {
		return x.AwsVpcIds
	}
	return nil
}

func (x *CreateDeploymentRequest) GetAzureRegions() []string {
	if x != nil {
		return x.AzureRegions
	}
	return nil
}

func (x *CreateDeploymentRequest) GetAzureSubnetIds() []string {
	if x != nil {
		return x.AzureSubnetIds
	}
	return nil
}

func (x *CreateDeploymentRequest) GetAzureSubscriptionIds() []string {
	if x != nil {
		return x.AzureSubscriptionIds
	}
	return nil
}

func (x *CreateDeploymentRequest) GetAzureTags() []*Deployment_AzureTags {
	if x != nil {
		return x.AzureTags
	}
	return nil
}

func (x *CreateDeploymentRequest) GetAzureVnetIds() []string {
	if x != nil {
		return x.AzureVnetIds
	}
	return nil
}

func (x *CreateDeploymentRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateDeploymentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateDeploymentResponse struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	Id                   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AwsAccountIds        []string                `protobuf:"bytes,2,rep,name=aws_account_ids,json=awsAccountIds,proto3" json:"aws_account_ids,omitempty"`
	AwsRegions           []string                `protobuf:"bytes,3,rep,name=aws_regions,json=awsRegions,proto3" json:"aws_regions,omitempty"`
	AwsSubnetIds         []string                `protobuf:"bytes,4,rep,name=aws_subnet_ids,json=awsSubnetIds,proto3" json:"aws_subnet_ids,omitempty"`
	AwsTags              []*Deployment_AwsTags   `protobuf:"bytes,5,rep,name=aws_tags,json=awsTags,proto3" json:"aws_tags,omitempty"`
	AwsVpcIds            []string                `protobuf:"bytes,6,rep,name=aws_vpc_ids,json=awsVpcIds,proto3" json:"aws_vpc_ids,omitempty"`
	AzureRegions         []string                `protobuf:"bytes,7,rep,name=azure_regions,json=azureRegions,proto3" json:"azure_regions,omitempty"`
	AzureSubnetIds       []string                `protobuf:"bytes,8,rep,name=azure_subnet_ids,json=azureSubnetIds,proto3" json:"azure_subnet_ids,omitempty"`
	AzureSubscriptionIds []string                `protobuf:"bytes,9,rep,name=azure_subscription_ids,json=azureSubscriptionIds,proto3" json:"azure_subscription_ids,omitempty"`
	AzureTags            []*Deployment_AzureTags `protobuf:"bytes,10,rep,name=azure_tags,json=azureTags,proto3" json:"azure_tags,omitempty"`
	AzureVnetIds         []string                `protobuf:"bytes,11,rep,name=azure_vnet_ids,json=azureVnetIds,proto3" json:"azure_vnet_ids,omitempty"`
	Description          *string                 `protobuf:"bytes,12,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Name                 string                  `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateDeploymentResponse) Reset() {
	*x = CreateDeploymentResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentResponse) ProtoMessage() {}

func (x *CreateDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentResponse.ProtoReflect.Descriptor instead.
func (*CreateDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{52}
}

func (x *CreateDeploymentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateDeploymentResponse) GetAwsAccountIds() []string {
	if x != nil {
		return x.AwsAccountIds
	}
	return nil
}

func (x *CreateDeploymentResponse) GetAwsRegions() []string {
	if x != nil {
		return x.AwsRegions
	}
	return nil
}

func (x *CreateDeploymentResponse) GetAwsSubnetIds() []string {
	if x != nil {
		return x.AwsSubnetIds
	}
	return nil
}

func (x *CreateDeploymentResponse) GetAwsTags() []*Deployment_AwsTags {
	if x != nil {
		return x.AwsTags
	}
	return nil
}

func (x *CreateDeploymentResponse) GetAwsVpcIds() []string {
	if x != nil {
		return x.AwsVpcIds
	}
	return nil
}

func (x *CreateDeploymentResponse) GetAzureRegions() []string {
	if x != nil {
		return x.AzureRegions
	}
	return nil
}

func (x *CreateDeploymentResponse) GetAzureSubnetIds() []string {
	if x != nil {
		return x.AzureSubnetIds
	}
	return nil
}

func (x *CreateDeploymentResponse) GetAzureSubscriptionIds() []string {
	if x != nil {
		return x.AzureSubscriptionIds
	}
	return nil
}

func (x *CreateDeploymentResponse) GetAzureTags() []*Deployment_AzureTags {
	if x != nil {
		return x.AzureTags
	}
	return nil
}

func (x *CreateDeploymentResponse) GetAzureVnetIds() []string {
	if x != nil {
		return x.AzureVnetIds
	}
	return nil
}

func (x *CreateDeploymentResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateDeploymentResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ReadDeploymentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadDeploymentRequest) Reset() {
	*x = ReadDeploymentRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDeploymentRequest) ProtoMessage() {}

func (x *ReadDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDeploymentRequest.ProtoReflect.Descriptor instead.
func (*ReadDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{53}
}

func (x *ReadDeploymentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadDeploymentResponse struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	Id                   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AwsAccountIds        []string                `protobuf:"bytes,2,rep,name=aws_account_ids,json=awsAccountIds,proto3" json:"aws_account_ids,omitempty"`
	AwsRegions           []string                `protobuf:"bytes,3,rep,name=aws_regions,json=awsRegions,proto3" json:"aws_regions,omitempty"`
	AwsSubnetIds         []string                `protobuf:"bytes,4,rep,name=aws_subnet_ids,json=awsSubnetIds,proto3" json:"aws_subnet_ids,omitempty"`
	AwsTags              []*Deployment_AwsTags   `protobuf:"bytes,5,rep,name=aws_tags,json=awsTags,proto3" json:"aws_tags,omitempty"`
	AwsVpcIds            []string                `protobuf:"bytes,6,rep,name=aws_vpc_ids,json=awsVpcIds,proto3" json:"aws_vpc_ids,omitempty"`
	AzureRegions         []string                `protobuf:"bytes,7,rep,name=azure_regions,json=azureRegions,proto3" json:"azure_regions,omitempty"`
	AzureSubnetIds       []string                `protobuf:"bytes,8,rep,name=azure_subnet_ids,json=azureSubnetIds,proto3" json:"azure_subnet_ids,omitempty"`
	AzureSubscriptionIds []string                `protobuf:"bytes,9,rep,name=azure_subscription_ids,json=azureSubscriptionIds,proto3" json:"azure_subscription_ids,omitempty"`
	AzureTags            []*Deployment_AzureTags `protobuf:"bytes,10,rep,name=azure_tags,json=azureTags,proto3" json:"azure_tags,omitempty"`
	AzureVnetIds         []string                `protobuf:"bytes,11,rep,name=azure_vnet_ids,json=azureVnetIds,proto3" json:"azure_vnet_ids,omitempty"`
	Description          *string                 `protobuf:"bytes,12,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Name                 string                  `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ReadDeploymentResponse) Reset() {
	*x = ReadDeploymentResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDeploymentResponse) ProtoMessage() {}

func (x *ReadDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDeploymentResponse.ProtoReflect.Descriptor instead.
func (*ReadDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{54}
}

func (x *ReadDeploymentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadDeploymentResponse) GetAwsAccountIds() []string {
	if x != nil {
		return x.AwsAccountIds
	}
	return nil
}

func (x *ReadDeploymentResponse) GetAwsRegions() []string {
	if x != nil {
		return x.AwsRegions
	}
	return nil
}

func (x *ReadDeploymentResponse) GetAwsSubnetIds() []string {
	if x != nil {
		return x.AwsSubnetIds
	}
	return nil
}

func (x *ReadDeploymentResponse) GetAwsTags() []*Deployment_AwsTags {
	if x != nil {
		return x.AwsTags
	}
	return nil
}

func (x *ReadDeploymentResponse) GetAwsVpcIds() []string {
	if x != nil {
		return x.AwsVpcIds
	}
	return nil
}

func (x *ReadDeploymentResponse) GetAzureRegions() []string {
	if x != nil {
		return x.AzureRegions
	}
	return nil
}

func (x *ReadDeploymentResponse) GetAzureSubnetIds() []string {
	if x != nil {
		return x.AzureSubnetIds
	}
	return nil
}

func (x *ReadDeploymentResponse) GetAzureSubscriptionIds() []string {
	if x != nil {
		return x.AzureSubscriptionIds
	}
	return nil
}

func (x *ReadDeploymentResponse) GetAzureTags() []*Deployment_AzureTags {
	if x != nil {
		return x.AzureTags
	}
	return nil
}

func (x *ReadDeploymentResponse) GetAzureVnetIds() []string {
	if x != nil {
		return x.AzureVnetIds
	}
	return nil
}

func (x *ReadDeploymentResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ReadDeploymentResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateDeploymentRequest struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	Id                   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AwsAccountIds        []string                `protobuf:"bytes,2,rep,name=aws_account_ids,json=awsAccountIds,proto3" json:"aws_account_ids,omitempty"`
	AwsRegions           []string                `protobuf:"bytes,3,rep,name=aws_regions,json=awsRegions,proto3" json:"aws_regions,omitempty"`
	AwsSubnetIds         []string                `protobuf:"bytes,4,rep,name=aws_subnet_ids,json=awsSubnetIds,proto3" json:"aws_subnet_ids,omitempty"`
	AwsTags              []*Deployment_AwsTags   `protobuf:"bytes,5,rep,name=aws_tags,json=awsTags,proto3" json:"aws_tags,omitempty"`
	AwsVpcIds            []string                `protobuf:"bytes,6,rep,name=aws_vpc_ids,json=awsVpcIds,proto3" json:"aws_vpc_ids,omitempty"`
	AzureRegions         []string                `protobuf:"bytes,7,rep,name=azure_regions,json=azureRegions,proto3" json:"azure_regions,omitempty"`
	AzureSubnetIds       []string                `protobuf:"bytes,8,rep,name=azure_subnet_ids,json=azureSubnetIds,proto3" json:"azure_subnet_ids,omitempty"`
	AzureSubscriptionIds []string                `protobuf:"bytes,9,rep,name=azure_subscription_ids,json=azureSubscriptionIds,proto3" json:"azure_subscription_ids,omitempty"`
	AzureTags            []*Deployment_AzureTags `protobuf:"bytes,10,rep,name=azure_tags,json=azureTags,proto3" json:"azure_tags,omitempty"`
	AzureVnetIds         []string                `protobuf:"bytes,11,rep,name=azure_vnet_ids,json=azureVnetIds,proto3" json:"azure_vnet_ids,omitempty"`
	Description          *string                 `protobuf:"bytes,12,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Name                 string                  `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask           *fieldmaskpb.FieldMask  `protobuf:"bytes,14,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateDeploymentRequest) Reset() {
	*x = UpdateDeploymentRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeploymentRequest) ProtoMessage() {}

func (x *UpdateDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeploymentRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{55}
}

func (x *UpdateDeploymentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDeploymentRequest) GetAwsAccountIds() []string {
	if x != nil {
		return x.AwsAccountIds
	}
	return nil
}

func (x *UpdateDeploymentRequest) GetAwsRegions() []string {
	if x != nil {
		return x.AwsRegions
	}
	return nil
}

func (x *UpdateDeploymentRequest) GetAwsSubnetIds() []string {
	if x != nil {
		return x.AwsSubnetIds
	}
	return nil
}

func (x *UpdateDeploymentRequest) GetAwsTags() []*Deployment_AwsTags {
	if x != nil {
		return x.AwsTags
	}
	return nil
}

func (x *UpdateDeploymentRequest) GetAwsVpcIds() []string {
	if x != nil {
		return x.AwsVpcIds
	}
	return nil
}

func (x *UpdateDeploymentRequest) GetAzureRegions() []string {
	if x != nil {
		return x.AzureRegions
	}
	return nil
}

func (x *UpdateDeploymentRequest) GetAzureSubnetIds() []string {
	if x != nil {
		return x.AzureSubnetIds
	}
	return nil
}

func (x *UpdateDeploymentRequest) GetAzureSubscriptionIds() []string {
	if x != nil {
		return x.AzureSubscriptionIds
	}
	return nil
}

func (x *UpdateDeploymentRequest) GetAzureTags() []*Deployment_AzureTags {
	if x != nil {
		return x.AzureTags
	}
	return nil
}

func (x *UpdateDeploymentRequest) GetAzureVnetIds() []string {
	if x != nil {
		return x.AzureVnetIds
	}
	return nil
}

func (x *UpdateDeploymentRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateDeploymentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDeploymentRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateDeploymentResponse struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	Id                   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AwsAccountIds        []string                `protobuf:"bytes,2,rep,name=aws_account_ids,json=awsAccountIds,proto3" json:"aws_account_ids,omitempty"`
	AwsRegions           []string                `protobuf:"bytes,3,rep,name=aws_regions,json=awsRegions,proto3" json:"aws_regions,omitempty"`
	AwsSubnetIds         []string                `protobuf:"bytes,4,rep,name=aws_subnet_ids,json=awsSubnetIds,proto3" json:"aws_subnet_ids,omitempty"`
	AwsTags              []*Deployment_AwsTags   `protobuf:"bytes,5,rep,name=aws_tags,json=awsTags,proto3" json:"aws_tags,omitempty"`
	AwsVpcIds            []string                `protobuf:"bytes,6,rep,name=aws_vpc_ids,json=awsVpcIds,proto3" json:"aws_vpc_ids,omitempty"`
	AzureRegions         []string                `protobuf:"bytes,7,rep,name=azure_regions,json=azureRegions,proto3" json:"azure_regions,omitempty"`
	AzureSubnetIds       []string                `protobuf:"bytes,8,rep,name=azure_subnet_ids,json=azureSubnetIds,proto3" json:"azure_subnet_ids,omitempty"`
	AzureSubscriptionIds []string                `protobuf:"bytes,9,rep,name=azure_subscription_ids,json=azureSubscriptionIds,proto3" json:"azure_subscription_ids,omitempty"`
	AzureTags            []*Deployment_AzureTags `protobuf:"bytes,10,rep,name=azure_tags,json=azureTags,proto3" json:"azure_tags,omitempty"`
	AzureVnetIds         []string                `protobuf:"bytes,11,rep,name=azure_vnet_ids,json=azureVnetIds,proto3" json:"azure_vnet_ids,omitempty"`
	Description          *string                 `protobuf:"bytes,12,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Name                 string                  `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateDeploymentResponse) Reset() {
	*x = UpdateDeploymentResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeploymentResponse) ProtoMessage() {}

func (x *UpdateDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeploymentResponse.ProtoReflect.Descriptor instead.
func (*UpdateDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{56}
}

func (x *UpdateDeploymentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDeploymentResponse) GetAwsAccountIds() []string {
	if x != nil {
		return x.AwsAccountIds
	}
	return nil
}

func (x *UpdateDeploymentResponse) GetAwsRegions() []string {
	if x != nil {
		return x.AwsRegions
	}
	return nil
}

func (x *UpdateDeploymentResponse) GetAwsSubnetIds() []string {
	if x != nil {
		return x.AwsSubnetIds
	}
	return nil
}

func (x *UpdateDeploymentResponse) GetAwsTags() []*Deployment_AwsTags {
	if x != nil {
		return x.AwsTags
	}
	return nil
}

func (x *UpdateDeploymentResponse) GetAwsVpcIds() []string {
	if x != nil {
		return x.AwsVpcIds
	}
	return nil
}

func (x *UpdateDeploymentResponse) GetAzureRegions() []string {
	if x != nil {
		return x.AzureRegions
	}
	return nil
}

func (x *UpdateDeploymentResponse) GetAzureSubnetIds() []string {
	if x != nil {
		return x.AzureSubnetIds
	}
	return nil
}

func (x *UpdateDeploymentResponse) GetAzureSubscriptionIds() []string {
	if x != nil {
		return x.AzureSubscriptionIds
	}
	return nil
}

func (x *UpdateDeploymentResponse) GetAzureTags() []*Deployment_AzureTags {
	if x != nil {
		return x.AzureTags
	}
	return nil
}

func (x *UpdateDeploymentResponse) GetAzureVnetIds() []string {
	if x != nil {
		return x.AzureVnetIds
	}
	return nil
}

func (x *UpdateDeploymentResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateDeploymentResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteDeploymentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDeploymentRequest) Reset() {
	*x = DeleteDeploymentRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeploymentRequest) ProtoMessage() {}

func (x *DeleteDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeploymentRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{57}
}

func (x *DeleteDeploymentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateK8SClusterOnboardingCredentialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Description   *string                `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IllumioRegion string                 `protobuf:"bytes,6,opt,name=illumio_region,json=illumioRegion,proto3" json:"illumio_region,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateK8SClusterOnboardingCredentialRequest) Reset() {
	*x = CreateK8SClusterOnboardingCredentialRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateK8SClusterOnboardingCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SClusterOnboardingCredentialRequest) ProtoMessage() {}

func (x *CreateK8SClusterOnboardingCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SClusterOnboardingCredentialRequest.ProtoReflect.Descriptor instead.
func (*CreateK8SClusterOnboardingCredentialRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{58}
}

func (x *CreateK8SClusterOnboardingCredentialRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialRequest) GetIllumioRegion() string {
	if x != nil {
		return x.IllumioRegion
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateK8SClusterOnboardingCredentialResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId      string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret  string                 `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Description   *string                `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IllumioRegion string                 `protobuf:"bytes,6,opt,name=illumio_region,json=illumioRegion,proto3" json:"illumio_region,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateK8SClusterOnboardingCredentialResponse) Reset() {
	*x = CreateK8SClusterOnboardingCredentialResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateK8SClusterOnboardingCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SClusterOnboardingCredentialResponse) ProtoMessage() {}

func (x *CreateK8SClusterOnboardingCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SClusterOnboardingCredentialResponse.ProtoReflect.Descriptor instead.
func (*CreateK8SClusterOnboardingCredentialResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{59}
}

func (x *CreateK8SClusterOnboardingCredentialResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialResponse) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialResponse) GetIllumioRegion() string {
	if x != nil {
		return x.IllumioRegion
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ReadK8SClusterOnboardingCredentialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadK8SClusterOnboardingCredentialRequest) Reset() {
	*x = ReadK8SClusterOnboardingCredentialRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadK8SClusterOnboardingCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadK8SClusterOnboardingCredentialRequest) ProtoMessage() {}

func (x *ReadK8SClusterOnboardingCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadK8SClusterOnboardingCredentialRequest.ProtoReflect.Descriptor instead.
func (*ReadK8SClusterOnboardingCredentialRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{60}
}

func (x *ReadK8SClusterOnboardingCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadK8SClusterOnboardingCredentialResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId      string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Description   *string                `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IllumioRegion string                 `protobuf:"bytes,6,opt,name=illumio_region,json=illumioRegion,proto3" json:"illumio_region,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadK8SClusterOnboardingCredentialResponse) Reset() {
	*x = ReadK8SClusterOnboardingCredentialResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadK8SClusterOnboardingCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadK8SClusterOnboardingCredentialResponse) ProtoMessage() {}

func (x *ReadK8SClusterOnboardingCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadK8SClusterOnboardingCredentialResponse.ProtoReflect.Descriptor instead.
func (*ReadK8SClusterOnboardingCredentialResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{61}
}

func (x *ReadK8SClusterOnboardingCredentialResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadK8SClusterOnboardingCredentialResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ReadK8SClusterOnboardingCredentialResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ReadK8SClusterOnboardingCredentialResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ReadK8SClusterOnboardingCredentialResponse) GetIllumioRegion() string {
	if x != nil {
		return x.IllumioRegion
	}
	return ""
}

func (x *ReadK8SClusterOnboardingCredentialResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateK8SClusterOnboardingCredentialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description   *string                `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,8,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateK8SClusterOnboardingCredentialRequest) Reset() {
	*x = UpdateK8SClusterOnboardingCredentialRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateK8SClusterOnboardingCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SClusterOnboardingCredentialRequest) ProtoMessage() {}

func (x *UpdateK8SClusterOnboardingCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SClusterOnboardingCredentialRequest.ProtoReflect.Descriptor instead.
func (*UpdateK8SClusterOnboardingCredentialRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateK8SClusterOnboardingCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateK8SClusterOnboardingCredentialResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId      string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Description   *string                `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IllumioRegion string                 `protobuf:"bytes,6,opt,name=illumio_region,json=illumioRegion,proto3" json:"illumio_region,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) Reset() {
	*x = UpdateK8SClusterOnboardingCredentialResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SClusterOnboardingCredentialResponse) ProtoMessage() {}

func (x *UpdateK8SClusterOnboardingCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SClusterOnboardingCredentialResponse.ProtoReflect.Descriptor instead.
func (*UpdateK8SClusterOnboardingCredentialResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{63}
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) GetIllumioRegion() string {
	if x != nil {
		return x.IllumioRegion
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteK8SClusterOnboardingCredentialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteK8SClusterOnboardingCredentialRequest) Reset() {
	*x = DeleteK8SClusterOnboardingCredentialRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteK8SClusterOnboardingCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteK8SClusterOnboardingCredentialRequest) ProtoMessage() {}

func (x *DeleteK8SClusterOnboardingCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteK8SClusterOnboardingCredentialRequest.ProtoReflect.Descriptor instead.
func (*DeleteK8SClusterOnboardingCredentialRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{64}
}

func (x *DeleteK8SClusterOnboardingCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TagToLabel_Icon struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BackgroundColor string                 `protobuf:"bytes,1,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
	ForegroundColor string                 `protobuf:"bytes,2,opt,name=foreground_color,json=foregroundColor,proto3" json:"foreground_color,omitempty"`
	Name            string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TagToLabel_Icon) Reset() {
	*x = TagToLabel_Icon{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagToLabel_Icon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagToLabel_Icon) ProtoMessage() {}

func (x *TagToLabel_Icon) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagToLabel_Icon.ProtoReflect.Descriptor instead.
func (*TagToLabel_Icon) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{65}
}

func (x *TagToLabel_Icon) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *TagToLabel_Icon) GetForegroundColor() string {
	if x != nil {
		return x.ForegroundColor
	}
	return ""
}

func (x *TagToLabel_Icon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateTagToLabelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AwsTagKeys    []string               `protobuf:"bytes,2,rep,name=aws_tag_keys,json=awsTagKeys,proto3" json:"aws_tag_keys,omitempty"`
	AzureTagKeys  []string               `protobuf:"bytes,3,rep,name=azure_tag_keys,json=azureTagKeys,proto3" json:"azure_tag_keys,omitempty"`
	Icon          *TagToLabel_Icon       `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Key           string                 `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Name          string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTagToLabelRequest) Reset() {
	*x = CreateTagToLabelRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTagToLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagToLabelRequest) ProtoMessage() {}

func (x *CreateTagToLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagToLabelRequest.ProtoReflect.Descriptor instead.
func (*CreateTagToLabelRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{66}
}

func (x *CreateTagToLabelRequest) GetAwsTagKeys() []string {
	if x != nil {
		return x.AwsTagKeys
	}
	return nil
}

func (x *CreateTagToLabelRequest) GetAzureTagKeys() []string {
	if x != nil {
		return x.AzureTagKeys
	}
	return nil
}

func (x *CreateTagToLabelRequest) GetIcon() *TagToLabel_Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *CreateTagToLabelRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CreateTagToLabelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateTagToLabelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AwsTagKeys    []string               `protobuf:"bytes,2,rep,name=aws_tag_keys,json=awsTagKeys,proto3" json:"aws_tag_keys,omitempty"`
	AzureTagKeys  []string               `protobuf:"bytes,3,rep,name=azure_tag_keys,json=azureTagKeys,proto3" json:"azure_tag_keys,omitempty"`
	Icon          *TagToLabel_Icon       `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Key           string                 `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Name          string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTagToLabelResponse) Reset() {
	*x = CreateTagToLabelResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTagToLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagToLabelResponse) ProtoMessage() {}

func (x *CreateTagToLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagToLabelResponse.ProtoReflect.Descriptor instead.
func (*CreateTagToLabelResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{67}
}

func (x *CreateTagToLabelResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateTagToLabelResponse) GetAwsTagKeys() []string {
	if x != nil {
		return x.AwsTagKeys
	}
	return nil
}

func (x *CreateTagToLabelResponse) GetAzureTagKeys() []string {
	if x != nil {
		return x.AzureTagKeys
	}
	return nil
}

func (x *CreateTagToLabelResponse) GetIcon() *TagToLabel_Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *CreateTagToLabelResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CreateTagToLabelResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ReadTagToLabelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadTagToLabelRequest) Reset() {
	*x = ReadTagToLabelRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadTagToLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTagToLabelRequest) ProtoMessage() {}

func (x *ReadTagToLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTagToLabelRequest.ProtoReflect.Descriptor instead.
func (*ReadTagToLabelRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{68}
}

func (x *ReadTagToLabelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadTagToLabelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AwsTagKeys    []string               `protobuf:"bytes,2,rep,name=aws_tag_keys,json=awsTagKeys,proto3" json:"aws_tag_keys,omitempty"`
	AzureTagKeys  []string               `protobuf:"bytes,3,rep,name=azure_tag_keys,json=azureTagKeys,proto3" json:"azure_tag_keys,omitempty"`
	Icon          *TagToLabel_Icon       `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Key           string                 `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Name          string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadTagToLabelResponse) Reset() {
	*x = ReadTagToLabelResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadTagToLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTagToLabelResponse) ProtoMessage() {}

func (x *ReadTagToLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTagToLabelResponse.ProtoReflect.Descriptor instead.
func (*ReadTagToLabelResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{69}
}

func (x *ReadTagToLabelResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadTagToLabelResponse) GetAwsTagKeys() []string {
	if x != nil {
		return x.AwsTagKeys
	}
	return nil
}

func (x *ReadTagToLabelResponse) GetAzureTagKeys() []string {
	if x != nil {
		return x.AzureTagKeys
	}
	return nil
}

func (x *ReadTagToLabelResponse) GetIcon() *TagToLabel_Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *ReadTagToLabelResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ReadTagToLabelResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateTagToLabelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AwsTagKeys    []string               `protobuf:"bytes,2,rep,name=aws_tag_keys,json=awsTagKeys,proto3" json:"aws_tag_keys,omitempty"`
	AzureTagKeys  []string               `protobuf:"bytes,3,rep,name=azure_tag_keys,json=azureTagKeys,proto3" json:"azure_tag_keys,omitempty"`
	Icon          *TagToLabel_Icon       `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Key           string                 `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Name          string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,7,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTagToLabelRequest) Reset() {
	*x = UpdateTagToLabelRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTagToLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagToLabelRequest) ProtoMessage() {}

func (x *UpdateTagToLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagToLabelRequest.ProtoReflect.Descriptor instead.
func (*UpdateTagToLabelRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateTagToLabelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTagToLabelRequest) GetAwsTagKeys() []string {
	if x != nil {
		return x.AwsTagKeys
	}
	return nil
}

func (x *UpdateTagToLabelRequest) GetAzureTagKeys() []string {
	if x != nil {
		return x.AzureTagKeys
	}
	return nil
}

func (x *UpdateTagToLabelRequest) GetIcon() *TagToLabel_Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *UpdateTagToLabelRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UpdateTagToLabelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTagToLabelRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateTagToLabelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AwsTagKeys    []string               `protobuf:"bytes,2,rep,name=aws_tag_keys,json=awsTagKeys,proto3" json:"aws_tag_keys,omitempty"`
	AzureTagKeys  []string               `protobuf:"bytes,3,rep,name=azure_tag_keys,json=azureTagKeys,proto3" json:"azure_tag_keys,omitempty"`
	Icon          *TagToLabel_Icon       `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Key           string                 `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Name          string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTagToLabelResponse) Reset() {
	*x = UpdateTagToLabelResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTagToLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagToLabelResponse) ProtoMessage() {}

func (x *UpdateTagToLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagToLabelResponse.ProtoReflect.Descriptor instead.
func (*UpdateTagToLabelResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateTagToLabelResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTagToLabelResponse) GetAwsTagKeys() []string {
	if x != nil {
		return x.AwsTagKeys
	}
	return nil
}

func (x *UpdateTagToLabelResponse) GetAzureTagKeys() []string {
	if x != nil {
		return x.AzureTagKeys
	}
	return nil
}

func (x *UpdateTagToLabelResponse) GetIcon() *TagToLabel_Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *UpdateTagToLabelResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UpdateTagToLabelResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteTagToLabelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTagToLabelRequest) Reset() {
	*x = DeleteTagToLabelRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTagToLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagToLabelRequest) ProtoMessage() {}

func (x *DeleteTagToLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagToLabelRequest.ProtoReflect.Descriptor instead.
func (*DeleteTagToLabelRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteTagToLabelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_illumio_cloud_config_v1_config_proto protoreflect.FileDescriptor

var file_illumio_cloud_config_v1_config_proto_rawDesc = string([]byte{
	0x0a, 0x24, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a,
	0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x16, 0x52, 0x65, 0x61,
	0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xb2, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1,
	0x0e, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x72, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x6e,
	0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x77, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x77, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x77,
	0x73, 0x5f, 0x64, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x77, 0x73, 0x44, 0x78,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a,
	0x1c, 0x61, 0x77, 0x73, 0x5f, 0x64, 0x78, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x18, 0x61, 0x77, 0x73, 0x44, 0x78, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a,
	0x12, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x62, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x45, 0x62,
	0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x25, 0x61, 0x77,
	0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x20, 0x61, 0x77, 0x73, 0x45, 0x63,
	0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x51, 0x0a, 0x26, 0x61,
	0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21, 0x61, 0x77, 0x73,
	0x45, 0x63, 0x32, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3c,
	0x0a, 0x1b, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x17, 0x61, 0x77, 0x73, 0x45, 0x63, 0x32, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x2c,
	0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x26, 0x61, 0x77, 0x73, 0x45, 0x63, 0x32, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x27, 0x61, 0x77,
	0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21, 0x61, 0x77, 0x73,
	0x45, 0x63, 0x32, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x4d,
	0x0a, 0x24, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1f, 0x61, 0x77,
	0x73, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a,
	0x0b, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x77, 0x73, 0x45, 0x69, 0x70, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a,
	0x10, 0x61, 0x77, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77,
	0x4c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x49,
	0x64, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x77, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x77, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61,
	0x77, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x4e, 0x61, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77,
	0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x41, 0x63, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x77, 0x73,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x77,
	0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x64, 0x73, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x52, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x77, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x77, 0x73, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x61, 0x77,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x77, 0x73, 0x53, 0x70,
	0x6f, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x40, 0x0a, 0x1d, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x61, 0x77, 0x73, 0x53, 0x70, 0x6f,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x73,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x77, 0x73,
	0x5f, 0x76, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x61, 0x77,
	0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x18, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x77,
	0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x77,
	0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x20, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x1a, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x33,
	0x0a, 0x16, 0x61, 0x77, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x61, 0x77, 0x73, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x77, 0x73, 0x56, 0x70, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49,
	0x64, 0x73, 0x22, 0xfc, 0x0e, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x24,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x6e, 0x73,
	0x12, 0x37, 0x0a, 0x18, 0x61, 0x77, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x15, 0x61, 0x77, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x77, 0x73,
	0x5f, 0x64, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x77, 0x73, 0x44, 0x78, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x1c,
	0x61, 0x77, 0x73, 0x5f, 0x64, 0x78, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x18, 0x61, 0x77, 0x73, 0x44, 0x78, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x12,
	0x61, 0x77, 0x73, 0x5f, 0x65, 0x62, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x45, 0x62, 0x73,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x25, 0x61, 0x77, 0x73,
	0x5f, 0x65, 0x63, 0x32, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x20, 0x61, 0x77, 0x73, 0x45, 0x63, 0x32,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x51, 0x0a, 0x26, 0x61, 0x77,
	0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21, 0x61, 0x77, 0x73, 0x45,
	0x63, 0x32, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a,
	0x1b, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x17, 0x61, 0x77, 0x73, 0x45, 0x63, 0x32, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x2c, 0x61,
	0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x26, 0x61, 0x77, 0x73, 0x45, 0x63, 0x32, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x27, 0x61, 0x77, 0x73,
	0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21, 0x61, 0x77, 0x73, 0x45,
	0x63, 0x32, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x4d, 0x0a,
	0x24, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1f, 0x61, 0x77, 0x73,
	0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0b,
	0x61, 0x77, 0x73, 0x5f, 0x65, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x77, 0x73, 0x45, 0x69, 0x70, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x10,
	0x61, 0x77, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x6f, 0x67, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x77, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x64,
	0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x77, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x77, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77,
	0x73, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x4e, 0x61, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x41, 0x63, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x77, 0x73, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x77, 0x73,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x64, 0x73, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x77, 0x73, 0x52, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x77, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x61, 0x77, 0x73,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x77, 0x73, 0x53, 0x70, 0x6f,
	0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x40, 0x0a, 0x1d, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x61, 0x77, 0x73, 0x53, 0x70, 0x6f, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x77, 0x73, 0x5f,
	0x76, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x61, 0x77, 0x73,
	0x5f, 0x76, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x18, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x77, 0x73,
	0x5f, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x77, 0x73,
	0x5f, 0x76, 0x70, 0x63, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x1a, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a,
	0x16, 0x61, 0x77, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61,
	0x77, 0x73, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x77, 0x73, 0x56, 0x70, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64,
	0x73, 0x22, 0xb4, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0xfa, 0x0e, 0x0a, 0x23, 0x52, 0x65, 0x61,
	0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x72, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x77, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x77, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x31, 0x0a,
	0x15, 0x61, 0x77, 0x73, 0x5f, 0x64, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x77,
	0x73, 0x44, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x3e, 0x0a, 0x1c, 0x61, 0x77, 0x73, 0x5f, 0x64, 0x78, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x61, 0x77, 0x73, 0x44, 0x78, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x2b, 0x0a, 0x12, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x62, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x77,
	0x73, 0x45, 0x62, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x12, 0x4f, 0x0a,
	0x25, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x20, 0x61, 0x77,
	0x73, 0x45, 0x63, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x51,
	0x0a, 0x26, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21,
	0x61, 0x77, 0x73, 0x45, 0x63, 0x32, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x61, 0x77, 0x73, 0x45, 0x63, 0x32, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12,
	0x5c, 0x0a, 0x2c, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x26, 0x61, 0x77, 0x73, 0x45, 0x63, 0x32, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x52, 0x0a,
	0x27, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21,
	0x61, 0x77, 0x73, 0x45, 0x63, 0x32, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x4d, 0x0a, 0x24, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x1f, 0x61, 0x77, 0x73, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73,
	0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x77, 0x73, 0x45, 0x69, 0x70, 0x49, 0x64, 0x73,
	0x12, 0x27, 0x0a, 0x10, 0x61, 0x77, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x77, 0x73, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x77, 0x73,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x77, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x77, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2d,
	0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73,
	0x4e, 0x61, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a,
	0x13, 0x61, 0x77, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x63, 0x6c,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x63, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19,
	0x61, 0x77, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x16, 0x61, 0x77, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x72,
	0x64, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x52, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x77,
	0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x17, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x77, 0x73, 0x5f,
	0x73, 0x70, 0x6f, 0x74, 0x5f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x77,
	0x73, 0x53, 0x70, 0x6f, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x61, 0x77, 0x73,
	0x53, 0x70, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x77, 0x73, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x14,
	0x61, 0x77, 0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x77, 0x73, 0x56,
	0x70, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a,
	0x1c, 0x61, 0x77, 0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x18, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a,
	0x0b, 0x61, 0x77, 0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a,
	0x1e, 0x61, 0x77, 0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x50, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x77, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x61, 0x77, 0x73, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x76, 0x70,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x22, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x56, 0x70, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x64, 0x73, 0x22, 0xb8, 0x0f, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x24, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72,
	0x6e, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x77, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x77, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x61,
	0x77, 0x73, 0x5f, 0x64, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x77, 0x73, 0x44,
	0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x3e,
	0x0a, 0x1c, 0x61, 0x77, 0x73, 0x5f, 0x64, 0x78, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x61, 0x77, 0x73, 0x44, 0x78, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2b,
	0x0a, 0x12, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x62, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x45,
	0x62, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x25, 0x61,
	0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x20, 0x61, 0x77, 0x73, 0x45,
	0x63, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x51, 0x0a, 0x26,
	0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21, 0x61, 0x77,
	0x73, 0x45, 0x63, 0x32, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x3c, 0x0a, 0x1b, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x61, 0x77, 0x73, 0x45, 0x63, 0x32, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x5c, 0x0a,
	0x2c, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x26, 0x61, 0x77, 0x73, 0x45, 0x63, 0x32, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x27, 0x61,
	0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21, 0x61, 0x77,
	0x73, 0x45, 0x63, 0x32, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x4d, 0x0a, 0x24, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1f, 0x61,
	0x77, 0x73, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1e,
	0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x77, 0x73, 0x45, 0x69, 0x70, 0x49, 0x64, 0x73, 0x12, 0x27,
	0x0a, 0x10, 0x61, 0x77, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x77, 0x73, 0x46, 0x6c, 0x6f,
	0x77, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x77, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x77, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13,
	0x61, 0x77, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x4e, 0x61,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61,
	0x77, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x41, 0x63, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x77,
	0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61,
	0x77, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x64, 0x73,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x52, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x77, 0x73, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x61,
	0x77, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x77, 0x73, 0x53,
	0x70, 0x6f, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x61, 0x77, 0x73, 0x53, 0x70,
	0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77,
	0x73, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x77,
	0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x61,
	0x77, 0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x18, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x61,
	0x77, 0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61,
	0x77, 0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x20, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x50, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x33, 0x0a, 0x16, 0x61, 0x77, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x61, 0x77, 0x73, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x56, 0x70, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0xfc, 0x0e, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x24, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x6e, 0x73, 0x12, 0x37,
	0x0a, 0x18, 0x61, 0x77, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x15, 0x61, 0x77, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x77, 0x73, 0x5f, 0x64,
	0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x77, 0x73, 0x44, 0x78, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x61, 0x77,
	0x73, 0x5f, 0x64, 0x78, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x18, 0x61, 0x77, 0x73, 0x44, 0x78, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x77,
	0x73, 0x5f, 0x65, 0x62, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x45, 0x62, 0x73, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x25, 0x61, 0x77, 0x73, 0x5f, 0x65,
	0x63, 0x32, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x20, 0x61, 0x77, 0x73, 0x45, 0x63, 0x32, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x51, 0x0a, 0x26, 0x61, 0x77, 0x73, 0x5f,
	0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21, 0x61, 0x77, 0x73, 0x45, 0x63, 0x32,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x61,
	0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x17, 0x61, 0x77, 0x73, 0x45, 0x63, 0x32, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x2c, 0x61, 0x77, 0x73,
	0x5f, 0x65, 0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x26, 0x61, 0x77, 0x73, 0x45, 0x63, 0x32, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x27, 0x61, 0x77, 0x73, 0x5f, 0x65,
	0x63, 0x32, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21, 0x61, 0x77, 0x73, 0x45, 0x63, 0x32,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x24, 0x61,
	0x77, 0x73, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1f, 0x61, 0x77, 0x73, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x77,
	0x73, 0x5f, 0x65, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x77, 0x73, 0x45, 0x69, 0x70, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x61, 0x77,
	0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67,
	0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x77, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x64, 0x73, 0x12,
	0x37, 0x0a, 0x18, 0x61, 0x77, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x15, 0x61, 0x77, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f,
	0x6e, 0x61, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x4e, 0x61, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x41, 0x63, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x77, 0x73, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x77, 0x73, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x77, 0x73, 0x52, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x77, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x33, 0x0a, 0x16, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x61, 0x77, 0x73, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x77, 0x73, 0x53, 0x70, 0x6f, 0x74, 0x46,
	0x6c, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x40,
	0x0a, 0x1d, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x61, 0x77, 0x73, 0x53, 0x70, 0x6f, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x77, 0x73, 0x5f, 0x76, 0x70,
	0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1d,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x61, 0x77, 0x73, 0x5f, 0x76,
	0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x61,
	0x77, 0x73, 0x56, 0x70, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x76,
	0x70, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x77,
	0x73, 0x56, 0x70, 0x63, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x77, 0x73, 0x5f, 0x76,
	0x70, 0x63, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x1a, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x61,
	0x77, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x77, 0x73,
	0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x77, 0x73, 0x56, 0x70, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x73, 0x22,
	0xb6, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xc0, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x25, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa2, 0x02, 0x0a, 0x26, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xe6,
	0x01, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe7, 0x01, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x6f, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x61, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65,
	0x41, 0x72, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xcc, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22,
	0x7a, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xce, 0x01, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x33,
	0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x22, 0x76,
	0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x33, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x33, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x22, 0x30, 0x0a, 0x1e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x77,
	0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x1f, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x33,
	0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x22, 0x6f,
	0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0x76, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77,
	0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x33, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x33, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x22, 0x32, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x28,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xa3, 0x01, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d,
	0x0a, 0x1b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x26, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xa1, 0x01, 0x0a, 0x27, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x1b,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xa3, 0x01,
	0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xd0, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x2e, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xba, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x81,
	0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0xbc, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x30, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x3e, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xb4, 0x04, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x77, 0x73, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x08,
	0x61, 0x77, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x73, 0x52, 0x07, 0x61, 0x77, 0x73,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x77, 0x73, 0x56, 0x70,
	0x63, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x09, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x5f, 0x76, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x56, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x04, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x61, 0x77, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x77, 0x73, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x07, 0x61, 0x77, 0x73, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0b,
	0x61, 0x77, 0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x09, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x56, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x27, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc3, 0x04, 0x0a, 0x16, 0x52, 0x65,
	0x61, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x61, 0x77, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x77, 0x73, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x07, 0x61, 0x77, 0x73, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x61,
	0x77, 0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x09, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x56, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x81, 0x05, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77,
	0x73, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x61, 0x77,
	0x73, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69,
	0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x73, 0x52, 0x07, 0x61, 0x77, 0x73, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x49,
	0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x14, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6c,
	0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x09, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x76,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x56, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x04, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x77, 0x73, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x77, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77, 0x73,
	0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x46, 0x0a, 0x08, 0x61, 0x77, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x73, 0x52, 0x07,
	0x61, 0x77, 0x73, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x76,
	0x70, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x77,
	0x73, 0x56, 0x70, 0x63, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x0a,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x09, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x5f, 0x76, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x56, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x2c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x6d,
	0x69, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x29,
	0x52, 0x65, 0x61, 0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x2a, 0x52, 0x65,
	0x61, 0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x01, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xec,
	0x01, 0x0a, 0x2c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6c, 0x6c, 0x75,
	0x6d, 0x69, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a,
	0x2b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7b, 0x0a, 0x0f,
	0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x6f,
	0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x77, 0x73, 0x5f, 0x74, 0x61, 0x67,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x77, 0x73,
	0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3c, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6c,
	0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xd6, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x54,
	0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x61, 0x77, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x54,
	0x61, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x52, 0x65,
	0x61, 0x64, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x67, 0x54,
	0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x61, 0x77, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x54,
	0x61, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x77, 0x73, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x77,
	0x73, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3c,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69,
	0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0xd6, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x61, 0x77, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x54, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x54, 0x61, 0x67,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67,
	0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x32, 0xc6, 0x2a, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x69, 0x6c, 0x6c,
	0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x74, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x69,
	0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x9e, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x77, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x77, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77,
	0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x9e, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x3d, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3e, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x76, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x3d, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x77, 0x73,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xa4, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x2e, 0x69,
	0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e,
	0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x9e, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x3d, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3e, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0xa4, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x2e, 0x69, 0x6c, 0x6c,
	0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x77, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6c, 0x6c, 0x75,
	0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0e,
	0x52, 0x65, 0x61, 0x64, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e,
	0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x77, 0x73,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x77, 0x73,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x77, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x69,
	0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x77, 0x73,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x92, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x39, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73,
	0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x17,
	0x52, 0x65, 0x61, 0x64, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53,
	0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x37, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67,
	0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73,
	0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x39, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77,
	0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53,
	0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6e, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77,
	0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x39, 0x2e, 0x69,
	0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x77, 0x73,
	0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0xaa, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa4, 0x01, 0x0a,
	0x1f, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f,
	0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3f, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x40, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x2e, 0x69, 0x6c, 0x6c, 0x75,
	0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x69,
	0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7e, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x8c, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x69,
	0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x86, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x69, 0x6c, 0x6c, 0x75,
	0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x77, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6c, 0x6c, 0x75,
	0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0e,
	0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e,
	0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x77, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x69,
	0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xb3, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x44, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xad, 0x01, 0x0a,
	0x22, 0x52, 0x65, 0x61, 0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x42, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb3, 0x01, 0x0a,
	0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x44, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x69, 0x6c,
	0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x38, 0x53,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x44, 0x2e, 0x69, 0x6c,
	0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x77, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x30, 0x2e,
	0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x71, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x2e, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x30, 0x2e, 0x69, 0x6c, 0x6c, 0x75,
	0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6c,
	0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x54,
	0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x30, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x89, 0x02, 0x0a,
	0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2f,
	0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2d, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6c, 0x6c, 0x75, 0x6d,
	0x69, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x49, 0x43,
	0x43, 0xaa, 0x02, 0x17, 0x49, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x17, 0x49, 0x6c,
	0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x23, 0x49, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x5c,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x49, 0x6c,
	0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_illumio_cloud_config_v1_config_proto_rawDescOnce sync.Once
	file_illumio_cloud_config_v1_config_proto_rawDescData []byte
)

func file_illumio_cloud_config_v1_config_proto_rawDescGZIP() []byte {
	file_illumio_cloud_config_v1_config_proto_rawDescOnce.Do(func() {
		file_illumio_cloud_config_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_illumio_cloud_config_v1_config_proto_rawDesc), len(file_illumio_cloud_config_v1_config_proto_rawDesc)))
	})
	return file_illumio_cloud_config_v1_config_proto_rawDescData
}

var file_illumio_cloud_config_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 73)
var file_illumio_cloud_config_v1_config_proto_goTypes = []any{
	(*CreateApplicationRequest)(nil),                     // 0: illumio.cloud.config.v1.CreateApplicationRequest
	(*CreateApplicationResponse)(nil),                    // 1: illumio.cloud.config.v1.CreateApplicationResponse
	(*ReadApplicationRequest)(nil),                       // 2: illumio.cloud.config.v1.ReadApplicationRequest
	(*ReadApplicationResponse)(nil),                      // 3: illumio.cloud.config.v1.ReadApplicationResponse
	(*UpdateApplicationRequest)(nil),                     // 4: illumio.cloud.config.v1.UpdateApplicationRequest
	(*UpdateApplicationResponse)(nil),                    // 5: illumio.cloud.config.v1.UpdateApplicationResponse
	(*DeleteApplicationRequest)(nil),                     // 6: illumio.cloud.config.v1.DeleteApplicationRequest
	(*CreateApplicationAwsResourcesRequest)(nil),         // 7: illumio.cloud.config.v1.CreateApplicationAwsResourcesRequest
	(*CreateApplicationAwsResourcesResponse)(nil),        // 8: illumio.cloud.config.v1.CreateApplicationAwsResourcesResponse
	(*ReadApplicationAwsResourcesRequest)(nil),           // 9: illumio.cloud.config.v1.ReadApplicationAwsResourcesRequest
	(*ReadApplicationAwsResourcesResponse)(nil),          // 10: illumio.cloud.config.v1.ReadApplicationAwsResourcesResponse
	(*UpdateApplicationAwsResourcesRequest)(nil),         // 11: illumio.cloud.config.v1.UpdateApplicationAwsResourcesRequest
	(*UpdateApplicationAwsResourcesResponse)(nil),        // 12: illumio.cloud.config.v1.UpdateApplicationAwsResourcesResponse
	(*DeleteApplicationAwsResourcesRequest)(nil),         // 13: illumio.cloud.config.v1.DeleteApplicationAwsResourcesRequest
	(*CreateApplicationAzureResourcesRequest)(nil),       // 14: illumio.cloud.config.v1.CreateApplicationAzureResourcesRequest
	(*CreateApplicationAzureResourcesResponse)(nil),      // 15: illumio.cloud.config.v1.CreateApplicationAzureResourcesResponse
	(*ReadApplicationAzureResourcesRequest)(nil),         // 16: illumio.cloud.config.v1.ReadApplicationAzureResourcesRequest
	(*ReadApplicationAzureResourcesResponse)(nil),        // 17: illumio.cloud.config.v1.ReadApplicationAzureResourcesResponse
	(*UpdateApplicationAzureResourcesRequest)(nil),       // 18: illumio.cloud.config.v1.UpdateApplicationAzureResourcesRequest
	(*UpdateApplicationAzureResourcesResponse)(nil),      // 19: illumio.cloud.config.v1.UpdateApplicationAzureResourcesResponse
	(*DeleteApplicationAzureResourcesRequest)(nil),       // 20: illumio.cloud.config.v1.DeleteApplicationAzureResourcesRequest
	(*CreateAwsAccountRequest)(nil),                      // 21: illumio.cloud.config.v1.CreateAwsAccountRequest
	(*CreateAwsAccountResponse)(nil),                     // 22: illumio.cloud.config.v1.CreateAwsAccountResponse
	(*ReadAwsAccountRequest)(nil),                        // 23: illumio.cloud.config.v1.ReadAwsAccountRequest
	(*ReadAwsAccountResponse)(nil),                       // 24: illumio.cloud.config.v1.ReadAwsAccountResponse
	(*UpdateAwsAccountRequest)(nil),                      // 25: illumio.cloud.config.v1.UpdateAwsAccountRequest
	(*UpdateAwsAccountResponse)(nil),                     // 26: illumio.cloud.config.v1.UpdateAwsAccountResponse
	(*DeleteAwsAccountRequest)(nil),                      // 27: illumio.cloud.config.v1.DeleteAwsAccountRequest
	(*CreateAwsFlowLogsS3BucketRequest)(nil),             // 28: illumio.cloud.config.v1.CreateAwsFlowLogsS3BucketRequest
	(*CreateAwsFlowLogsS3BucketResponse)(nil),            // 29: illumio.cloud.config.v1.CreateAwsFlowLogsS3BucketResponse
	(*ReadAwsFlowLogsS3BucketRequest)(nil),               // 30: illumio.cloud.config.v1.ReadAwsFlowLogsS3BucketRequest
	(*ReadAwsFlowLogsS3BucketResponse)(nil),              // 31: illumio.cloud.config.v1.ReadAwsFlowLogsS3BucketResponse
	(*UpdateAwsFlowLogsS3BucketRequest)(nil),             // 32: illumio.cloud.config.v1.UpdateAwsFlowLogsS3BucketRequest
	(*UpdateAwsFlowLogsS3BucketResponse)(nil),            // 33: illumio.cloud.config.v1.UpdateAwsFlowLogsS3BucketResponse
	(*DeleteAwsFlowLogsS3BucketRequest)(nil),             // 34: illumio.cloud.config.v1.DeleteAwsFlowLogsS3BucketRequest
	(*CreateAzureFlowLogsStorageAccountRequest)(nil),     // 35: illumio.cloud.config.v1.CreateAzureFlowLogsStorageAccountRequest
	(*CreateAzureFlowLogsStorageAccountResponse)(nil),    // 36: illumio.cloud.config.v1.CreateAzureFlowLogsStorageAccountResponse
	(*ReadAzureFlowLogsStorageAccountRequest)(nil),       // 37: illumio.cloud.config.v1.ReadAzureFlowLogsStorageAccountRequest
	(*ReadAzureFlowLogsStorageAccountResponse)(nil),      // 38: illumio.cloud.config.v1.ReadAzureFlowLogsStorageAccountResponse
	(*UpdateAzureFlowLogsStorageAccountRequest)(nil),     // 39: illumio.cloud.config.v1.UpdateAzureFlowLogsStorageAccountRequest
	(*UpdateAzureFlowLogsStorageAccountResponse)(nil),    // 40: illumio.cloud.config.v1.UpdateAzureFlowLogsStorageAccountResponse
	(*DeleteAzureFlowLogsStorageAccountRequest)(nil),     // 41: illumio.cloud.config.v1.DeleteAzureFlowLogsStorageAccountRequest
	(*CreateAzureSubscriptionRequest)(nil),               // 42: illumio.cloud.config.v1.CreateAzureSubscriptionRequest
	(*CreateAzureSubscriptionResponse)(nil),              // 43: illumio.cloud.config.v1.CreateAzureSubscriptionResponse
	(*ReadAzureSubscriptionRequest)(nil),                 // 44: illumio.cloud.config.v1.ReadAzureSubscriptionRequest
	(*ReadAzureSubscriptionResponse)(nil),                // 45: illumio.cloud.config.v1.ReadAzureSubscriptionResponse
	(*UpdateAzureSubscriptionRequest)(nil),               // 46: illumio.cloud.config.v1.UpdateAzureSubscriptionRequest
	(*UpdateAzureSubscriptionResponse)(nil),              // 47: illumio.cloud.config.v1.UpdateAzureSubscriptionResponse
	(*DeleteAzureSubscriptionRequest)(nil),               // 48: illumio.cloud.config.v1.DeleteAzureSubscriptionRequest
	(*Deployment_AwsTags)(nil),                           // 49: illumio.cloud.config.v1.Deployment_AwsTags
	(*Deployment_AzureTags)(nil),                         // 50: illumio.cloud.config.v1.Deployment_AzureTags
	(*CreateDeploymentRequest)(nil),                      // 51: illumio.cloud.config.v1.CreateDeploymentRequest
	(*CreateDeploymentResponse)(nil),                     // 52: illumio.cloud.config.v1.CreateDeploymentResponse
	(*ReadDeploymentRequest)(nil),                        // 53: illumio.cloud.config.v1.ReadDeploymentRequest
	(*ReadDeploymentResponse)(nil),                       // 54: illumio.cloud.config.v1.ReadDeploymentResponse
	(*UpdateDeploymentRequest)(nil),                      // 55: illumio.cloud.config.v1.UpdateDeploymentRequest
	(*UpdateDeploymentResponse)(nil),                     // 56: illumio.cloud.config.v1.UpdateDeploymentResponse
	(*DeleteDeploymentRequest)(nil),                      // 57: illumio.cloud.config.v1.DeleteDeploymentRequest
	(*CreateK8SClusterOnboardingCredentialRequest)(nil),  // 58: illumio.cloud.config.v1.CreateK8SClusterOnboardingCredentialRequest
	(*CreateK8SClusterOnboardingCredentialResponse)(nil), // 59: illumio.cloud.config.v1.CreateK8SClusterOnboardingCredentialResponse
	(*ReadK8SClusterOnboardingCredentialRequest)(nil),    // 60: illumio.cloud.config.v1.ReadK8SClusterOnboardingCredentialRequest
	(*ReadK8SClusterOnboardingCredentialResponse)(nil),   // 61: illumio.cloud.config.v1.ReadK8SClusterOnboardingCredentialResponse
	(*UpdateK8SClusterOnboardingCredentialRequest)(nil),  // 62: illumio.cloud.config.v1.UpdateK8SClusterOnboardingCredentialRequest
	(*UpdateK8SClusterOnboardingCredentialResponse)(nil), // 63: illumio.cloud.config.v1.UpdateK8SClusterOnboardingCredentialResponse
	(*DeleteK8SClusterOnboardingCredentialRequest)(nil),  // 64: illumio.cloud.config.v1.DeleteK8SClusterOnboardingCredentialRequest
	(*TagToLabel_Icon)(nil),                              // 65: illumio.cloud.config.v1.TagToLabel_Icon
	(*CreateTagToLabelRequest)(nil),                      // 66: illumio.cloud.config.v1.CreateTagToLabelRequest
	(*CreateTagToLabelResponse)(nil),                     // 67: illumio.cloud.config.v1.CreateTagToLabelResponse
	(*ReadTagToLabelRequest)(nil),                        // 68: illumio.cloud.config.v1.ReadTagToLabelRequest
	(*ReadTagToLabelResponse)(nil),                       // 69: illumio.cloud.config.v1.ReadTagToLabelResponse
	(*UpdateTagToLabelRequest)(nil),                      // 70: illumio.cloud.config.v1.UpdateTagToLabelRequest
	(*UpdateTagToLabelResponse)(nil),                     // 71: illumio.cloud.config.v1.UpdateTagToLabelResponse
	(*DeleteTagToLabelRequest)(nil),                      // 72: illumio.cloud.config.v1.DeleteTagToLabelRequest
	(*fieldmaskpb.FieldMask)(nil),                        // 73: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),                                // 74: google.protobuf.Empty
}
var file_illumio_cloud_config_v1_config_proto_depIdxs = []int32{
	73, // 0: illumio.cloud.config.v1.UpdateApplicationRequest.update_mask:type_name -> google.protobuf.FieldMask
	73, // 1: illumio.cloud.config.v1.UpdateApplicationAwsResourcesRequest.update_mask:type_name -> google.protobuf.FieldMask
	73, // 2: illumio.cloud.config.v1.UpdateApplicationAzureResourcesRequest.update_mask:type_name -> google.protobuf.FieldMask
	73, // 3: illumio.cloud.config.v1.UpdateAwsAccountRequest.update_mask:type_name -> google.protobuf.FieldMask
	73, // 4: illumio.cloud.config.v1.UpdateAwsFlowLogsS3BucketRequest.update_mask:type_name -> google.protobuf.FieldMask
	73, // 5: illumio.cloud.config.v1.UpdateAzureFlowLogsStorageAccountRequest.update_mask:type_name -> google.protobuf.FieldMask
	73, // 6: illumio.cloud.config.v1.UpdateAzureSubscriptionRequest.update_mask:type_name -> google.protobuf.FieldMask
	49, // 7: illumio.cloud.config.v1.CreateDeploymentRequest.aws_tags:type_name -> illumio.cloud.config.v1.Deployment_AwsTags
	50, // 8: illumio.cloud.config.v1.CreateDeploymentRequest.azure_tags:type_name -> illumio.cloud.config.v1.Deployment_AzureTags
	49, // 9: illumio.cloud.config.v1.CreateDeploymentResponse.aws_tags:type_name -> illumio.cloud.config.v1.Deployment_AwsTags
	50, // 10: illumio.cloud.config.v1.CreateDeploymentResponse.azure_tags:type_name -> illumio.cloud.config.v1.Deployment_AzureTags
	49, // 11: illumio.cloud.config.v1.ReadDeploymentResponse.aws_tags:type_name -> illumio.cloud.config.v1.Deployment_AwsTags
	50, // 12: illumio.cloud.config.v1.ReadDeploymentResponse.azure_tags:type_name -> illumio.cloud.config.v1.Deployment_AzureTags
	49, // 13: illumio.cloud.config.v1.UpdateDeploymentRequest.aws_tags:type_name -> illumio.cloud.config.v1.Deployment_AwsTags
	50, // 14: illumio.cloud.config.v1.UpdateDeploymentRequest.azure_tags:type_name -> illumio.cloud.config.v1.Deployment_AzureTags
	73, // 15: illumio.cloud.config.v1.UpdateDeploymentRequest.update_mask:type_name -> google.protobuf.FieldMask
	49, // 16: illumio.cloud.config.v1.UpdateDeploymentResponse.aws_tags:type_name -> illumio.cloud.config.v1.Deployment_AwsTags
	50, // 17: illumio.cloud.config.v1.UpdateDeploymentResponse.azure_tags:type_name -> illumio.cloud.config.v1.Deployment_AzureTags
	73, // 18: illumio.cloud.config.v1.UpdateK8SClusterOnboardingCredentialRequest.update_mask:type_name -> google.protobuf.FieldMask
	65, // 19: illumio.cloud.config.v1.CreateTagToLabelRequest.icon:type_name -> illumio.cloud.config.v1.TagToLabel_Icon
	65, // 20: illumio.cloud.config.v1.CreateTagToLabelResponse.icon:type_name -> illumio.cloud.config.v1.TagToLabel_Icon
	65, // 21: illumio.cloud.config.v1.ReadTagToLabelResponse.icon:type_name -> illumio.cloud.config.v1.TagToLabel_Icon
	65, // 22: illumio.cloud.config.v1.UpdateTagToLabelRequest.icon:type_name -> illumio.cloud.config.v1.TagToLabel_Icon
	73, // 23: illumio.cloud.config.v1.UpdateTagToLabelRequest.update_mask:type_name -> google.protobuf.FieldMask
	65, // 24: illumio.cloud.config.v1.UpdateTagToLabelResponse.icon:type_name -> illumio.cloud.config.v1.TagToLabel_Icon
	0,  // 25: illumio.cloud.config.v1.ConfigService.CreateApplication:input_type -> illumio.cloud.config.v1.CreateApplicationRequest
	2,  // 26: illumio.cloud.config.v1.ConfigService.ReadApplication:input_type -> illumio.cloud.config.v1.ReadApplicationRequest
	4,  // 27: illumio.cloud.config.v1.ConfigService.UpdateApplication:input_type -> illumio.cloud.config.v1.UpdateApplicationRequest
	6,  // 28: illumio.cloud.config.v1.ConfigService.DeleteApplication:input_type -> illumio.cloud.config.v1.DeleteApplicationRequest
	7,  // 29: illumio.cloud.config.v1.ConfigService.CreateApplicationAwsResources:input_type -> illumio.cloud.config.v1.CreateApplicationAwsResourcesRequest
	9,  // 30: illumio.cloud.config.v1.ConfigService.ReadApplicationAwsResources:input_type -> illumio.cloud.config.v1.ReadApplicationAwsResourcesRequest
	11, // 31: illumio.cloud.config.v1.ConfigService.UpdateApplicationAwsResources:input_type -> illumio.cloud.config.v1.UpdateApplicationAwsResourcesRequest
	13, // 32: illumio.cloud.config.v1.ConfigService.DeleteApplicationAwsResources:input_type -> illumio.cloud.config.v1.DeleteApplicationAwsResourcesRequest
	14, // 33: illumio.cloud.config.v1.ConfigService.CreateApplicationAzureResources:input_type -> illumio.cloud.config.v1.CreateApplicationAzureResourcesRequest
	16, // 34: illumio.cloud.config.v1.ConfigService.ReadApplicationAzureResources:input_type -> illumio.cloud.config.v1.ReadApplicationAzureResourcesRequest
	18, // 35: illumio.cloud.config.v1.ConfigService.UpdateApplicationAzureResources:input_type -> illumio.cloud.config.v1.UpdateApplicationAzureResourcesRequest
	20, // 36: illumio.cloud.config.v1.ConfigService.DeleteApplicationAzureResources:input_type -> illumio.cloud.config.v1.DeleteApplicationAzureResourcesRequest
	21, // 37: illumio.cloud.config.v1.ConfigService.CreateAwsAccount:input_type -> illumio.cloud.config.v1.CreateAwsAccountRequest
	23, // 38: illumio.cloud.config.v1.ConfigService.ReadAwsAccount:input_type -> illumio.cloud.config.v1.ReadAwsAccountRequest
	25, // 39: illumio.cloud.config.v1.ConfigService.UpdateAwsAccount:input_type -> illumio.cloud.config.v1.UpdateAwsAccountRequest
	27, // 40: illumio.cloud.config.v1.ConfigService.DeleteAwsAccount:input_type -> illumio.cloud.config.v1.DeleteAwsAccountRequest
	28, // 41: illumio.cloud.config.v1.ConfigService.CreateAwsFlowLogsS3Bucket:input_type -> illumio.cloud.config.v1.CreateAwsFlowLogsS3BucketRequest
	30, // 42: illumio.cloud.config.v1.ConfigService.ReadAwsFlowLogsS3Bucket:input_type -> illumio.cloud.config.v1.ReadAwsFlowLogsS3BucketRequest
	32, // 43: illumio.cloud.config.v1.ConfigService.UpdateAwsFlowLogsS3Bucket:input_type -> illumio.cloud.config.v1.UpdateAwsFlowLogsS3BucketRequest
	34, // 44: illumio.cloud.config.v1.ConfigService.DeleteAwsFlowLogsS3Bucket:input_type -> illumio.cloud.config.v1.DeleteAwsFlowLogsS3BucketRequest
	35, // 45: illumio.cloud.config.v1.ConfigService.CreateAzureFlowLogsStorageAccount:input_type -> illumio.cloud.config.v1.CreateAzureFlowLogsStorageAccountRequest
	37, // 46: illumio.cloud.config.v1.ConfigService.ReadAzureFlowLogsStorageAccount:input_type -> illumio.cloud.config.v1.ReadAzureFlowLogsStorageAccountRequest
	39, // 47: illumio.cloud.config.v1.ConfigService.UpdateAzureFlowLogsStorageAccount:input_type -> illumio.cloud.config.v1.UpdateAzureFlowLogsStorageAccountRequest
	41, // 48: illumio.cloud.config.v1.ConfigService.DeleteAzureFlowLogsStorageAccount:input_type -> illumio.cloud.config.v1.DeleteAzureFlowLogsStorageAccountRequest
	42, // 49: illumio.cloud.config.v1.ConfigService.CreateAzureSubscription:input_type -> illumio.cloud.config.v1.CreateAzureSubscriptionRequest
	44, // 50: illumio.cloud.config.v1.ConfigService.ReadAzureSubscription:input_type -> illumio.cloud.config.v1.ReadAzureSubscriptionRequest
	46, // 51: illumio.cloud.config.v1.ConfigService.UpdateAzureSubscription:input_type -> illumio.cloud.config.v1.UpdateAzureSubscriptionRequest
	48, // 52: illumio.cloud.config.v1.ConfigService.DeleteAzureSubscription:input_type -> illumio.cloud.config.v1.DeleteAzureSubscriptionRequest
	51, // 53: illumio.cloud.config.v1.ConfigService.CreateDeployment:input_type -> illumio.cloud.config.v1.CreateDeploymentRequest
	53, // 54: illumio.cloud.config.v1.ConfigService.ReadDeployment:input_type -> illumio.cloud.config.v1.ReadDeploymentRequest
	55, // 55: illumio.cloud.config.v1.ConfigService.UpdateDeployment:input_type -> illumio.cloud.config.v1.UpdateDeploymentRequest
	57, // 56: illumio.cloud.config.v1.ConfigService.DeleteDeployment:input_type -> illumio.cloud.config.v1.DeleteDeploymentRequest
	58, // 57: illumio.cloud.config.v1.ConfigService.CreateK8SClusterOnboardingCredential:input_type -> illumio.cloud.config.v1.CreateK8SClusterOnboardingCredentialRequest
	60, // 58: illumio.cloud.config.v1.ConfigService.ReadK8SClusterOnboardingCredential:input_type -> illumio.cloud.config.v1.ReadK8SClusterOnboardingCredentialRequest
	62, // 59: illumio.cloud.config.v1.ConfigService.UpdateK8SClusterOnboardingCredential:input_type -> illumio.cloud.config.v1.UpdateK8SClusterOnboardingCredentialRequest
	64, // 60: illumio.cloud.config.v1.ConfigService.DeleteK8SClusterOnboardingCredential:input_type -> illumio.cloud.config.v1.DeleteK8SClusterOnboardingCredentialRequest
	66, // 61: illumio.cloud.config.v1.ConfigService.CreateTagToLabel:input_type -> illumio.cloud.config.v1.CreateTagToLabelRequest
	68, // 62: illumio.cloud.config.v1.ConfigService.ReadTagToLabel:input_type -> illumio.cloud.config.v1.ReadTagToLabelRequest
	70, // 63: illumio.cloud.config.v1.ConfigService.UpdateTagToLabel:input_type -> illumio.cloud.config.v1.UpdateTagToLabelRequest
	72, // 64: illumio.cloud.config.v1.ConfigService.DeleteTagToLabel:input_type -> illumio.cloud.config.v1.DeleteTagToLabelRequest
	1,  // 65: illumio.cloud.config.v1.ConfigService.CreateApplication:output_type -> illumio.cloud.config.v1.CreateApplicationResponse
	3,  // 66: illumio.cloud.config.v1.ConfigService.ReadApplication:output_type -> illumio.cloud.config.v1.ReadApplicationResponse
	5,  // 67: illumio.cloud.config.v1.ConfigService.UpdateApplication:output_type -> illumio.cloud.config.v1.UpdateApplicationResponse
	74, // 68: illumio.cloud.config.v1.ConfigService.DeleteApplication:output_type -> google.protobuf.Empty
	8,  // 69: illumio.cloud.config.v1.ConfigService.CreateApplicationAwsResources:output_type -> illumio.cloud.config.v1.CreateApplicationAwsResourcesResponse
	10, // 70: illumio.cloud.config.v1.ConfigService.ReadApplicationAwsResources:output_type -> illumio.cloud.config.v1.ReadApplicationAwsResourcesResponse
	12, // 71: illumio.cloud.config.v1.ConfigService.UpdateApplicationAwsResources:output_type -> illumio.cloud.config.v1.UpdateApplicationAwsResourcesResponse
	74, // 72: illumio.cloud.config.v1.ConfigService.DeleteApplicationAwsResources:output_type -> google.protobuf.Empty
	15, // 73: illumio.cloud.config.v1.ConfigService.CreateApplicationAzureResources:output_type -> illumio.cloud.config.v1.CreateApplicationAzureResourcesResponse
	17, // 74: illumio.cloud.config.v1.ConfigService.ReadApplicationAzureResources:output_type -> illumio.cloud.config.v1.ReadApplicationAzureResourcesResponse
	19, // 75: illumio.cloud.config.v1.ConfigService.UpdateApplicationAzureResources:output_type -> illumio.cloud.config.v1.UpdateApplicationAzureResourcesResponse
	74, // 76: illumio.cloud.config.v1.ConfigService.DeleteApplicationAzureResources:output_type -> google.protobuf.Empty
	22, // 77: illumio.cloud.config.v1.ConfigService.CreateAwsAccount:output_type -> illumio.cloud.config.v1.CreateAwsAccountResponse
	24, // 78: illumio.cloud.config.v1.ConfigService.ReadAwsAccount:output_type -> illumio.cloud.config.v1.ReadAwsAccountResponse
	26, // 79: illumio.cloud.config.v1.ConfigService.UpdateAwsAccount:output_type -> illumio.cloud.config.v1.UpdateAwsAccountResponse
	74, // 80: illumio.cloud.config.v1.ConfigService.DeleteAwsAccount:output_type -> google.protobuf.Empty
	29, // 81: illumio.cloud.config.v1.ConfigService.CreateAwsFlowLogsS3Bucket:output_type -> illumio.cloud.config.v1.CreateAwsFlowLogsS3BucketResponse
	31, // 82: illumio.cloud.config.v1.ConfigService.ReadAwsFlowLogsS3Bucket:output_type -> illumio.cloud.config.v1.ReadAwsFlowLogsS3BucketResponse
	33, // 83: illumio.cloud.config.v1.ConfigService.UpdateAwsFlowLogsS3Bucket:output_type -> illumio.cloud.config.v1.UpdateAwsFlowLogsS3BucketResponse
	74, // 84: illumio.cloud.config.v1.ConfigService.DeleteAwsFlowLogsS3Bucket:output_type -> google.protobuf.Empty
	36, // 85: illumio.cloud.config.v1.ConfigService.CreateAzureFlowLogsStorageAccount:output_type -> illumio.cloud.config.v1.CreateAzureFlowLogsStorageAccountResponse
	38, // 86: illumio.cloud.config.v1.ConfigService.ReadAzureFlowLogsStorageAccount:output_type -> illumio.cloud.config.v1.ReadAzureFlowLogsStorageAccountResponse
	40, // 87: illumio.cloud.config.v1.ConfigService.UpdateAzureFlowLogsStorageAccount:output_type -> illumio.cloud.config.v1.UpdateAzureFlowLogsStorageAccountResponse
	74, // 88: illumio.cloud.config.v1.ConfigService.DeleteAzureFlowLogsStorageAccount:output_type -> google.protobuf.Empty
	43, // 89: illumio.cloud.config.v1.ConfigService.CreateAzureSubscription:output_type -> illumio.cloud.config.v1.CreateAzureSubscriptionResponse
	45, // 90: illumio.cloud.config.v1.ConfigService.ReadAzureSubscription:output_type -> illumio.cloud.config.v1.ReadAzureSubscriptionResponse
	47, // 91: illumio.cloud.config.v1.ConfigService.UpdateAzureSubscription:output_type -> illumio.cloud.config.v1.UpdateAzureSubscriptionResponse
	74, // 92: illumio.cloud.config.v1.ConfigService.DeleteAzureSubscription:output_type -> google.protobuf.Empty
	52, // 93: illumio.cloud.config.v1.ConfigService.CreateDeployment:output_type -> illumio.cloud.config.v1.CreateDeploymentResponse
	54, // 94: illumio.cloud.config.v1.ConfigService.ReadDeployment:output_type -> illumio.cloud.config.v1.ReadDeploymentResponse
	56, // 95: illumio.cloud.config.v1.ConfigService.UpdateDeployment:output_type -> illumio.cloud.config.v1.UpdateDeploymentResponse
	74, // 96: illumio.cloud.config.v1.ConfigService.DeleteDeployment:output_type -> google.protobuf.Empty
	59, // 97: illumio.cloud.config.v1.ConfigService.CreateK8SClusterOnboardingCredential:output_type -> illumio.cloud.config.v1.CreateK8SClusterOnboardingCredentialResponse
	61, // 98: illumio.cloud.config.v1.ConfigService.ReadK8SClusterOnboardingCredential:output_type -> illumio.cloud.config.v1.ReadK8SClusterOnboardingCredentialResponse
	63, // 99: illumio.cloud.config.v1.ConfigService.UpdateK8SClusterOnboardingCredential:output_type -> illumio.cloud.config.v1.UpdateK8SClusterOnboardingCredentialResponse
	74, // 100: illumio.cloud.config.v1.ConfigService.DeleteK8SClusterOnboardingCredential:output_type -> google.protobuf.Empty
	67, // 101: illumio.cloud.config.v1.ConfigService.CreateTagToLabel:output_type -> illumio.cloud.config.v1.CreateTagToLabelResponse
	69, // 102: illumio.cloud.config.v1.ConfigService.ReadTagToLabel:output_type -> illumio.cloud.config.v1.ReadTagToLabelResponse
	71, // 103: illumio.cloud.config.v1.ConfigService.UpdateTagToLabel:output_type -> illumio.cloud.config.v1.UpdateTagToLabelResponse
	74, // 104: illumio.cloud.config.v1.ConfigService.DeleteTagToLabel:output_type -> google.protobuf.Empty
	65, // [65:105] is the sub-list for method output_type
	25, // [25:65] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_illumio_cloud_config_v1_config_proto_init() }
func file_illumio_cloud_config_v1_config_proto_init() {
	if File_illumio_cloud_config_v1_config_proto != nil {
		return
	}
	file_illumio_cloud_config_v1_config_proto_msgTypes[0].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[1].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[3].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[4].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[5].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[21].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[22].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[24].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[26].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[51].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[52].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[54].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[55].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[56].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[58].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[59].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[61].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[62].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[63].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_illumio_cloud_config_v1_config_proto_rawDesc), len(file_illumio_cloud_config_v1_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   73,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_illumio_cloud_config_v1_config_proto_goTypes,
		DependencyIndexes: file_illumio_cloud_config_v1_config_proto_depIdxs,
		MessageInfos:      file_illumio_cloud_config_v1_config_proto_msgTypes,
	}.Build()
	File_illumio_cloud_config_v1_config_proto = out.File
	file_illumio_cloud_config_v1_config_proto_goTypes = nil
	file_illumio_cloud_config_v1_config_proto_depIdxs = nil
}
