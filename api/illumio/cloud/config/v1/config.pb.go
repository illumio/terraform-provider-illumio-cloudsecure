// Copyright (c) Illumio, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: illumio/cloud/config/v1/config.proto

package configv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateAwsAccountRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AccountId      string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Mode           string                 `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationId *string                `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3,oneof" json:"organization_id,omitempty"`
	RoleArn        string                 `protobuf:"bytes,8,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty"`
	RoleExternalId string                 `protobuf:"bytes,9,opt,name=role_external_id,json=roleExternalId,proto3" json:"role_external_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateAwsAccountRequest) Reset() {
	*x = CreateAwsAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAwsAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAwsAccountRequest) ProtoMessage() {}

func (x *CreateAwsAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAwsAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateAwsAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAwsAccountRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateAwsAccountRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *CreateAwsAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAwsAccountRequest) GetOrganizationId() string {
	if x != nil && x.OrganizationId != nil {
		return *x.OrganizationId
	}
	return ""
}

func (x *CreateAwsAccountRequest) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

func (x *CreateAwsAccountRequest) GetRoleExternalId() string {
	if x != nil {
		return x.RoleExternalId
	}
	return ""
}

type CreateAwsAccountResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId      string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Mode           string                 `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationId *string                `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3,oneof" json:"organization_id,omitempty"`
	RoleArn        string                 `protobuf:"bytes,8,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateAwsAccountResponse) Reset() {
	*x = CreateAwsAccountResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAwsAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAwsAccountResponse) ProtoMessage() {}

func (x *CreateAwsAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAwsAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateAwsAccountResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAwsAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateAwsAccountResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateAwsAccountResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *CreateAwsAccountResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAwsAccountResponse) GetOrganizationId() string {
	if x != nil && x.OrganizationId != nil {
		return *x.OrganizationId
	}
	return ""
}

func (x *CreateAwsAccountResponse) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

type ReadAwsAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadAwsAccountRequest) Reset() {
	*x = ReadAwsAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAwsAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAwsAccountRequest) ProtoMessage() {}

func (x *ReadAwsAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAwsAccountRequest.ProtoReflect.Descriptor instead.
func (*ReadAwsAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *ReadAwsAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadAwsAccountResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId      string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Mode           string                 `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationId *string                `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3,oneof" json:"organization_id,omitempty"`
	RoleArn        string                 `protobuf:"bytes,8,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReadAwsAccountResponse) Reset() {
	*x = ReadAwsAccountResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAwsAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAwsAccountResponse) ProtoMessage() {}

func (x *ReadAwsAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAwsAccountResponse.ProtoReflect.Descriptor instead.
func (*ReadAwsAccountResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{3}
}

func (x *ReadAwsAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadAwsAccountResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReadAwsAccountResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ReadAwsAccountResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReadAwsAccountResponse) GetOrganizationId() string {
	if x != nil && x.OrganizationId != nil {
		return *x.OrganizationId
	}
	return ""
}

func (x *ReadAwsAccountResponse) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

type UpdateAwsAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,10,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAwsAccountRequest) Reset() {
	*x = UpdateAwsAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAwsAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAwsAccountRequest) ProtoMessage() {}

func (x *UpdateAwsAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAwsAccountRequest.ProtoReflect.Descriptor instead.
func (*UpdateAwsAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateAwsAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAwsAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAwsAccountRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateAwsAccountResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId      string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Mode           string                 `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationId *string                `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3,oneof" json:"organization_id,omitempty"`
	RoleArn        string                 `protobuf:"bytes,8,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateAwsAccountResponse) Reset() {
	*x = UpdateAwsAccountResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAwsAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAwsAccountResponse) ProtoMessage() {}

func (x *UpdateAwsAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAwsAccountResponse.ProtoReflect.Descriptor instead.
func (*UpdateAwsAccountResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateAwsAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAwsAccountResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UpdateAwsAccountResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *UpdateAwsAccountResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAwsAccountResponse) GetOrganizationId() string {
	if x != nil && x.OrganizationId != nil {
		return *x.OrganizationId
	}
	return ""
}

func (x *UpdateAwsAccountResponse) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

type DeleteAwsAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAwsAccountRequest) Reset() {
	*x = DeleteAwsAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAwsAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAwsAccountRequest) ProtoMessage() {}

func (x *DeleteAwsAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAwsAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteAwsAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteAwsAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateAwsFlowLogsS3BucketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	S3BucketArn   string                 `protobuf:"bytes,3,opt,name=s3_bucket_arn,json=s3BucketArn,proto3" json:"s3_bucket_arn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAwsFlowLogsS3BucketRequest) Reset() {
	*x = CreateAwsFlowLogsS3BucketRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAwsFlowLogsS3BucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAwsFlowLogsS3BucketRequest) ProtoMessage() {}

func (x *CreateAwsFlowLogsS3BucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAwsFlowLogsS3BucketRequest.ProtoReflect.Descriptor instead.
func (*CreateAwsFlowLogsS3BucketRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{7}
}

func (x *CreateAwsFlowLogsS3BucketRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateAwsFlowLogsS3BucketRequest) GetS3BucketArn() string {
	if x != nil {
		return x.S3BucketArn
	}
	return ""
}

type CreateAwsFlowLogsS3BucketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId     string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	S3BucketArn   string                 `protobuf:"bytes,3,opt,name=s3_bucket_arn,json=s3BucketArn,proto3" json:"s3_bucket_arn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAwsFlowLogsS3BucketResponse) Reset() {
	*x = CreateAwsFlowLogsS3BucketResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAwsFlowLogsS3BucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAwsFlowLogsS3BucketResponse) ProtoMessage() {}

func (x *CreateAwsFlowLogsS3BucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAwsFlowLogsS3BucketResponse.ProtoReflect.Descriptor instead.
func (*CreateAwsFlowLogsS3BucketResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{8}
}

func (x *CreateAwsFlowLogsS3BucketResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateAwsFlowLogsS3BucketResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateAwsFlowLogsS3BucketResponse) GetS3BucketArn() string {
	if x != nil {
		return x.S3BucketArn
	}
	return ""
}

type ReadAwsFlowLogsS3BucketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadAwsFlowLogsS3BucketRequest) Reset() {
	*x = ReadAwsFlowLogsS3BucketRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAwsFlowLogsS3BucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAwsFlowLogsS3BucketRequest) ProtoMessage() {}

func (x *ReadAwsFlowLogsS3BucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAwsFlowLogsS3BucketRequest.ProtoReflect.Descriptor instead.
func (*ReadAwsFlowLogsS3BucketRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{9}
}

func (x *ReadAwsFlowLogsS3BucketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadAwsFlowLogsS3BucketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId     string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	S3BucketArn   string                 `protobuf:"bytes,3,opt,name=s3_bucket_arn,json=s3BucketArn,proto3" json:"s3_bucket_arn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadAwsFlowLogsS3BucketResponse) Reset() {
	*x = ReadAwsFlowLogsS3BucketResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAwsFlowLogsS3BucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAwsFlowLogsS3BucketResponse) ProtoMessage() {}

func (x *ReadAwsFlowLogsS3BucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAwsFlowLogsS3BucketResponse.ProtoReflect.Descriptor instead.
func (*ReadAwsFlowLogsS3BucketResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{10}
}

func (x *ReadAwsFlowLogsS3BucketResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadAwsFlowLogsS3BucketResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReadAwsFlowLogsS3BucketResponse) GetS3BucketArn() string {
	if x != nil {
		return x.S3BucketArn
	}
	return ""
}

type UpdateAwsFlowLogsS3BucketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAwsFlowLogsS3BucketRequest) Reset() {
	*x = UpdateAwsFlowLogsS3BucketRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAwsFlowLogsS3BucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAwsFlowLogsS3BucketRequest) ProtoMessage() {}

func (x *UpdateAwsFlowLogsS3BucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAwsFlowLogsS3BucketRequest.ProtoReflect.Descriptor instead.
func (*UpdateAwsFlowLogsS3BucketRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateAwsFlowLogsS3BucketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAwsFlowLogsS3BucketRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateAwsFlowLogsS3BucketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId     string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	S3BucketArn   string                 `protobuf:"bytes,3,opt,name=s3_bucket_arn,json=s3BucketArn,proto3" json:"s3_bucket_arn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAwsFlowLogsS3BucketResponse) Reset() {
	*x = UpdateAwsFlowLogsS3BucketResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAwsFlowLogsS3BucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAwsFlowLogsS3BucketResponse) ProtoMessage() {}

func (x *UpdateAwsFlowLogsS3BucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAwsFlowLogsS3BucketResponse.ProtoReflect.Descriptor instead.
func (*UpdateAwsFlowLogsS3BucketResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateAwsFlowLogsS3BucketResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAwsFlowLogsS3BucketResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UpdateAwsFlowLogsS3BucketResponse) GetS3BucketArn() string {
	if x != nil {
		return x.S3BucketArn
	}
	return ""
}

type DeleteAwsFlowLogsS3BucketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAwsFlowLogsS3BucketRequest) Reset() {
	*x = DeleteAwsFlowLogsS3BucketRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAwsFlowLogsS3BucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAwsFlowLogsS3BucketRequest) ProtoMessage() {}

func (x *DeleteAwsFlowLogsS3BucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAwsFlowLogsS3BucketRequest.ProtoReflect.Descriptor instead.
func (*DeleteAwsFlowLogsS3BucketRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteAwsFlowLogsS3BucketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AwsTagToLabel_CloudTags struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cloud         string                 `protobuf:"bytes,1,opt,name=cloud,proto3" json:"cloud,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsTagToLabel_CloudTags) Reset() {
	*x = AwsTagToLabel_CloudTags{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsTagToLabel_CloudTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsTagToLabel_CloudTags) ProtoMessage() {}

func (x *AwsTagToLabel_CloudTags) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsTagToLabel_CloudTags.ProtoReflect.Descriptor instead.
func (*AwsTagToLabel_CloudTags) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{14}
}

func (x *AwsTagToLabel_CloudTags) GetCloud() string {
	if x != nil {
		return x.Cloud
	}
	return ""
}

func (x *AwsTagToLabel_CloudTags) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type AwsTagToLabel_Icon struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BackgroundColor string                 `protobuf:"bytes,1,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
	ForegroundColor string                 `protobuf:"bytes,2,opt,name=foreground_color,json=foregroundColor,proto3" json:"foreground_color,omitempty"`
	Name            string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AwsTagToLabel_Icon) Reset() {
	*x = AwsTagToLabel_Icon{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsTagToLabel_Icon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsTagToLabel_Icon) ProtoMessage() {}

func (x *AwsTagToLabel_Icon) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsTagToLabel_Icon.ProtoReflect.Descriptor instead.
func (*AwsTagToLabel_Icon) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{15}
}

func (x *AwsTagToLabel_Icon) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *AwsTagToLabel_Icon) GetForegroundColor() string {
	if x != nil {
		return x.ForegroundColor
	}
	return ""
}

func (x *AwsTagToLabel_Icon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateAwsTagToLabelRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	CloudTags     []*AwsTagToLabel_CloudTags `protobuf:"bytes,2,rep,name=cloud_tags,json=cloudTags,proto3" json:"cloud_tags,omitempty"`
	Icon          *AwsTagToLabel_Icon        `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Key           string                     `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Name          string                     `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAwsTagToLabelRequest) Reset() {
	*x = CreateAwsTagToLabelRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAwsTagToLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAwsTagToLabelRequest) ProtoMessage() {}

func (x *CreateAwsTagToLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAwsTagToLabelRequest.ProtoReflect.Descriptor instead.
func (*CreateAwsTagToLabelRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{16}
}

func (x *CreateAwsTagToLabelRequest) GetCloudTags() []*AwsTagToLabel_CloudTags {
	if x != nil {
		return x.CloudTags
	}
	return nil
}

func (x *CreateAwsTagToLabelRequest) GetIcon() *AwsTagToLabel_Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *CreateAwsTagToLabelRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CreateAwsTagToLabelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateAwsTagToLabelResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Id            string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CloudTags     []*AwsTagToLabel_CloudTags `protobuf:"bytes,2,rep,name=cloud_tags,json=cloudTags,proto3" json:"cloud_tags,omitempty"`
	Icon          *AwsTagToLabel_Icon        `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Key           string                     `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Name          string                     `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAwsTagToLabelResponse) Reset() {
	*x = CreateAwsTagToLabelResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAwsTagToLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAwsTagToLabelResponse) ProtoMessage() {}

func (x *CreateAwsTagToLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAwsTagToLabelResponse.ProtoReflect.Descriptor instead.
func (*CreateAwsTagToLabelResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{17}
}

func (x *CreateAwsTagToLabelResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateAwsTagToLabelResponse) GetCloudTags() []*AwsTagToLabel_CloudTags {
	if x != nil {
		return x.CloudTags
	}
	return nil
}

func (x *CreateAwsTagToLabelResponse) GetIcon() *AwsTagToLabel_Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *CreateAwsTagToLabelResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CreateAwsTagToLabelResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ReadAwsTagToLabelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadAwsTagToLabelRequest) Reset() {
	*x = ReadAwsTagToLabelRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAwsTagToLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAwsTagToLabelRequest) ProtoMessage() {}

func (x *ReadAwsTagToLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAwsTagToLabelRequest.ProtoReflect.Descriptor instead.
func (*ReadAwsTagToLabelRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{18}
}

func (x *ReadAwsTagToLabelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadAwsTagToLabelResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Id            string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CloudTags     []*AwsTagToLabel_CloudTags `protobuf:"bytes,2,rep,name=cloud_tags,json=cloudTags,proto3" json:"cloud_tags,omitempty"`
	Icon          *AwsTagToLabel_Icon        `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Key           string                     `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Name          string                     `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadAwsTagToLabelResponse) Reset() {
	*x = ReadAwsTagToLabelResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAwsTagToLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAwsTagToLabelResponse) ProtoMessage() {}

func (x *ReadAwsTagToLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAwsTagToLabelResponse.ProtoReflect.Descriptor instead.
func (*ReadAwsTagToLabelResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{19}
}

func (x *ReadAwsTagToLabelResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadAwsTagToLabelResponse) GetCloudTags() []*AwsTagToLabel_CloudTags {
	if x != nil {
		return x.CloudTags
	}
	return nil
}

func (x *ReadAwsTagToLabelResponse) GetIcon() *AwsTagToLabel_Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *ReadAwsTagToLabelResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ReadAwsTagToLabelResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateAwsTagToLabelRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Id            string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CloudTags     []*AwsTagToLabel_CloudTags `protobuf:"bytes,2,rep,name=cloud_tags,json=cloudTags,proto3" json:"cloud_tags,omitempty"`
	Icon          *AwsTagToLabel_Icon        `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Key           string                     `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Name          string                     `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask     `protobuf:"bytes,6,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAwsTagToLabelRequest) Reset() {
	*x = UpdateAwsTagToLabelRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAwsTagToLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAwsTagToLabelRequest) ProtoMessage() {}

func (x *UpdateAwsTagToLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAwsTagToLabelRequest.ProtoReflect.Descriptor instead.
func (*UpdateAwsTagToLabelRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateAwsTagToLabelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAwsTagToLabelRequest) GetCloudTags() []*AwsTagToLabel_CloudTags {
	if x != nil {
		return x.CloudTags
	}
	return nil
}

func (x *UpdateAwsTagToLabelRequest) GetIcon() *AwsTagToLabel_Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *UpdateAwsTagToLabelRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UpdateAwsTagToLabelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAwsTagToLabelRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateAwsTagToLabelResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Id            string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CloudTags     []*AwsTagToLabel_CloudTags `protobuf:"bytes,2,rep,name=cloud_tags,json=cloudTags,proto3" json:"cloud_tags,omitempty"`
	Icon          *AwsTagToLabel_Icon        `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Key           string                     `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Name          string                     `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAwsTagToLabelResponse) Reset() {
	*x = UpdateAwsTagToLabelResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAwsTagToLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAwsTagToLabelResponse) ProtoMessage() {}

func (x *UpdateAwsTagToLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAwsTagToLabelResponse.ProtoReflect.Descriptor instead.
func (*UpdateAwsTagToLabelResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateAwsTagToLabelResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAwsTagToLabelResponse) GetCloudTags() []*AwsTagToLabel_CloudTags {
	if x != nil {
		return x.CloudTags
	}
	return nil
}

func (x *UpdateAwsTagToLabelResponse) GetIcon() *AwsTagToLabel_Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *UpdateAwsTagToLabelResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UpdateAwsTagToLabelResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteAwsTagToLabelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAwsTagToLabelRequest) Reset() {
	*x = DeleteAwsTagToLabelRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAwsTagToLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAwsTagToLabelRequest) ProtoMessage() {}

func (x *DeleteAwsTagToLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAwsTagToLabelRequest.ProtoReflect.Descriptor instead.
func (*DeleteAwsTagToLabelRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteAwsTagToLabelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateAzureFlowLogsStorageAccountRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	StorageAccountResourceId string                 `protobuf:"bytes,2,opt,name=storage_account_resource_id,json=storageAccountResourceId,proto3" json:"storage_account_resource_id,omitempty"`
	SubscriptionId           string                 `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CreateAzureFlowLogsStorageAccountRequest) Reset() {
	*x = CreateAzureFlowLogsStorageAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAzureFlowLogsStorageAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAzureFlowLogsStorageAccountRequest) ProtoMessage() {}

func (x *CreateAzureFlowLogsStorageAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAzureFlowLogsStorageAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateAzureFlowLogsStorageAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{23}
}

func (x *CreateAzureFlowLogsStorageAccountRequest) GetStorageAccountResourceId() string {
	if x != nil {
		return x.StorageAccountResourceId
	}
	return ""
}

func (x *CreateAzureFlowLogsStorageAccountRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type CreateAzureFlowLogsStorageAccountResponse struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StorageAccountResourceId string                 `protobuf:"bytes,2,opt,name=storage_account_resource_id,json=storageAccountResourceId,proto3" json:"storage_account_resource_id,omitempty"`
	SubscriptionId           string                 `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CreateAzureFlowLogsStorageAccountResponse) Reset() {
	*x = CreateAzureFlowLogsStorageAccountResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAzureFlowLogsStorageAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAzureFlowLogsStorageAccountResponse) ProtoMessage() {}

func (x *CreateAzureFlowLogsStorageAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAzureFlowLogsStorageAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateAzureFlowLogsStorageAccountResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{24}
}

func (x *CreateAzureFlowLogsStorageAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateAzureFlowLogsStorageAccountResponse) GetStorageAccountResourceId() string {
	if x != nil {
		return x.StorageAccountResourceId
	}
	return ""
}

func (x *CreateAzureFlowLogsStorageAccountResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type ReadAzureFlowLogsStorageAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadAzureFlowLogsStorageAccountRequest) Reset() {
	*x = ReadAzureFlowLogsStorageAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAzureFlowLogsStorageAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAzureFlowLogsStorageAccountRequest) ProtoMessage() {}

func (x *ReadAzureFlowLogsStorageAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAzureFlowLogsStorageAccountRequest.ProtoReflect.Descriptor instead.
func (*ReadAzureFlowLogsStorageAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{25}
}

func (x *ReadAzureFlowLogsStorageAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadAzureFlowLogsStorageAccountResponse struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StorageAccountResourceId string                 `protobuf:"bytes,2,opt,name=storage_account_resource_id,json=storageAccountResourceId,proto3" json:"storage_account_resource_id,omitempty"`
	SubscriptionId           string                 `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ReadAzureFlowLogsStorageAccountResponse) Reset() {
	*x = ReadAzureFlowLogsStorageAccountResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAzureFlowLogsStorageAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAzureFlowLogsStorageAccountResponse) ProtoMessage() {}

func (x *ReadAzureFlowLogsStorageAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAzureFlowLogsStorageAccountResponse.ProtoReflect.Descriptor instead.
func (*ReadAzureFlowLogsStorageAccountResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{26}
}

func (x *ReadAzureFlowLogsStorageAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadAzureFlowLogsStorageAccountResponse) GetStorageAccountResourceId() string {
	if x != nil {
		return x.StorageAccountResourceId
	}
	return ""
}

func (x *ReadAzureFlowLogsStorageAccountResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type UpdateAzureFlowLogsStorageAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAzureFlowLogsStorageAccountRequest) Reset() {
	*x = UpdateAzureFlowLogsStorageAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAzureFlowLogsStorageAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAzureFlowLogsStorageAccountRequest) ProtoMessage() {}

func (x *UpdateAzureFlowLogsStorageAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAzureFlowLogsStorageAccountRequest.ProtoReflect.Descriptor instead.
func (*UpdateAzureFlowLogsStorageAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateAzureFlowLogsStorageAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAzureFlowLogsStorageAccountRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateAzureFlowLogsStorageAccountResponse struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StorageAccountResourceId string                 `protobuf:"bytes,2,opt,name=storage_account_resource_id,json=storageAccountResourceId,proto3" json:"storage_account_resource_id,omitempty"`
	SubscriptionId           string                 `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UpdateAzureFlowLogsStorageAccountResponse) Reset() {
	*x = UpdateAzureFlowLogsStorageAccountResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAzureFlowLogsStorageAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAzureFlowLogsStorageAccountResponse) ProtoMessage() {}

func (x *UpdateAzureFlowLogsStorageAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAzureFlowLogsStorageAccountResponse.ProtoReflect.Descriptor instead.
func (*UpdateAzureFlowLogsStorageAccountResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateAzureFlowLogsStorageAccountResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAzureFlowLogsStorageAccountResponse) GetStorageAccountResourceId() string {
	if x != nil {
		return x.StorageAccountResourceId
	}
	return ""
}

func (x *UpdateAzureFlowLogsStorageAccountResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type DeleteAzureFlowLogsStorageAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAzureFlowLogsStorageAccountRequest) Reset() {
	*x = DeleteAzureFlowLogsStorageAccountRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAzureFlowLogsStorageAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAzureFlowLogsStorageAccountRequest) ProtoMessage() {}

func (x *DeleteAzureFlowLogsStorageAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAzureFlowLogsStorageAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteAzureFlowLogsStorageAccountRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteAzureFlowLogsStorageAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateAzureSubscriptionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ClientId       string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret   string                 `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Mode           string                 `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	SubscriptionId string                 `protobuf:"bytes,6,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	TenantId       string                 `protobuf:"bytes,7,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateAzureSubscriptionRequest) Reset() {
	*x = CreateAzureSubscriptionRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAzureSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAzureSubscriptionRequest) ProtoMessage() {}

func (x *CreateAzureSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAzureSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateAzureSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{30}
}

func (x *CreateAzureSubscriptionRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateAzureSubscriptionRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *CreateAzureSubscriptionRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *CreateAzureSubscriptionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAzureSubscriptionRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *CreateAzureSubscriptionRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type CreateAzureSubscriptionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId       string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Mode           string                 `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	SubscriptionId string                 `protobuf:"bytes,6,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	TenantId       string                 `protobuf:"bytes,7,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateAzureSubscriptionResponse) Reset() {
	*x = CreateAzureSubscriptionResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAzureSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAzureSubscriptionResponse) ProtoMessage() {}

func (x *CreateAzureSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAzureSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*CreateAzureSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{31}
}

func (x *CreateAzureSubscriptionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateAzureSubscriptionResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateAzureSubscriptionResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *CreateAzureSubscriptionResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAzureSubscriptionResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *CreateAzureSubscriptionResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ReadAzureSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadAzureSubscriptionRequest) Reset() {
	*x = ReadAzureSubscriptionRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAzureSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAzureSubscriptionRequest) ProtoMessage() {}

func (x *ReadAzureSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAzureSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*ReadAzureSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{32}
}

func (x *ReadAzureSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadAzureSubscriptionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId       string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Mode           string                 `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	SubscriptionId string                 `protobuf:"bytes,6,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	TenantId       string                 `protobuf:"bytes,7,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReadAzureSubscriptionResponse) Reset() {
	*x = ReadAzureSubscriptionResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAzureSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAzureSubscriptionResponse) ProtoMessage() {}

func (x *ReadAzureSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAzureSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*ReadAzureSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{33}
}

func (x *ReadAzureSubscriptionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadAzureSubscriptionResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ReadAzureSubscriptionResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *ReadAzureSubscriptionResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReadAzureSubscriptionResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *ReadAzureSubscriptionResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type UpdateAzureSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,8,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAzureSubscriptionRequest) Reset() {
	*x = UpdateAzureSubscriptionRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAzureSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAzureSubscriptionRequest) ProtoMessage() {}

func (x *UpdateAzureSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAzureSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateAzureSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateAzureSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAzureSubscriptionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAzureSubscriptionRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateAzureSubscriptionResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId       string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Mode           string                 `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Name           string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	SubscriptionId string                 `protobuf:"bytes,6,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	TenantId       string                 `protobuf:"bytes,7,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateAzureSubscriptionResponse) Reset() {
	*x = UpdateAzureSubscriptionResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAzureSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAzureSubscriptionResponse) ProtoMessage() {}

func (x *UpdateAzureSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAzureSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*UpdateAzureSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateAzureSubscriptionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAzureSubscriptionResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *UpdateAzureSubscriptionResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *UpdateAzureSubscriptionResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAzureSubscriptionResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *UpdateAzureSubscriptionResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type DeleteAzureSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAzureSubscriptionRequest) Reset() {
	*x = DeleteAzureSubscriptionRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAzureSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAzureSubscriptionRequest) ProtoMessage() {}

func (x *DeleteAzureSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAzureSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*DeleteAzureSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteAzureSubscriptionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateK8SClusterOnboardingCredentialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Description   *string                `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IllumioRegion string                 `protobuf:"bytes,6,opt,name=illumio_region,json=illumioRegion,proto3" json:"illumio_region,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateK8SClusterOnboardingCredentialRequest) Reset() {
	*x = CreateK8SClusterOnboardingCredentialRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateK8SClusterOnboardingCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SClusterOnboardingCredentialRequest) ProtoMessage() {}

func (x *CreateK8SClusterOnboardingCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SClusterOnboardingCredentialRequest.ProtoReflect.Descriptor instead.
func (*CreateK8SClusterOnboardingCredentialRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{37}
}

func (x *CreateK8SClusterOnboardingCredentialRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialRequest) GetIllumioRegion() string {
	if x != nil {
		return x.IllumioRegion
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateK8SClusterOnboardingCredentialResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId      string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret  string                 `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Description   *string                `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IllumioRegion string                 `protobuf:"bytes,6,opt,name=illumio_region,json=illumioRegion,proto3" json:"illumio_region,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateK8SClusterOnboardingCredentialResponse) Reset() {
	*x = CreateK8SClusterOnboardingCredentialResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateK8SClusterOnboardingCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SClusterOnboardingCredentialResponse) ProtoMessage() {}

func (x *CreateK8SClusterOnboardingCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SClusterOnboardingCredentialResponse.ProtoReflect.Descriptor instead.
func (*CreateK8SClusterOnboardingCredentialResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{38}
}

func (x *CreateK8SClusterOnboardingCredentialResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialResponse) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialResponse) GetIllumioRegion() string {
	if x != nil {
		return x.IllumioRegion
	}
	return ""
}

func (x *CreateK8SClusterOnboardingCredentialResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ReadK8SClusterOnboardingCredentialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadK8SClusterOnboardingCredentialRequest) Reset() {
	*x = ReadK8SClusterOnboardingCredentialRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadK8SClusterOnboardingCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadK8SClusterOnboardingCredentialRequest) ProtoMessage() {}

func (x *ReadK8SClusterOnboardingCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadK8SClusterOnboardingCredentialRequest.ProtoReflect.Descriptor instead.
func (*ReadK8SClusterOnboardingCredentialRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{39}
}

func (x *ReadK8SClusterOnboardingCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadK8SClusterOnboardingCredentialResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId      string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Description   *string                `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IllumioRegion string                 `protobuf:"bytes,6,opt,name=illumio_region,json=illumioRegion,proto3" json:"illumio_region,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadK8SClusterOnboardingCredentialResponse) Reset() {
	*x = ReadK8SClusterOnboardingCredentialResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadK8SClusterOnboardingCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadK8SClusterOnboardingCredentialResponse) ProtoMessage() {}

func (x *ReadK8SClusterOnboardingCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadK8SClusterOnboardingCredentialResponse.ProtoReflect.Descriptor instead.
func (*ReadK8SClusterOnboardingCredentialResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{40}
}

func (x *ReadK8SClusterOnboardingCredentialResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadK8SClusterOnboardingCredentialResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ReadK8SClusterOnboardingCredentialResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ReadK8SClusterOnboardingCredentialResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ReadK8SClusterOnboardingCredentialResponse) GetIllumioRegion() string {
	if x != nil {
		return x.IllumioRegion
	}
	return ""
}

func (x *ReadK8SClusterOnboardingCredentialResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateK8SClusterOnboardingCredentialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description   *string                `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,8,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateK8SClusterOnboardingCredentialRequest) Reset() {
	*x = UpdateK8SClusterOnboardingCredentialRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateK8SClusterOnboardingCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SClusterOnboardingCredentialRequest) ProtoMessage() {}

func (x *UpdateK8SClusterOnboardingCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SClusterOnboardingCredentialRequest.ProtoReflect.Descriptor instead.
func (*UpdateK8SClusterOnboardingCredentialRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateK8SClusterOnboardingCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateK8SClusterOnboardingCredentialResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId      string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Description   *string                `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IllumioRegion string                 `protobuf:"bytes,6,opt,name=illumio_region,json=illumioRegion,proto3" json:"illumio_region,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) Reset() {
	*x = UpdateK8SClusterOnboardingCredentialResponse{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SClusterOnboardingCredentialResponse) ProtoMessage() {}

func (x *UpdateK8SClusterOnboardingCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SClusterOnboardingCredentialResponse.ProtoReflect.Descriptor instead.
func (*UpdateK8SClusterOnboardingCredentialResponse) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) GetIllumioRegion() string {
	if x != nil {
		return x.IllumioRegion
	}
	return ""
}

func (x *UpdateK8SClusterOnboardingCredentialResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteK8SClusterOnboardingCredentialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteK8SClusterOnboardingCredentialRequest) Reset() {
	*x = DeleteK8SClusterOnboardingCredentialRequest{}
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteK8SClusterOnboardingCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteK8SClusterOnboardingCredentialRequest) ProtoMessage() {}

func (x *DeleteK8SClusterOnboardingCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_illumio_cloud_config_v1_config_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteK8SClusterOnboardingCredentialRequest.ProtoReflect.Descriptor instead.
func (*DeleteK8SClusterOnboardingCredentialRequest) Descriptor() ([]byte, []int) {
	return file_illumio_cloud_config_v1_config_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteK8SClusterOnboardingCredentialRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_illumio_cloud_config_v1_config_proto protoreflect.FileDescriptor

var file_illumio_cloud_config_v1_config_proto_rawDesc = []byte{
	0x0a, 0x24, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7,
	0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x6f, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x41, 0x72, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x52, 0x65, 0x61,
	0x64, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x41, 0x77, 0x73, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x22, 0x7a, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xce, 0x01,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x29,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x33, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x72, 0x6e,
	0x22, 0x76, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f,
	0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x33, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x33, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x22, 0x30, 0x0a, 0x1e, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x1f, 0x52, 0x65,
	0x61, 0x64, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x33, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x72, 0x6e,
	0x22, 0x6f, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f,
	0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x76, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c,
	0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x33, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x33,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x22, 0x32, 0x0a, 0x20, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a,
	0x17, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x7e, 0x0a, 0x12, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6f, 0x72,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xd4, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x54, 0x61,
	0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4f, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77,
	0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x3f, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54,
	0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6c,
	0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x09, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x49,
	0x63, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x2a, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x64, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x19,
	0x52, 0x65, 0x61, 0x64, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x0a, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xa1, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x54,
	0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x4f, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x3f, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67,
	0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xe5, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6c, 0x6c, 0x75,
	0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x09, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x49, 0x63, 0x6f,
	0x6e, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a,
	0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x28,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xa3, 0x01, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d,
	0x0a, 0x1b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x26, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xa1, 0x01, 0x0a, 0x27, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x1b,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xa3, 0x01,
	0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xd0, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x2e, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xba, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x81,
	0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0xbc, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x30, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38,
	0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6c,
	0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x29, 0x52, 0x65, 0x61,
	0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x2a, 0x52, 0x65, 0x61, 0x64, 0x4b,
	0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6c, 0x6c, 0x75,
	0x6d, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x01, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38,
	0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xec, 0x01, 0x0a, 0x2c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x2b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0x98, 0x1a, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x77, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x69, 0x6c,
	0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x92,
	0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77,
	0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x39, 0x2e, 0x69,
	0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73,
	0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x41, 0x77, 0x73, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x37, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x77,
	0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f,
	0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73,
	0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x39, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x69, 0x6c,
	0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x33, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x39, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x77, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73,
	0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x33, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x11, 0x52, 0x65,
	0x61, 0x64, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x31, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x77,
	0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x33,
	0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x33, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x77, 0x73, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xaa, 0x01,
	0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x41, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67,
	0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x1f, 0x52,
	0x65, 0x61, 0x64, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f,
	0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x40, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0xaa, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x69, 0x6c, 0x6c,
	0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e,
	0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f,
	0x77, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x41, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67,
	0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x8c,
	0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x69, 0x6c, 0x6c,
	0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01,
	0x0a, 0x15, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6c,
	0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0xb3, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x44, 0x2e, 0x69, 0x6c, 0x6c,
	0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x45, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x61, 0x64,
	0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x42,
	0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4b, 0x38, 0x53,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x43, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb3, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x44, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01,
	0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x44, 0x2e, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x42, 0x89, 0x02, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6c, 0x6c,
	0x75, 0x6d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x5e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2d, 0x69, 0x6c, 0x6c, 0x75, 0x6d,
	0x69, 0x6f, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x49, 0x43, 0x43, 0xaa, 0x02, 0x17, 0x49, 0x6c, 0x6c, 0x75,
	0x6d, 0x69, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x17, 0x49, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x5c, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x23,
	0x49, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x49, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6f, 0x3a, 0x3a, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_illumio_cloud_config_v1_config_proto_rawDescOnce sync.Once
	file_illumio_cloud_config_v1_config_proto_rawDescData = file_illumio_cloud_config_v1_config_proto_rawDesc
)

func file_illumio_cloud_config_v1_config_proto_rawDescGZIP() []byte {
	file_illumio_cloud_config_v1_config_proto_rawDescOnce.Do(func() {
		file_illumio_cloud_config_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_illumio_cloud_config_v1_config_proto_rawDescData)
	})
	return file_illumio_cloud_config_v1_config_proto_rawDescData
}

var file_illumio_cloud_config_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_illumio_cloud_config_v1_config_proto_goTypes = []any{
	(*CreateAwsAccountRequest)(nil),                      // 0: illumio.cloud.config.v1.CreateAwsAccountRequest
	(*CreateAwsAccountResponse)(nil),                     // 1: illumio.cloud.config.v1.CreateAwsAccountResponse
	(*ReadAwsAccountRequest)(nil),                        // 2: illumio.cloud.config.v1.ReadAwsAccountRequest
	(*ReadAwsAccountResponse)(nil),                       // 3: illumio.cloud.config.v1.ReadAwsAccountResponse
	(*UpdateAwsAccountRequest)(nil),                      // 4: illumio.cloud.config.v1.UpdateAwsAccountRequest
	(*UpdateAwsAccountResponse)(nil),                     // 5: illumio.cloud.config.v1.UpdateAwsAccountResponse
	(*DeleteAwsAccountRequest)(nil),                      // 6: illumio.cloud.config.v1.DeleteAwsAccountRequest
	(*CreateAwsFlowLogsS3BucketRequest)(nil),             // 7: illumio.cloud.config.v1.CreateAwsFlowLogsS3BucketRequest
	(*CreateAwsFlowLogsS3BucketResponse)(nil),            // 8: illumio.cloud.config.v1.CreateAwsFlowLogsS3BucketResponse
	(*ReadAwsFlowLogsS3BucketRequest)(nil),               // 9: illumio.cloud.config.v1.ReadAwsFlowLogsS3BucketRequest
	(*ReadAwsFlowLogsS3BucketResponse)(nil),              // 10: illumio.cloud.config.v1.ReadAwsFlowLogsS3BucketResponse
	(*UpdateAwsFlowLogsS3BucketRequest)(nil),             // 11: illumio.cloud.config.v1.UpdateAwsFlowLogsS3BucketRequest
	(*UpdateAwsFlowLogsS3BucketResponse)(nil),            // 12: illumio.cloud.config.v1.UpdateAwsFlowLogsS3BucketResponse
	(*DeleteAwsFlowLogsS3BucketRequest)(nil),             // 13: illumio.cloud.config.v1.DeleteAwsFlowLogsS3BucketRequest
	(*AwsTagToLabel_CloudTags)(nil),                      // 14: illumio.cloud.config.v1.AwsTagToLabel_CloudTags
	(*AwsTagToLabel_Icon)(nil),                           // 15: illumio.cloud.config.v1.AwsTagToLabel_Icon
	(*CreateAwsTagToLabelRequest)(nil),                   // 16: illumio.cloud.config.v1.CreateAwsTagToLabelRequest
	(*CreateAwsTagToLabelResponse)(nil),                  // 17: illumio.cloud.config.v1.CreateAwsTagToLabelResponse
	(*ReadAwsTagToLabelRequest)(nil),                     // 18: illumio.cloud.config.v1.ReadAwsTagToLabelRequest
	(*ReadAwsTagToLabelResponse)(nil),                    // 19: illumio.cloud.config.v1.ReadAwsTagToLabelResponse
	(*UpdateAwsTagToLabelRequest)(nil),                   // 20: illumio.cloud.config.v1.UpdateAwsTagToLabelRequest
	(*UpdateAwsTagToLabelResponse)(nil),                  // 21: illumio.cloud.config.v1.UpdateAwsTagToLabelResponse
	(*DeleteAwsTagToLabelRequest)(nil),                   // 22: illumio.cloud.config.v1.DeleteAwsTagToLabelRequest
	(*CreateAzureFlowLogsStorageAccountRequest)(nil),     // 23: illumio.cloud.config.v1.CreateAzureFlowLogsStorageAccountRequest
	(*CreateAzureFlowLogsStorageAccountResponse)(nil),    // 24: illumio.cloud.config.v1.CreateAzureFlowLogsStorageAccountResponse
	(*ReadAzureFlowLogsStorageAccountRequest)(nil),       // 25: illumio.cloud.config.v1.ReadAzureFlowLogsStorageAccountRequest
	(*ReadAzureFlowLogsStorageAccountResponse)(nil),      // 26: illumio.cloud.config.v1.ReadAzureFlowLogsStorageAccountResponse
	(*UpdateAzureFlowLogsStorageAccountRequest)(nil),     // 27: illumio.cloud.config.v1.UpdateAzureFlowLogsStorageAccountRequest
	(*UpdateAzureFlowLogsStorageAccountResponse)(nil),    // 28: illumio.cloud.config.v1.UpdateAzureFlowLogsStorageAccountResponse
	(*DeleteAzureFlowLogsStorageAccountRequest)(nil),     // 29: illumio.cloud.config.v1.DeleteAzureFlowLogsStorageAccountRequest
	(*CreateAzureSubscriptionRequest)(nil),               // 30: illumio.cloud.config.v1.CreateAzureSubscriptionRequest
	(*CreateAzureSubscriptionResponse)(nil),              // 31: illumio.cloud.config.v1.CreateAzureSubscriptionResponse
	(*ReadAzureSubscriptionRequest)(nil),                 // 32: illumio.cloud.config.v1.ReadAzureSubscriptionRequest
	(*ReadAzureSubscriptionResponse)(nil),                // 33: illumio.cloud.config.v1.ReadAzureSubscriptionResponse
	(*UpdateAzureSubscriptionRequest)(nil),               // 34: illumio.cloud.config.v1.UpdateAzureSubscriptionRequest
	(*UpdateAzureSubscriptionResponse)(nil),              // 35: illumio.cloud.config.v1.UpdateAzureSubscriptionResponse
	(*DeleteAzureSubscriptionRequest)(nil),               // 36: illumio.cloud.config.v1.DeleteAzureSubscriptionRequest
	(*CreateK8SClusterOnboardingCredentialRequest)(nil),  // 37: illumio.cloud.config.v1.CreateK8SClusterOnboardingCredentialRequest
	(*CreateK8SClusterOnboardingCredentialResponse)(nil), // 38: illumio.cloud.config.v1.CreateK8SClusterOnboardingCredentialResponse
	(*ReadK8SClusterOnboardingCredentialRequest)(nil),    // 39: illumio.cloud.config.v1.ReadK8SClusterOnboardingCredentialRequest
	(*ReadK8SClusterOnboardingCredentialResponse)(nil),   // 40: illumio.cloud.config.v1.ReadK8SClusterOnboardingCredentialResponse
	(*UpdateK8SClusterOnboardingCredentialRequest)(nil),  // 41: illumio.cloud.config.v1.UpdateK8SClusterOnboardingCredentialRequest
	(*UpdateK8SClusterOnboardingCredentialResponse)(nil), // 42: illumio.cloud.config.v1.UpdateK8SClusterOnboardingCredentialResponse
	(*DeleteK8SClusterOnboardingCredentialRequest)(nil),  // 43: illumio.cloud.config.v1.DeleteK8SClusterOnboardingCredentialRequest
	(*fieldmaskpb.FieldMask)(nil),                        // 44: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),                                // 45: google.protobuf.Empty
}
var file_illumio_cloud_config_v1_config_proto_depIdxs = []int32{
	44, // 0: illumio.cloud.config.v1.UpdateAwsAccountRequest.update_mask:type_name -> google.protobuf.FieldMask
	44, // 1: illumio.cloud.config.v1.UpdateAwsFlowLogsS3BucketRequest.update_mask:type_name -> google.protobuf.FieldMask
	14, // 2: illumio.cloud.config.v1.CreateAwsTagToLabelRequest.cloud_tags:type_name -> illumio.cloud.config.v1.AwsTagToLabel_CloudTags
	15, // 3: illumio.cloud.config.v1.CreateAwsTagToLabelRequest.icon:type_name -> illumio.cloud.config.v1.AwsTagToLabel_Icon
	14, // 4: illumio.cloud.config.v1.CreateAwsTagToLabelResponse.cloud_tags:type_name -> illumio.cloud.config.v1.AwsTagToLabel_CloudTags
	15, // 5: illumio.cloud.config.v1.CreateAwsTagToLabelResponse.icon:type_name -> illumio.cloud.config.v1.AwsTagToLabel_Icon
	14, // 6: illumio.cloud.config.v1.ReadAwsTagToLabelResponse.cloud_tags:type_name -> illumio.cloud.config.v1.AwsTagToLabel_CloudTags
	15, // 7: illumio.cloud.config.v1.ReadAwsTagToLabelResponse.icon:type_name -> illumio.cloud.config.v1.AwsTagToLabel_Icon
	14, // 8: illumio.cloud.config.v1.UpdateAwsTagToLabelRequest.cloud_tags:type_name -> illumio.cloud.config.v1.AwsTagToLabel_CloudTags
	15, // 9: illumio.cloud.config.v1.UpdateAwsTagToLabelRequest.icon:type_name -> illumio.cloud.config.v1.AwsTagToLabel_Icon
	44, // 10: illumio.cloud.config.v1.UpdateAwsTagToLabelRequest.update_mask:type_name -> google.protobuf.FieldMask
	14, // 11: illumio.cloud.config.v1.UpdateAwsTagToLabelResponse.cloud_tags:type_name -> illumio.cloud.config.v1.AwsTagToLabel_CloudTags
	15, // 12: illumio.cloud.config.v1.UpdateAwsTagToLabelResponse.icon:type_name -> illumio.cloud.config.v1.AwsTagToLabel_Icon
	44, // 13: illumio.cloud.config.v1.UpdateAzureFlowLogsStorageAccountRequest.update_mask:type_name -> google.protobuf.FieldMask
	44, // 14: illumio.cloud.config.v1.UpdateAzureSubscriptionRequest.update_mask:type_name -> google.protobuf.FieldMask
	44, // 15: illumio.cloud.config.v1.UpdateK8SClusterOnboardingCredentialRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 16: illumio.cloud.config.v1.ConfigService.CreateAwsAccount:input_type -> illumio.cloud.config.v1.CreateAwsAccountRequest
	2,  // 17: illumio.cloud.config.v1.ConfigService.ReadAwsAccount:input_type -> illumio.cloud.config.v1.ReadAwsAccountRequest
	4,  // 18: illumio.cloud.config.v1.ConfigService.UpdateAwsAccount:input_type -> illumio.cloud.config.v1.UpdateAwsAccountRequest
	6,  // 19: illumio.cloud.config.v1.ConfigService.DeleteAwsAccount:input_type -> illumio.cloud.config.v1.DeleteAwsAccountRequest
	7,  // 20: illumio.cloud.config.v1.ConfigService.CreateAwsFlowLogsS3Bucket:input_type -> illumio.cloud.config.v1.CreateAwsFlowLogsS3BucketRequest
	9,  // 21: illumio.cloud.config.v1.ConfigService.ReadAwsFlowLogsS3Bucket:input_type -> illumio.cloud.config.v1.ReadAwsFlowLogsS3BucketRequest
	11, // 22: illumio.cloud.config.v1.ConfigService.UpdateAwsFlowLogsS3Bucket:input_type -> illumio.cloud.config.v1.UpdateAwsFlowLogsS3BucketRequest
	13, // 23: illumio.cloud.config.v1.ConfigService.DeleteAwsFlowLogsS3Bucket:input_type -> illumio.cloud.config.v1.DeleteAwsFlowLogsS3BucketRequest
	16, // 24: illumio.cloud.config.v1.ConfigService.CreateAwsTagToLabel:input_type -> illumio.cloud.config.v1.CreateAwsTagToLabelRequest
	18, // 25: illumio.cloud.config.v1.ConfigService.ReadAwsTagToLabel:input_type -> illumio.cloud.config.v1.ReadAwsTagToLabelRequest
	20, // 26: illumio.cloud.config.v1.ConfigService.UpdateAwsTagToLabel:input_type -> illumio.cloud.config.v1.UpdateAwsTagToLabelRequest
	22, // 27: illumio.cloud.config.v1.ConfigService.DeleteAwsTagToLabel:input_type -> illumio.cloud.config.v1.DeleteAwsTagToLabelRequest
	23, // 28: illumio.cloud.config.v1.ConfigService.CreateAzureFlowLogsStorageAccount:input_type -> illumio.cloud.config.v1.CreateAzureFlowLogsStorageAccountRequest
	25, // 29: illumio.cloud.config.v1.ConfigService.ReadAzureFlowLogsStorageAccount:input_type -> illumio.cloud.config.v1.ReadAzureFlowLogsStorageAccountRequest
	27, // 30: illumio.cloud.config.v1.ConfigService.UpdateAzureFlowLogsStorageAccount:input_type -> illumio.cloud.config.v1.UpdateAzureFlowLogsStorageAccountRequest
	29, // 31: illumio.cloud.config.v1.ConfigService.DeleteAzureFlowLogsStorageAccount:input_type -> illumio.cloud.config.v1.DeleteAzureFlowLogsStorageAccountRequest
	30, // 32: illumio.cloud.config.v1.ConfigService.CreateAzureSubscription:input_type -> illumio.cloud.config.v1.CreateAzureSubscriptionRequest
	32, // 33: illumio.cloud.config.v1.ConfigService.ReadAzureSubscription:input_type -> illumio.cloud.config.v1.ReadAzureSubscriptionRequest
	34, // 34: illumio.cloud.config.v1.ConfigService.UpdateAzureSubscription:input_type -> illumio.cloud.config.v1.UpdateAzureSubscriptionRequest
	36, // 35: illumio.cloud.config.v1.ConfigService.DeleteAzureSubscription:input_type -> illumio.cloud.config.v1.DeleteAzureSubscriptionRequest
	37, // 36: illumio.cloud.config.v1.ConfigService.CreateK8SClusterOnboardingCredential:input_type -> illumio.cloud.config.v1.CreateK8SClusterOnboardingCredentialRequest
	39, // 37: illumio.cloud.config.v1.ConfigService.ReadK8SClusterOnboardingCredential:input_type -> illumio.cloud.config.v1.ReadK8SClusterOnboardingCredentialRequest
	41, // 38: illumio.cloud.config.v1.ConfigService.UpdateK8SClusterOnboardingCredential:input_type -> illumio.cloud.config.v1.UpdateK8SClusterOnboardingCredentialRequest
	43, // 39: illumio.cloud.config.v1.ConfigService.DeleteK8SClusterOnboardingCredential:input_type -> illumio.cloud.config.v1.DeleteK8SClusterOnboardingCredentialRequest
	1,  // 40: illumio.cloud.config.v1.ConfigService.CreateAwsAccount:output_type -> illumio.cloud.config.v1.CreateAwsAccountResponse
	3,  // 41: illumio.cloud.config.v1.ConfigService.ReadAwsAccount:output_type -> illumio.cloud.config.v1.ReadAwsAccountResponse
	5,  // 42: illumio.cloud.config.v1.ConfigService.UpdateAwsAccount:output_type -> illumio.cloud.config.v1.UpdateAwsAccountResponse
	45, // 43: illumio.cloud.config.v1.ConfigService.DeleteAwsAccount:output_type -> google.protobuf.Empty
	8,  // 44: illumio.cloud.config.v1.ConfigService.CreateAwsFlowLogsS3Bucket:output_type -> illumio.cloud.config.v1.CreateAwsFlowLogsS3BucketResponse
	10, // 45: illumio.cloud.config.v1.ConfigService.ReadAwsFlowLogsS3Bucket:output_type -> illumio.cloud.config.v1.ReadAwsFlowLogsS3BucketResponse
	12, // 46: illumio.cloud.config.v1.ConfigService.UpdateAwsFlowLogsS3Bucket:output_type -> illumio.cloud.config.v1.UpdateAwsFlowLogsS3BucketResponse
	45, // 47: illumio.cloud.config.v1.ConfigService.DeleteAwsFlowLogsS3Bucket:output_type -> google.protobuf.Empty
	17, // 48: illumio.cloud.config.v1.ConfigService.CreateAwsTagToLabel:output_type -> illumio.cloud.config.v1.CreateAwsTagToLabelResponse
	19, // 49: illumio.cloud.config.v1.ConfigService.ReadAwsTagToLabel:output_type -> illumio.cloud.config.v1.ReadAwsTagToLabelResponse
	21, // 50: illumio.cloud.config.v1.ConfigService.UpdateAwsTagToLabel:output_type -> illumio.cloud.config.v1.UpdateAwsTagToLabelResponse
	45, // 51: illumio.cloud.config.v1.ConfigService.DeleteAwsTagToLabel:output_type -> google.protobuf.Empty
	24, // 52: illumio.cloud.config.v1.ConfigService.CreateAzureFlowLogsStorageAccount:output_type -> illumio.cloud.config.v1.CreateAzureFlowLogsStorageAccountResponse
	26, // 53: illumio.cloud.config.v1.ConfigService.ReadAzureFlowLogsStorageAccount:output_type -> illumio.cloud.config.v1.ReadAzureFlowLogsStorageAccountResponse
	28, // 54: illumio.cloud.config.v1.ConfigService.UpdateAzureFlowLogsStorageAccount:output_type -> illumio.cloud.config.v1.UpdateAzureFlowLogsStorageAccountResponse
	45, // 55: illumio.cloud.config.v1.ConfigService.DeleteAzureFlowLogsStorageAccount:output_type -> google.protobuf.Empty
	31, // 56: illumio.cloud.config.v1.ConfigService.CreateAzureSubscription:output_type -> illumio.cloud.config.v1.CreateAzureSubscriptionResponse
	33, // 57: illumio.cloud.config.v1.ConfigService.ReadAzureSubscription:output_type -> illumio.cloud.config.v1.ReadAzureSubscriptionResponse
	35, // 58: illumio.cloud.config.v1.ConfigService.UpdateAzureSubscription:output_type -> illumio.cloud.config.v1.UpdateAzureSubscriptionResponse
	45, // 59: illumio.cloud.config.v1.ConfigService.DeleteAzureSubscription:output_type -> google.protobuf.Empty
	38, // 60: illumio.cloud.config.v1.ConfigService.CreateK8SClusterOnboardingCredential:output_type -> illumio.cloud.config.v1.CreateK8SClusterOnboardingCredentialResponse
	40, // 61: illumio.cloud.config.v1.ConfigService.ReadK8SClusterOnboardingCredential:output_type -> illumio.cloud.config.v1.ReadK8SClusterOnboardingCredentialResponse
	42, // 62: illumio.cloud.config.v1.ConfigService.UpdateK8SClusterOnboardingCredential:output_type -> illumio.cloud.config.v1.UpdateK8SClusterOnboardingCredentialResponse
	45, // 63: illumio.cloud.config.v1.ConfigService.DeleteK8SClusterOnboardingCredential:output_type -> google.protobuf.Empty
	40, // [40:64] is the sub-list for method output_type
	16, // [16:40] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_illumio_cloud_config_v1_config_proto_init() }
func file_illumio_cloud_config_v1_config_proto_init() {
	if File_illumio_cloud_config_v1_config_proto != nil {
		return
	}
	file_illumio_cloud_config_v1_config_proto_msgTypes[0].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[1].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[3].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[5].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[37].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[38].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[40].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[41].OneofWrappers = []any{}
	file_illumio_cloud_config_v1_config_proto_msgTypes[42].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_illumio_cloud_config_v1_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_illumio_cloud_config_v1_config_proto_goTypes,
		DependencyIndexes: file_illumio_cloud_config_v1_config_proto_depIdxs,
		MessageInfos:      file_illumio_cloud_config_v1_config_proto_msgTypes,
	}.Build()
	File_illumio_cloud_config_v1_config_proto = out.File
	file_illumio_cloud_config_v1_config_proto_rawDesc = nil
	file_illumio_cloud_config_v1_config_proto_goTypes = nil
	file_illumio_cloud_config_v1_config_proto_depIdxs = nil
}
