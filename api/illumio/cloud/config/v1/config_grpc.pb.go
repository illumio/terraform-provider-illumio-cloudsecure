// Copyright (c) Illumio, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: illumio/cloud/config/v1/config.proto

package configv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfigService_CreateAwsAccount_FullMethodName                     = "/illumio.cloud.config.v1.ConfigService/CreateAwsAccount"
	ConfigService_ReadAwsAccount_FullMethodName                       = "/illumio.cloud.config.v1.ConfigService/ReadAwsAccount"
	ConfigService_UpdateAwsAccount_FullMethodName                     = "/illumio.cloud.config.v1.ConfigService/UpdateAwsAccount"
	ConfigService_DeleteAwsAccount_FullMethodName                     = "/illumio.cloud.config.v1.ConfigService/DeleteAwsAccount"
	ConfigService_CreateAwsOrganization_FullMethodName                = "/illumio.cloud.config.v1.ConfigService/CreateAwsOrganization"
	ConfigService_ReadAwsOrganization_FullMethodName                  = "/illumio.cloud.config.v1.ConfigService/ReadAwsOrganization"
	ConfigService_UpdateAwsOrganization_FullMethodName                = "/illumio.cloud.config.v1.ConfigService/UpdateAwsOrganization"
	ConfigService_DeleteAwsOrganization_FullMethodName                = "/illumio.cloud.config.v1.ConfigService/DeleteAwsOrganization"
	ConfigService_CreateK8SClusterOnboardingCredential_FullMethodName = "/illumio.cloud.config.v1.ConfigService/CreateK8SClusterOnboardingCredential"
	ConfigService_ReadK8SClusterOnboardingCredential_FullMethodName   = "/illumio.cloud.config.v1.ConfigService/ReadK8SClusterOnboardingCredential"
	ConfigService_UpdateK8SClusterOnboardingCredential_FullMethodName = "/illumio.cloud.config.v1.ConfigService/UpdateK8SClusterOnboardingCredential"
	ConfigService_DeleteK8SClusterOnboardingCredential_FullMethodName = "/illumio.cloud.config.v1.ConfigService/DeleteK8SClusterOnboardingCredential"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigServiceClient interface {
	CreateAwsAccount(ctx context.Context, in *CreateAwsAccountRequest, opts ...grpc.CallOption) (*CreateAwsAccountResponse, error)
	ReadAwsAccount(ctx context.Context, in *ReadAwsAccountRequest, opts ...grpc.CallOption) (*ReadAwsAccountResponse, error)
	UpdateAwsAccount(ctx context.Context, in *UpdateAwsAccountRequest, opts ...grpc.CallOption) (*UpdateAwsAccountResponse, error)
	DeleteAwsAccount(ctx context.Context, in *DeleteAwsAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAwsOrganization(ctx context.Context, in *CreateAwsOrganizationRequest, opts ...grpc.CallOption) (*CreateAwsOrganizationResponse, error)
	ReadAwsOrganization(ctx context.Context, in *ReadAwsOrganizationRequest, opts ...grpc.CallOption) (*ReadAwsOrganizationResponse, error)
	UpdateAwsOrganization(ctx context.Context, in *UpdateAwsOrganizationRequest, opts ...grpc.CallOption) (*UpdateAwsOrganizationResponse, error)
	DeleteAwsOrganization(ctx context.Context, in *DeleteAwsOrganizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateK8SClusterOnboardingCredential(ctx context.Context, in *CreateK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*CreateK8SClusterOnboardingCredentialResponse, error)
	ReadK8SClusterOnboardingCredential(ctx context.Context, in *ReadK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*ReadK8SClusterOnboardingCredentialResponse, error)
	UpdateK8SClusterOnboardingCredential(ctx context.Context, in *UpdateK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*UpdateK8SClusterOnboardingCredentialResponse, error)
	DeleteK8SClusterOnboardingCredential(ctx context.Context, in *DeleteK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) CreateAwsAccount(ctx context.Context, in *CreateAwsAccountRequest, opts ...grpc.CallOption) (*CreateAwsAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAwsAccountResponse)
	err := c.cc.Invoke(ctx, ConfigService_CreateAwsAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadAwsAccount(ctx context.Context, in *ReadAwsAccountRequest, opts ...grpc.CallOption) (*ReadAwsAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadAwsAccountResponse)
	err := c.cc.Invoke(ctx, ConfigService_ReadAwsAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateAwsAccount(ctx context.Context, in *UpdateAwsAccountRequest, opts ...grpc.CallOption) (*UpdateAwsAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAwsAccountResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateAwsAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteAwsAccount(ctx context.Context, in *DeleteAwsAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteAwsAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateAwsOrganization(ctx context.Context, in *CreateAwsOrganizationRequest, opts ...grpc.CallOption) (*CreateAwsOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAwsOrganizationResponse)
	err := c.cc.Invoke(ctx, ConfigService_CreateAwsOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadAwsOrganization(ctx context.Context, in *ReadAwsOrganizationRequest, opts ...grpc.CallOption) (*ReadAwsOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadAwsOrganizationResponse)
	err := c.cc.Invoke(ctx, ConfigService_ReadAwsOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateAwsOrganization(ctx context.Context, in *UpdateAwsOrganizationRequest, opts ...grpc.CallOption) (*UpdateAwsOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAwsOrganizationResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateAwsOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteAwsOrganization(ctx context.Context, in *DeleteAwsOrganizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteAwsOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateK8SClusterOnboardingCredential(ctx context.Context, in *CreateK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*CreateK8SClusterOnboardingCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateK8SClusterOnboardingCredentialResponse)
	err := c.cc.Invoke(ctx, ConfigService_CreateK8SClusterOnboardingCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadK8SClusterOnboardingCredential(ctx context.Context, in *ReadK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*ReadK8SClusterOnboardingCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadK8SClusterOnboardingCredentialResponse)
	err := c.cc.Invoke(ctx, ConfigService_ReadK8SClusterOnboardingCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateK8SClusterOnboardingCredential(ctx context.Context, in *UpdateK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*UpdateK8SClusterOnboardingCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateK8SClusterOnboardingCredentialResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateK8SClusterOnboardingCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteK8SClusterOnboardingCredential(ctx context.Context, in *DeleteK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteK8SClusterOnboardingCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations must embed UnimplementedConfigServiceServer
// for forward compatibility.
type ConfigServiceServer interface {
	CreateAwsAccount(context.Context, *CreateAwsAccountRequest) (*CreateAwsAccountResponse, error)
	ReadAwsAccount(context.Context, *ReadAwsAccountRequest) (*ReadAwsAccountResponse, error)
	UpdateAwsAccount(context.Context, *UpdateAwsAccountRequest) (*UpdateAwsAccountResponse, error)
	DeleteAwsAccount(context.Context, *DeleteAwsAccountRequest) (*emptypb.Empty, error)
	CreateAwsOrganization(context.Context, *CreateAwsOrganizationRequest) (*CreateAwsOrganizationResponse, error)
	ReadAwsOrganization(context.Context, *ReadAwsOrganizationRequest) (*ReadAwsOrganizationResponse, error)
	UpdateAwsOrganization(context.Context, *UpdateAwsOrganizationRequest) (*UpdateAwsOrganizationResponse, error)
	DeleteAwsOrganization(context.Context, *DeleteAwsOrganizationRequest) (*emptypb.Empty, error)
	CreateK8SClusterOnboardingCredential(context.Context, *CreateK8SClusterOnboardingCredentialRequest) (*CreateK8SClusterOnboardingCredentialResponse, error)
	ReadK8SClusterOnboardingCredential(context.Context, *ReadK8SClusterOnboardingCredentialRequest) (*ReadK8SClusterOnboardingCredentialResponse, error)
	UpdateK8SClusterOnboardingCredential(context.Context, *UpdateK8SClusterOnboardingCredentialRequest) (*UpdateK8SClusterOnboardingCredentialResponse, error)
	DeleteK8SClusterOnboardingCredential(context.Context, *DeleteK8SClusterOnboardingCredentialRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedConfigServiceServer()
}

// UnimplementedConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigServiceServer struct{}

func (UnimplementedConfigServiceServer) CreateAwsAccount(context.Context, *CreateAwsAccountRequest) (*CreateAwsAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAwsAccount not implemented")
}
func (UnimplementedConfigServiceServer) ReadAwsAccount(context.Context, *ReadAwsAccountRequest) (*ReadAwsAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAwsAccount not implemented")
}
func (UnimplementedConfigServiceServer) UpdateAwsAccount(context.Context, *UpdateAwsAccountRequest) (*UpdateAwsAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAwsAccount not implemented")
}
func (UnimplementedConfigServiceServer) DeleteAwsAccount(context.Context, *DeleteAwsAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAwsAccount not implemented")
}
func (UnimplementedConfigServiceServer) CreateAwsOrganization(context.Context, *CreateAwsOrganizationRequest) (*CreateAwsOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAwsOrganization not implemented")
}
func (UnimplementedConfigServiceServer) ReadAwsOrganization(context.Context, *ReadAwsOrganizationRequest) (*ReadAwsOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAwsOrganization not implemented")
}
func (UnimplementedConfigServiceServer) UpdateAwsOrganization(context.Context, *UpdateAwsOrganizationRequest) (*UpdateAwsOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAwsOrganization not implemented")
}
func (UnimplementedConfigServiceServer) DeleteAwsOrganization(context.Context, *DeleteAwsOrganizationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAwsOrganization not implemented")
}
func (UnimplementedConfigServiceServer) CreateK8SClusterOnboardingCredential(context.Context, *CreateK8SClusterOnboardingCredentialRequest) (*CreateK8SClusterOnboardingCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateK8SClusterOnboardingCredential not implemented")
}
func (UnimplementedConfigServiceServer) ReadK8SClusterOnboardingCredential(context.Context, *ReadK8SClusterOnboardingCredentialRequest) (*ReadK8SClusterOnboardingCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadK8SClusterOnboardingCredential not implemented")
}
func (UnimplementedConfigServiceServer) UpdateK8SClusterOnboardingCredential(context.Context, *UpdateK8SClusterOnboardingCredentialRequest) (*UpdateK8SClusterOnboardingCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateK8SClusterOnboardingCredential not implemented")
}
func (UnimplementedConfigServiceServer) DeleteK8SClusterOnboardingCredential(context.Context, *DeleteK8SClusterOnboardingCredentialRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteK8SClusterOnboardingCredential not implemented")
}
func (UnimplementedConfigServiceServer) mustEmbedUnimplementedConfigServiceServer() {}
func (UnimplementedConfigServiceServer) testEmbeddedByValue()                       {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_CreateAwsAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAwsAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateAwsAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_CreateAwsAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateAwsAccount(ctx, req.(*CreateAwsAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadAwsAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAwsAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadAwsAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadAwsAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadAwsAccount(ctx, req.(*ReadAwsAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateAwsAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAwsAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateAwsAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateAwsAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateAwsAccount(ctx, req.(*UpdateAwsAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteAwsAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAwsAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteAwsAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteAwsAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteAwsAccount(ctx, req.(*DeleteAwsAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateAwsOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAwsOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateAwsOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_CreateAwsOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateAwsOrganization(ctx, req.(*CreateAwsOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadAwsOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAwsOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadAwsOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadAwsOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadAwsOrganization(ctx, req.(*ReadAwsOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateAwsOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAwsOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateAwsOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateAwsOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateAwsOrganization(ctx, req.(*UpdateAwsOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteAwsOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAwsOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteAwsOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteAwsOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteAwsOrganization(ctx, req.(*DeleteAwsOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateK8SClusterOnboardingCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateK8SClusterOnboardingCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateK8SClusterOnboardingCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_CreateK8SClusterOnboardingCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateK8SClusterOnboardingCredential(ctx, req.(*CreateK8SClusterOnboardingCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadK8SClusterOnboardingCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadK8SClusterOnboardingCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadK8SClusterOnboardingCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadK8SClusterOnboardingCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadK8SClusterOnboardingCredential(ctx, req.(*ReadK8SClusterOnboardingCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateK8SClusterOnboardingCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateK8SClusterOnboardingCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateK8SClusterOnboardingCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateK8SClusterOnboardingCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateK8SClusterOnboardingCredential(ctx, req.(*UpdateK8SClusterOnboardingCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteK8SClusterOnboardingCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteK8SClusterOnboardingCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteK8SClusterOnboardingCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteK8SClusterOnboardingCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteK8SClusterOnboardingCredential(ctx, req.(*DeleteK8SClusterOnboardingCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "illumio.cloud.config.v1.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAwsAccount",
			Handler:    _ConfigService_CreateAwsAccount_Handler,
		},
		{
			MethodName: "ReadAwsAccount",
			Handler:    _ConfigService_ReadAwsAccount_Handler,
		},
		{
			MethodName: "UpdateAwsAccount",
			Handler:    _ConfigService_UpdateAwsAccount_Handler,
		},
		{
			MethodName: "DeleteAwsAccount",
			Handler:    _ConfigService_DeleteAwsAccount_Handler,
		},
		{
			MethodName: "CreateAwsOrganization",
			Handler:    _ConfigService_CreateAwsOrganization_Handler,
		},
		{
			MethodName: "ReadAwsOrganization",
			Handler:    _ConfigService_ReadAwsOrganization_Handler,
		},
		{
			MethodName: "UpdateAwsOrganization",
			Handler:    _ConfigService_UpdateAwsOrganization_Handler,
		},
		{
			MethodName: "DeleteAwsOrganization",
			Handler:    _ConfigService_DeleteAwsOrganization_Handler,
		},
		{
			MethodName: "CreateK8SClusterOnboardingCredential",
			Handler:    _ConfigService_CreateK8SClusterOnboardingCredential_Handler,
		},
		{
			MethodName: "ReadK8SClusterOnboardingCredential",
			Handler:    _ConfigService_ReadK8SClusterOnboardingCredential_Handler,
		},
		{
			MethodName: "UpdateK8SClusterOnboardingCredential",
			Handler:    _ConfigService_UpdateK8SClusterOnboardingCredential_Handler,
		},
		{
			MethodName: "DeleteK8SClusterOnboardingCredential",
			Handler:    _ConfigService_DeleteK8SClusterOnboardingCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "illumio/cloud/config/v1/config.proto",
}
