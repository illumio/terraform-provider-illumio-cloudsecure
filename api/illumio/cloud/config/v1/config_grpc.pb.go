// Copyright (c) Illumio, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: illumio/cloud/config/v1/config.proto

package configv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfigService_CreateApplication_FullMethodName                    = "/illumio.cloud.config.v1.ConfigService/CreateApplication"
	ConfigService_ReadApplication_FullMethodName                      = "/illumio.cloud.config.v1.ConfigService/ReadApplication"
	ConfigService_UpdateApplication_FullMethodName                    = "/illumio.cloud.config.v1.ConfigService/UpdateApplication"
	ConfigService_DeleteApplication_FullMethodName                    = "/illumio.cloud.config.v1.ConfigService/DeleteApplication"
	ConfigService_CreateApplicationAwsResources_FullMethodName        = "/illumio.cloud.config.v1.ConfigService/CreateApplicationAwsResources"
	ConfigService_ReadApplicationAwsResources_FullMethodName          = "/illumio.cloud.config.v1.ConfigService/ReadApplicationAwsResources"
	ConfigService_UpdateApplicationAwsResources_FullMethodName        = "/illumio.cloud.config.v1.ConfigService/UpdateApplicationAwsResources"
	ConfigService_DeleteApplicationAwsResources_FullMethodName        = "/illumio.cloud.config.v1.ConfigService/DeleteApplicationAwsResources"
	ConfigService_CreateApplicationAzureResources_FullMethodName      = "/illumio.cloud.config.v1.ConfigService/CreateApplicationAzureResources"
	ConfigService_ReadApplicationAzureResources_FullMethodName        = "/illumio.cloud.config.v1.ConfigService/ReadApplicationAzureResources"
	ConfigService_UpdateApplicationAzureResources_FullMethodName      = "/illumio.cloud.config.v1.ConfigService/UpdateApplicationAzureResources"
	ConfigService_DeleteApplicationAzureResources_FullMethodName      = "/illumio.cloud.config.v1.ConfigService/DeleteApplicationAzureResources"
	ConfigService_CreateAwsAccount_FullMethodName                     = "/illumio.cloud.config.v1.ConfigService/CreateAwsAccount"
	ConfigService_ReadAwsAccount_FullMethodName                       = "/illumio.cloud.config.v1.ConfigService/ReadAwsAccount"
	ConfigService_UpdateAwsAccount_FullMethodName                     = "/illumio.cloud.config.v1.ConfigService/UpdateAwsAccount"
	ConfigService_DeleteAwsAccount_FullMethodName                     = "/illumio.cloud.config.v1.ConfigService/DeleteAwsAccount"
	ConfigService_CreateAwsFlowLogsS3Bucket_FullMethodName            = "/illumio.cloud.config.v1.ConfigService/CreateAwsFlowLogsS3Bucket"
	ConfigService_ReadAwsFlowLogsS3Bucket_FullMethodName              = "/illumio.cloud.config.v1.ConfigService/ReadAwsFlowLogsS3Bucket"
	ConfigService_UpdateAwsFlowLogsS3Bucket_FullMethodName            = "/illumio.cloud.config.v1.ConfigService/UpdateAwsFlowLogsS3Bucket"
	ConfigService_DeleteAwsFlowLogsS3Bucket_FullMethodName            = "/illumio.cloud.config.v1.ConfigService/DeleteAwsFlowLogsS3Bucket"
	ConfigService_CreateAzureFlowLogsStorageAccount_FullMethodName    = "/illumio.cloud.config.v1.ConfigService/CreateAzureFlowLogsStorageAccount"
	ConfigService_ReadAzureFlowLogsStorageAccount_FullMethodName      = "/illumio.cloud.config.v1.ConfigService/ReadAzureFlowLogsStorageAccount"
	ConfigService_UpdateAzureFlowLogsStorageAccount_FullMethodName    = "/illumio.cloud.config.v1.ConfigService/UpdateAzureFlowLogsStorageAccount"
	ConfigService_DeleteAzureFlowLogsStorageAccount_FullMethodName    = "/illumio.cloud.config.v1.ConfigService/DeleteAzureFlowLogsStorageAccount"
	ConfigService_CreateAzureSubscription_FullMethodName              = "/illumio.cloud.config.v1.ConfigService/CreateAzureSubscription"
	ConfigService_ReadAzureSubscription_FullMethodName                = "/illumio.cloud.config.v1.ConfigService/ReadAzureSubscription"
	ConfigService_UpdateAzureSubscription_FullMethodName              = "/illumio.cloud.config.v1.ConfigService/UpdateAzureSubscription"
	ConfigService_DeleteAzureSubscription_FullMethodName              = "/illumio.cloud.config.v1.ConfigService/DeleteAzureSubscription"
	ConfigService_CreateDeployment_FullMethodName                     = "/illumio.cloud.config.v1.ConfigService/CreateDeployment"
	ConfigService_ReadDeployment_FullMethodName                       = "/illumio.cloud.config.v1.ConfigService/ReadDeployment"
	ConfigService_UpdateDeployment_FullMethodName                     = "/illumio.cloud.config.v1.ConfigService/UpdateDeployment"
	ConfigService_DeleteDeployment_FullMethodName                     = "/illumio.cloud.config.v1.ConfigService/DeleteDeployment"
	ConfigService_CreateK8SClusterOnboardingCredential_FullMethodName = "/illumio.cloud.config.v1.ConfigService/CreateK8SClusterOnboardingCredential"
	ConfigService_ReadK8SClusterOnboardingCredential_FullMethodName   = "/illumio.cloud.config.v1.ConfigService/ReadK8SClusterOnboardingCredential"
	ConfigService_UpdateK8SClusterOnboardingCredential_FullMethodName = "/illumio.cloud.config.v1.ConfigService/UpdateK8SClusterOnboardingCredential"
	ConfigService_DeleteK8SClusterOnboardingCredential_FullMethodName = "/illumio.cloud.config.v1.ConfigService/DeleteK8SClusterOnboardingCredential"
	ConfigService_CreateTagToLabel_FullMethodName                     = "/illumio.cloud.config.v1.ConfigService/CreateTagToLabel"
	ConfigService_ReadTagToLabel_FullMethodName                       = "/illumio.cloud.config.v1.ConfigService/ReadTagToLabel"
	ConfigService_UpdateTagToLabel_FullMethodName                     = "/illumio.cloud.config.v1.ConfigService/UpdateTagToLabel"
	ConfigService_DeleteTagToLabel_FullMethodName                     = "/illumio.cloud.config.v1.ConfigService/DeleteTagToLabel"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigServiceClient interface {
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error)
	ReadApplication(ctx context.Context, in *ReadApplicationRequest, opts ...grpc.CallOption) (*ReadApplicationResponse, error)
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error)
	DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateApplicationAwsResources(ctx context.Context, in *CreateApplicationAwsResourcesRequest, opts ...grpc.CallOption) (*CreateApplicationAwsResourcesResponse, error)
	ReadApplicationAwsResources(ctx context.Context, in *ReadApplicationAwsResourcesRequest, opts ...grpc.CallOption) (*ReadApplicationAwsResourcesResponse, error)
	UpdateApplicationAwsResources(ctx context.Context, in *UpdateApplicationAwsResourcesRequest, opts ...grpc.CallOption) (*UpdateApplicationAwsResourcesResponse, error)
	DeleteApplicationAwsResources(ctx context.Context, in *DeleteApplicationAwsResourcesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateApplicationAzureResources(ctx context.Context, in *CreateApplicationAzureResourcesRequest, opts ...grpc.CallOption) (*CreateApplicationAzureResourcesResponse, error)
	ReadApplicationAzureResources(ctx context.Context, in *ReadApplicationAzureResourcesRequest, opts ...grpc.CallOption) (*ReadApplicationAzureResourcesResponse, error)
	UpdateApplicationAzureResources(ctx context.Context, in *UpdateApplicationAzureResourcesRequest, opts ...grpc.CallOption) (*UpdateApplicationAzureResourcesResponse, error)
	DeleteApplicationAzureResources(ctx context.Context, in *DeleteApplicationAzureResourcesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAwsAccount(ctx context.Context, in *CreateAwsAccountRequest, opts ...grpc.CallOption) (*CreateAwsAccountResponse, error)
	ReadAwsAccount(ctx context.Context, in *ReadAwsAccountRequest, opts ...grpc.CallOption) (*ReadAwsAccountResponse, error)
	UpdateAwsAccount(ctx context.Context, in *UpdateAwsAccountRequest, opts ...grpc.CallOption) (*UpdateAwsAccountResponse, error)
	DeleteAwsAccount(ctx context.Context, in *DeleteAwsAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAwsFlowLogsS3Bucket(ctx context.Context, in *CreateAwsFlowLogsS3BucketRequest, opts ...grpc.CallOption) (*CreateAwsFlowLogsS3BucketResponse, error)
	ReadAwsFlowLogsS3Bucket(ctx context.Context, in *ReadAwsFlowLogsS3BucketRequest, opts ...grpc.CallOption) (*ReadAwsFlowLogsS3BucketResponse, error)
	UpdateAwsFlowLogsS3Bucket(ctx context.Context, in *UpdateAwsFlowLogsS3BucketRequest, opts ...grpc.CallOption) (*UpdateAwsFlowLogsS3BucketResponse, error)
	DeleteAwsFlowLogsS3Bucket(ctx context.Context, in *DeleteAwsFlowLogsS3BucketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAzureFlowLogsStorageAccount(ctx context.Context, in *CreateAzureFlowLogsStorageAccountRequest, opts ...grpc.CallOption) (*CreateAzureFlowLogsStorageAccountResponse, error)
	ReadAzureFlowLogsStorageAccount(ctx context.Context, in *ReadAzureFlowLogsStorageAccountRequest, opts ...grpc.CallOption) (*ReadAzureFlowLogsStorageAccountResponse, error)
	UpdateAzureFlowLogsStorageAccount(ctx context.Context, in *UpdateAzureFlowLogsStorageAccountRequest, opts ...grpc.CallOption) (*UpdateAzureFlowLogsStorageAccountResponse, error)
	DeleteAzureFlowLogsStorageAccount(ctx context.Context, in *DeleteAzureFlowLogsStorageAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAzureSubscription(ctx context.Context, in *CreateAzureSubscriptionRequest, opts ...grpc.CallOption) (*CreateAzureSubscriptionResponse, error)
	ReadAzureSubscription(ctx context.Context, in *ReadAzureSubscriptionRequest, opts ...grpc.CallOption) (*ReadAzureSubscriptionResponse, error)
	UpdateAzureSubscription(ctx context.Context, in *UpdateAzureSubscriptionRequest, opts ...grpc.CallOption) (*UpdateAzureSubscriptionResponse, error)
	DeleteAzureSubscription(ctx context.Context, in *DeleteAzureSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error)
	ReadDeployment(ctx context.Context, in *ReadDeploymentRequest, opts ...grpc.CallOption) (*ReadDeploymentResponse, error)
	UpdateDeployment(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*UpdateDeploymentResponse, error)
	DeleteDeployment(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateK8SClusterOnboardingCredential(ctx context.Context, in *CreateK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*CreateK8SClusterOnboardingCredentialResponse, error)
	ReadK8SClusterOnboardingCredential(ctx context.Context, in *ReadK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*ReadK8SClusterOnboardingCredentialResponse, error)
	UpdateK8SClusterOnboardingCredential(ctx context.Context, in *UpdateK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*UpdateK8SClusterOnboardingCredentialResponse, error)
	DeleteK8SClusterOnboardingCredential(ctx context.Context, in *DeleteK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateTagToLabel(ctx context.Context, in *CreateTagToLabelRequest, opts ...grpc.CallOption) (*CreateTagToLabelResponse, error)
	ReadTagToLabel(ctx context.Context, in *ReadTagToLabelRequest, opts ...grpc.CallOption) (*ReadTagToLabelResponse, error)
	UpdateTagToLabel(ctx context.Context, in *UpdateTagToLabelRequest, opts ...grpc.CallOption) (*UpdateTagToLabelResponse, error)
	DeleteTagToLabel(ctx context.Context, in *DeleteTagToLabelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateApplicationResponse)
	err := c.cc.Invoke(ctx, ConfigService_CreateApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadApplication(ctx context.Context, in *ReadApplicationRequest, opts ...grpc.CallOption) (*ReadApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadApplicationResponse)
	err := c.cc.Invoke(ctx, ConfigService_ReadApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateApplicationResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateApplicationAwsResources(ctx context.Context, in *CreateApplicationAwsResourcesRequest, opts ...grpc.CallOption) (*CreateApplicationAwsResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateApplicationAwsResourcesResponse)
	err := c.cc.Invoke(ctx, ConfigService_CreateApplicationAwsResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadApplicationAwsResources(ctx context.Context, in *ReadApplicationAwsResourcesRequest, opts ...grpc.CallOption) (*ReadApplicationAwsResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadApplicationAwsResourcesResponse)
	err := c.cc.Invoke(ctx, ConfigService_ReadApplicationAwsResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateApplicationAwsResources(ctx context.Context, in *UpdateApplicationAwsResourcesRequest, opts ...grpc.CallOption) (*UpdateApplicationAwsResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateApplicationAwsResourcesResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateApplicationAwsResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteApplicationAwsResources(ctx context.Context, in *DeleteApplicationAwsResourcesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteApplicationAwsResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateApplicationAzureResources(ctx context.Context, in *CreateApplicationAzureResourcesRequest, opts ...grpc.CallOption) (*CreateApplicationAzureResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateApplicationAzureResourcesResponse)
	err := c.cc.Invoke(ctx, ConfigService_CreateApplicationAzureResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadApplicationAzureResources(ctx context.Context, in *ReadApplicationAzureResourcesRequest, opts ...grpc.CallOption) (*ReadApplicationAzureResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadApplicationAzureResourcesResponse)
	err := c.cc.Invoke(ctx, ConfigService_ReadApplicationAzureResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateApplicationAzureResources(ctx context.Context, in *UpdateApplicationAzureResourcesRequest, opts ...grpc.CallOption) (*UpdateApplicationAzureResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateApplicationAzureResourcesResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateApplicationAzureResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteApplicationAzureResources(ctx context.Context, in *DeleteApplicationAzureResourcesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteApplicationAzureResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateAwsAccount(ctx context.Context, in *CreateAwsAccountRequest, opts ...grpc.CallOption) (*CreateAwsAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAwsAccountResponse)
	err := c.cc.Invoke(ctx, ConfigService_CreateAwsAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadAwsAccount(ctx context.Context, in *ReadAwsAccountRequest, opts ...grpc.CallOption) (*ReadAwsAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadAwsAccountResponse)
	err := c.cc.Invoke(ctx, ConfigService_ReadAwsAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateAwsAccount(ctx context.Context, in *UpdateAwsAccountRequest, opts ...grpc.CallOption) (*UpdateAwsAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAwsAccountResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateAwsAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteAwsAccount(ctx context.Context, in *DeleteAwsAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteAwsAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateAwsFlowLogsS3Bucket(ctx context.Context, in *CreateAwsFlowLogsS3BucketRequest, opts ...grpc.CallOption) (*CreateAwsFlowLogsS3BucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAwsFlowLogsS3BucketResponse)
	err := c.cc.Invoke(ctx, ConfigService_CreateAwsFlowLogsS3Bucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadAwsFlowLogsS3Bucket(ctx context.Context, in *ReadAwsFlowLogsS3BucketRequest, opts ...grpc.CallOption) (*ReadAwsFlowLogsS3BucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadAwsFlowLogsS3BucketResponse)
	err := c.cc.Invoke(ctx, ConfigService_ReadAwsFlowLogsS3Bucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateAwsFlowLogsS3Bucket(ctx context.Context, in *UpdateAwsFlowLogsS3BucketRequest, opts ...grpc.CallOption) (*UpdateAwsFlowLogsS3BucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAwsFlowLogsS3BucketResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateAwsFlowLogsS3Bucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteAwsFlowLogsS3Bucket(ctx context.Context, in *DeleteAwsFlowLogsS3BucketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteAwsFlowLogsS3Bucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateAzureFlowLogsStorageAccount(ctx context.Context, in *CreateAzureFlowLogsStorageAccountRequest, opts ...grpc.CallOption) (*CreateAzureFlowLogsStorageAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAzureFlowLogsStorageAccountResponse)
	err := c.cc.Invoke(ctx, ConfigService_CreateAzureFlowLogsStorageAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadAzureFlowLogsStorageAccount(ctx context.Context, in *ReadAzureFlowLogsStorageAccountRequest, opts ...grpc.CallOption) (*ReadAzureFlowLogsStorageAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadAzureFlowLogsStorageAccountResponse)
	err := c.cc.Invoke(ctx, ConfigService_ReadAzureFlowLogsStorageAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateAzureFlowLogsStorageAccount(ctx context.Context, in *UpdateAzureFlowLogsStorageAccountRequest, opts ...grpc.CallOption) (*UpdateAzureFlowLogsStorageAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAzureFlowLogsStorageAccountResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateAzureFlowLogsStorageAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteAzureFlowLogsStorageAccount(ctx context.Context, in *DeleteAzureFlowLogsStorageAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteAzureFlowLogsStorageAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateAzureSubscription(ctx context.Context, in *CreateAzureSubscriptionRequest, opts ...grpc.CallOption) (*CreateAzureSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAzureSubscriptionResponse)
	err := c.cc.Invoke(ctx, ConfigService_CreateAzureSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadAzureSubscription(ctx context.Context, in *ReadAzureSubscriptionRequest, opts ...grpc.CallOption) (*ReadAzureSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadAzureSubscriptionResponse)
	err := c.cc.Invoke(ctx, ConfigService_ReadAzureSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateAzureSubscription(ctx context.Context, in *UpdateAzureSubscriptionRequest, opts ...grpc.CallOption) (*UpdateAzureSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAzureSubscriptionResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateAzureSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteAzureSubscription(ctx context.Context, in *DeleteAzureSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteAzureSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDeploymentResponse)
	err := c.cc.Invoke(ctx, ConfigService_CreateDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadDeployment(ctx context.Context, in *ReadDeploymentRequest, opts ...grpc.CallOption) (*ReadDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadDeploymentResponse)
	err := c.cc.Invoke(ctx, ConfigService_ReadDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateDeployment(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*UpdateDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDeploymentResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteDeployment(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateK8SClusterOnboardingCredential(ctx context.Context, in *CreateK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*CreateK8SClusterOnboardingCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateK8SClusterOnboardingCredentialResponse)
	err := c.cc.Invoke(ctx, ConfigService_CreateK8SClusterOnboardingCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadK8SClusterOnboardingCredential(ctx context.Context, in *ReadK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*ReadK8SClusterOnboardingCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadK8SClusterOnboardingCredentialResponse)
	err := c.cc.Invoke(ctx, ConfigService_ReadK8SClusterOnboardingCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateK8SClusterOnboardingCredential(ctx context.Context, in *UpdateK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*UpdateK8SClusterOnboardingCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateK8SClusterOnboardingCredentialResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateK8SClusterOnboardingCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteK8SClusterOnboardingCredential(ctx context.Context, in *DeleteK8SClusterOnboardingCredentialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteK8SClusterOnboardingCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) CreateTagToLabel(ctx context.Context, in *CreateTagToLabelRequest, opts ...grpc.CallOption) (*CreateTagToLabelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTagToLabelResponse)
	err := c.cc.Invoke(ctx, ConfigService_CreateTagToLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ReadTagToLabel(ctx context.Context, in *ReadTagToLabelRequest, opts ...grpc.CallOption) (*ReadTagToLabelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadTagToLabelResponse)
	err := c.cc.Invoke(ctx, ConfigService_ReadTagToLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateTagToLabel(ctx context.Context, in *UpdateTagToLabelRequest, opts ...grpc.CallOption) (*UpdateTagToLabelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTagToLabelResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateTagToLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteTagToLabel(ctx context.Context, in *DeleteTagToLabelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteTagToLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations must embed UnimplementedConfigServiceServer
// for forward compatibility.
type ConfigServiceServer interface {
	CreateApplication(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error)
	ReadApplication(context.Context, *ReadApplicationRequest) (*ReadApplicationResponse, error)
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*UpdateApplicationResponse, error)
	DeleteApplication(context.Context, *DeleteApplicationRequest) (*emptypb.Empty, error)
	CreateApplicationAwsResources(context.Context, *CreateApplicationAwsResourcesRequest) (*CreateApplicationAwsResourcesResponse, error)
	ReadApplicationAwsResources(context.Context, *ReadApplicationAwsResourcesRequest) (*ReadApplicationAwsResourcesResponse, error)
	UpdateApplicationAwsResources(context.Context, *UpdateApplicationAwsResourcesRequest) (*UpdateApplicationAwsResourcesResponse, error)
	DeleteApplicationAwsResources(context.Context, *DeleteApplicationAwsResourcesRequest) (*emptypb.Empty, error)
	CreateApplicationAzureResources(context.Context, *CreateApplicationAzureResourcesRequest) (*CreateApplicationAzureResourcesResponse, error)
	ReadApplicationAzureResources(context.Context, *ReadApplicationAzureResourcesRequest) (*ReadApplicationAzureResourcesResponse, error)
	UpdateApplicationAzureResources(context.Context, *UpdateApplicationAzureResourcesRequest) (*UpdateApplicationAzureResourcesResponse, error)
	DeleteApplicationAzureResources(context.Context, *DeleteApplicationAzureResourcesRequest) (*emptypb.Empty, error)
	CreateAwsAccount(context.Context, *CreateAwsAccountRequest) (*CreateAwsAccountResponse, error)
	ReadAwsAccount(context.Context, *ReadAwsAccountRequest) (*ReadAwsAccountResponse, error)
	UpdateAwsAccount(context.Context, *UpdateAwsAccountRequest) (*UpdateAwsAccountResponse, error)
	DeleteAwsAccount(context.Context, *DeleteAwsAccountRequest) (*emptypb.Empty, error)
	CreateAwsFlowLogsS3Bucket(context.Context, *CreateAwsFlowLogsS3BucketRequest) (*CreateAwsFlowLogsS3BucketResponse, error)
	ReadAwsFlowLogsS3Bucket(context.Context, *ReadAwsFlowLogsS3BucketRequest) (*ReadAwsFlowLogsS3BucketResponse, error)
	UpdateAwsFlowLogsS3Bucket(context.Context, *UpdateAwsFlowLogsS3BucketRequest) (*UpdateAwsFlowLogsS3BucketResponse, error)
	DeleteAwsFlowLogsS3Bucket(context.Context, *DeleteAwsFlowLogsS3BucketRequest) (*emptypb.Empty, error)
	CreateAzureFlowLogsStorageAccount(context.Context, *CreateAzureFlowLogsStorageAccountRequest) (*CreateAzureFlowLogsStorageAccountResponse, error)
	ReadAzureFlowLogsStorageAccount(context.Context, *ReadAzureFlowLogsStorageAccountRequest) (*ReadAzureFlowLogsStorageAccountResponse, error)
	UpdateAzureFlowLogsStorageAccount(context.Context, *UpdateAzureFlowLogsStorageAccountRequest) (*UpdateAzureFlowLogsStorageAccountResponse, error)
	DeleteAzureFlowLogsStorageAccount(context.Context, *DeleteAzureFlowLogsStorageAccountRequest) (*emptypb.Empty, error)
	CreateAzureSubscription(context.Context, *CreateAzureSubscriptionRequest) (*CreateAzureSubscriptionResponse, error)
	ReadAzureSubscription(context.Context, *ReadAzureSubscriptionRequest) (*ReadAzureSubscriptionResponse, error)
	UpdateAzureSubscription(context.Context, *UpdateAzureSubscriptionRequest) (*UpdateAzureSubscriptionResponse, error)
	DeleteAzureSubscription(context.Context, *DeleteAzureSubscriptionRequest) (*emptypb.Empty, error)
	CreateDeployment(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error)
	ReadDeployment(context.Context, *ReadDeploymentRequest) (*ReadDeploymentResponse, error)
	UpdateDeployment(context.Context, *UpdateDeploymentRequest) (*UpdateDeploymentResponse, error)
	DeleteDeployment(context.Context, *DeleteDeploymentRequest) (*emptypb.Empty, error)
	CreateK8SClusterOnboardingCredential(context.Context, *CreateK8SClusterOnboardingCredentialRequest) (*CreateK8SClusterOnboardingCredentialResponse, error)
	ReadK8SClusterOnboardingCredential(context.Context, *ReadK8SClusterOnboardingCredentialRequest) (*ReadK8SClusterOnboardingCredentialResponse, error)
	UpdateK8SClusterOnboardingCredential(context.Context, *UpdateK8SClusterOnboardingCredentialRequest) (*UpdateK8SClusterOnboardingCredentialResponse, error)
	DeleteK8SClusterOnboardingCredential(context.Context, *DeleteK8SClusterOnboardingCredentialRequest) (*emptypb.Empty, error)
	CreateTagToLabel(context.Context, *CreateTagToLabelRequest) (*CreateTagToLabelResponse, error)
	ReadTagToLabel(context.Context, *ReadTagToLabelRequest) (*ReadTagToLabelResponse, error)
	UpdateTagToLabel(context.Context, *UpdateTagToLabelRequest) (*UpdateTagToLabelResponse, error)
	DeleteTagToLabel(context.Context, *DeleteTagToLabelRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedConfigServiceServer()
}

// UnimplementedConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigServiceServer struct{}

func (UnimplementedConfigServiceServer) CreateApplication(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplication not implemented")
}
func (UnimplementedConfigServiceServer) ReadApplication(context.Context, *ReadApplicationRequest) (*ReadApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadApplication not implemented")
}
func (UnimplementedConfigServiceServer) UpdateApplication(context.Context, *UpdateApplicationRequest) (*UpdateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedConfigServiceServer) DeleteApplication(context.Context, *DeleteApplicationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedConfigServiceServer) CreateApplicationAwsResources(context.Context, *CreateApplicationAwsResourcesRequest) (*CreateApplicationAwsResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplicationAwsResources not implemented")
}
func (UnimplementedConfigServiceServer) ReadApplicationAwsResources(context.Context, *ReadApplicationAwsResourcesRequest) (*ReadApplicationAwsResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadApplicationAwsResources not implemented")
}
func (UnimplementedConfigServiceServer) UpdateApplicationAwsResources(context.Context, *UpdateApplicationAwsResourcesRequest) (*UpdateApplicationAwsResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationAwsResources not implemented")
}
func (UnimplementedConfigServiceServer) DeleteApplicationAwsResources(context.Context, *DeleteApplicationAwsResourcesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicationAwsResources not implemented")
}
func (UnimplementedConfigServiceServer) CreateApplicationAzureResources(context.Context, *CreateApplicationAzureResourcesRequest) (*CreateApplicationAzureResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplicationAzureResources not implemented")
}
func (UnimplementedConfigServiceServer) ReadApplicationAzureResources(context.Context, *ReadApplicationAzureResourcesRequest) (*ReadApplicationAzureResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadApplicationAzureResources not implemented")
}
func (UnimplementedConfigServiceServer) UpdateApplicationAzureResources(context.Context, *UpdateApplicationAzureResourcesRequest) (*UpdateApplicationAzureResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationAzureResources not implemented")
}
func (UnimplementedConfigServiceServer) DeleteApplicationAzureResources(context.Context, *DeleteApplicationAzureResourcesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicationAzureResources not implemented")
}
func (UnimplementedConfigServiceServer) CreateAwsAccount(context.Context, *CreateAwsAccountRequest) (*CreateAwsAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAwsAccount not implemented")
}
func (UnimplementedConfigServiceServer) ReadAwsAccount(context.Context, *ReadAwsAccountRequest) (*ReadAwsAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAwsAccount not implemented")
}
func (UnimplementedConfigServiceServer) UpdateAwsAccount(context.Context, *UpdateAwsAccountRequest) (*UpdateAwsAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAwsAccount not implemented")
}
func (UnimplementedConfigServiceServer) DeleteAwsAccount(context.Context, *DeleteAwsAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAwsAccount not implemented")
}
func (UnimplementedConfigServiceServer) CreateAwsFlowLogsS3Bucket(context.Context, *CreateAwsFlowLogsS3BucketRequest) (*CreateAwsFlowLogsS3BucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAwsFlowLogsS3Bucket not implemented")
}
func (UnimplementedConfigServiceServer) ReadAwsFlowLogsS3Bucket(context.Context, *ReadAwsFlowLogsS3BucketRequest) (*ReadAwsFlowLogsS3BucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAwsFlowLogsS3Bucket not implemented")
}
func (UnimplementedConfigServiceServer) UpdateAwsFlowLogsS3Bucket(context.Context, *UpdateAwsFlowLogsS3BucketRequest) (*UpdateAwsFlowLogsS3BucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAwsFlowLogsS3Bucket not implemented")
}
func (UnimplementedConfigServiceServer) DeleteAwsFlowLogsS3Bucket(context.Context, *DeleteAwsFlowLogsS3BucketRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAwsFlowLogsS3Bucket not implemented")
}
func (UnimplementedConfigServiceServer) CreateAzureFlowLogsStorageAccount(context.Context, *CreateAzureFlowLogsStorageAccountRequest) (*CreateAzureFlowLogsStorageAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAzureFlowLogsStorageAccount not implemented")
}
func (UnimplementedConfigServiceServer) ReadAzureFlowLogsStorageAccount(context.Context, *ReadAzureFlowLogsStorageAccountRequest) (*ReadAzureFlowLogsStorageAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAzureFlowLogsStorageAccount not implemented")
}
func (UnimplementedConfigServiceServer) UpdateAzureFlowLogsStorageAccount(context.Context, *UpdateAzureFlowLogsStorageAccountRequest) (*UpdateAzureFlowLogsStorageAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAzureFlowLogsStorageAccount not implemented")
}
func (UnimplementedConfigServiceServer) DeleteAzureFlowLogsStorageAccount(context.Context, *DeleteAzureFlowLogsStorageAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAzureFlowLogsStorageAccount not implemented")
}
func (UnimplementedConfigServiceServer) CreateAzureSubscription(context.Context, *CreateAzureSubscriptionRequest) (*CreateAzureSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAzureSubscription not implemented")
}
func (UnimplementedConfigServiceServer) ReadAzureSubscription(context.Context, *ReadAzureSubscriptionRequest) (*ReadAzureSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAzureSubscription not implemented")
}
func (UnimplementedConfigServiceServer) UpdateAzureSubscription(context.Context, *UpdateAzureSubscriptionRequest) (*UpdateAzureSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAzureSubscription not implemented")
}
func (UnimplementedConfigServiceServer) DeleteAzureSubscription(context.Context, *DeleteAzureSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAzureSubscription not implemented")
}
func (UnimplementedConfigServiceServer) CreateDeployment(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedConfigServiceServer) ReadDeployment(context.Context, *ReadDeploymentRequest) (*ReadDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDeployment not implemented")
}
func (UnimplementedConfigServiceServer) UpdateDeployment(context.Context, *UpdateDeploymentRequest) (*UpdateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeployment not implemented")
}
func (UnimplementedConfigServiceServer) DeleteDeployment(context.Context, *DeleteDeploymentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (UnimplementedConfigServiceServer) CreateK8SClusterOnboardingCredential(context.Context, *CreateK8SClusterOnboardingCredentialRequest) (*CreateK8SClusterOnboardingCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateK8SClusterOnboardingCredential not implemented")
}
func (UnimplementedConfigServiceServer) ReadK8SClusterOnboardingCredential(context.Context, *ReadK8SClusterOnboardingCredentialRequest) (*ReadK8SClusterOnboardingCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadK8SClusterOnboardingCredential not implemented")
}
func (UnimplementedConfigServiceServer) UpdateK8SClusterOnboardingCredential(context.Context, *UpdateK8SClusterOnboardingCredentialRequest) (*UpdateK8SClusterOnboardingCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateK8SClusterOnboardingCredential not implemented")
}
func (UnimplementedConfigServiceServer) DeleteK8SClusterOnboardingCredential(context.Context, *DeleteK8SClusterOnboardingCredentialRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteK8SClusterOnboardingCredential not implemented")
}
func (UnimplementedConfigServiceServer) CreateTagToLabel(context.Context, *CreateTagToLabelRequest) (*CreateTagToLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTagToLabel not implemented")
}
func (UnimplementedConfigServiceServer) ReadTagToLabel(context.Context, *ReadTagToLabelRequest) (*ReadTagToLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTagToLabel not implemented")
}
func (UnimplementedConfigServiceServer) UpdateTagToLabel(context.Context, *UpdateTagToLabelRequest) (*UpdateTagToLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTagToLabel not implemented")
}
func (UnimplementedConfigServiceServer) DeleteTagToLabel(context.Context, *DeleteTagToLabelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTagToLabel not implemented")
}
func (UnimplementedConfigServiceServer) mustEmbedUnimplementedConfigServiceServer() {}
func (UnimplementedConfigServiceServer) testEmbeddedByValue()                       {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_CreateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadApplication(ctx, req.(*ReadApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteApplication(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateApplicationAwsResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationAwsResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateApplicationAwsResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_CreateApplicationAwsResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateApplicationAwsResources(ctx, req.(*CreateApplicationAwsResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadApplicationAwsResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadApplicationAwsResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadApplicationAwsResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadApplicationAwsResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadApplicationAwsResources(ctx, req.(*ReadApplicationAwsResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateApplicationAwsResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationAwsResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateApplicationAwsResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateApplicationAwsResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateApplicationAwsResources(ctx, req.(*UpdateApplicationAwsResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteApplicationAwsResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationAwsResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteApplicationAwsResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteApplicationAwsResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteApplicationAwsResources(ctx, req.(*DeleteApplicationAwsResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateApplicationAzureResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationAzureResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateApplicationAzureResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_CreateApplicationAzureResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateApplicationAzureResources(ctx, req.(*CreateApplicationAzureResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadApplicationAzureResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadApplicationAzureResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadApplicationAzureResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadApplicationAzureResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadApplicationAzureResources(ctx, req.(*ReadApplicationAzureResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateApplicationAzureResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationAzureResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateApplicationAzureResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateApplicationAzureResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateApplicationAzureResources(ctx, req.(*UpdateApplicationAzureResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteApplicationAzureResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationAzureResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteApplicationAzureResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteApplicationAzureResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteApplicationAzureResources(ctx, req.(*DeleteApplicationAzureResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateAwsAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAwsAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateAwsAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_CreateAwsAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateAwsAccount(ctx, req.(*CreateAwsAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadAwsAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAwsAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadAwsAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadAwsAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadAwsAccount(ctx, req.(*ReadAwsAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateAwsAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAwsAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateAwsAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateAwsAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateAwsAccount(ctx, req.(*UpdateAwsAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteAwsAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAwsAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteAwsAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteAwsAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteAwsAccount(ctx, req.(*DeleteAwsAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateAwsFlowLogsS3Bucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAwsFlowLogsS3BucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateAwsFlowLogsS3Bucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_CreateAwsFlowLogsS3Bucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateAwsFlowLogsS3Bucket(ctx, req.(*CreateAwsFlowLogsS3BucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadAwsFlowLogsS3Bucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAwsFlowLogsS3BucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadAwsFlowLogsS3Bucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadAwsFlowLogsS3Bucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadAwsFlowLogsS3Bucket(ctx, req.(*ReadAwsFlowLogsS3BucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateAwsFlowLogsS3Bucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAwsFlowLogsS3BucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateAwsFlowLogsS3Bucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateAwsFlowLogsS3Bucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateAwsFlowLogsS3Bucket(ctx, req.(*UpdateAwsFlowLogsS3BucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteAwsFlowLogsS3Bucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAwsFlowLogsS3BucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteAwsFlowLogsS3Bucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteAwsFlowLogsS3Bucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteAwsFlowLogsS3Bucket(ctx, req.(*DeleteAwsFlowLogsS3BucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateAzureFlowLogsStorageAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAzureFlowLogsStorageAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateAzureFlowLogsStorageAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_CreateAzureFlowLogsStorageAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateAzureFlowLogsStorageAccount(ctx, req.(*CreateAzureFlowLogsStorageAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadAzureFlowLogsStorageAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAzureFlowLogsStorageAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadAzureFlowLogsStorageAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadAzureFlowLogsStorageAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadAzureFlowLogsStorageAccount(ctx, req.(*ReadAzureFlowLogsStorageAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateAzureFlowLogsStorageAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAzureFlowLogsStorageAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateAzureFlowLogsStorageAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateAzureFlowLogsStorageAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateAzureFlowLogsStorageAccount(ctx, req.(*UpdateAzureFlowLogsStorageAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteAzureFlowLogsStorageAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAzureFlowLogsStorageAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteAzureFlowLogsStorageAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteAzureFlowLogsStorageAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteAzureFlowLogsStorageAccount(ctx, req.(*DeleteAzureFlowLogsStorageAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateAzureSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAzureSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateAzureSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_CreateAzureSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateAzureSubscription(ctx, req.(*CreateAzureSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadAzureSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAzureSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadAzureSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadAzureSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadAzureSubscription(ctx, req.(*ReadAzureSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateAzureSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAzureSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateAzureSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateAzureSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateAzureSubscription(ctx, req.(*UpdateAzureSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteAzureSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAzureSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteAzureSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteAzureSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteAzureSubscription(ctx, req.(*DeleteAzureSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_CreateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateDeployment(ctx, req.(*CreateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadDeployment(ctx, req.(*ReadDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateDeployment(ctx, req.(*UpdateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteDeployment(ctx, req.(*DeleteDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateK8SClusterOnboardingCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateK8SClusterOnboardingCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateK8SClusterOnboardingCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_CreateK8SClusterOnboardingCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateK8SClusterOnboardingCredential(ctx, req.(*CreateK8SClusterOnboardingCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadK8SClusterOnboardingCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadK8SClusterOnboardingCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadK8SClusterOnboardingCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadK8SClusterOnboardingCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadK8SClusterOnboardingCredential(ctx, req.(*ReadK8SClusterOnboardingCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateK8SClusterOnboardingCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateK8SClusterOnboardingCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateK8SClusterOnboardingCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateK8SClusterOnboardingCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateK8SClusterOnboardingCredential(ctx, req.(*UpdateK8SClusterOnboardingCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteK8SClusterOnboardingCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteK8SClusterOnboardingCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteK8SClusterOnboardingCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteK8SClusterOnboardingCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteK8SClusterOnboardingCredential(ctx, req.(*DeleteK8SClusterOnboardingCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_CreateTagToLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagToLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateTagToLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_CreateTagToLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateTagToLabel(ctx, req.(*CreateTagToLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ReadTagToLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTagToLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ReadTagToLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ReadTagToLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ReadTagToLabel(ctx, req.(*ReadTagToLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateTagToLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagToLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateTagToLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateTagToLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateTagToLabel(ctx, req.(*UpdateTagToLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteTagToLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagToLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteTagToLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteTagToLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteTagToLabel(ctx, req.(*DeleteTagToLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "illumio.cloud.config.v1.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApplication",
			Handler:    _ConfigService_CreateApplication_Handler,
		},
		{
			MethodName: "ReadApplication",
			Handler:    _ConfigService_ReadApplication_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _ConfigService_UpdateApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _ConfigService_DeleteApplication_Handler,
		},
		{
			MethodName: "CreateApplicationAwsResources",
			Handler:    _ConfigService_CreateApplicationAwsResources_Handler,
		},
		{
			MethodName: "ReadApplicationAwsResources",
			Handler:    _ConfigService_ReadApplicationAwsResources_Handler,
		},
		{
			MethodName: "UpdateApplicationAwsResources",
			Handler:    _ConfigService_UpdateApplicationAwsResources_Handler,
		},
		{
			MethodName: "DeleteApplicationAwsResources",
			Handler:    _ConfigService_DeleteApplicationAwsResources_Handler,
		},
		{
			MethodName: "CreateApplicationAzureResources",
			Handler:    _ConfigService_CreateApplicationAzureResources_Handler,
		},
		{
			MethodName: "ReadApplicationAzureResources",
			Handler:    _ConfigService_ReadApplicationAzureResources_Handler,
		},
		{
			MethodName: "UpdateApplicationAzureResources",
			Handler:    _ConfigService_UpdateApplicationAzureResources_Handler,
		},
		{
			MethodName: "DeleteApplicationAzureResources",
			Handler:    _ConfigService_DeleteApplicationAzureResources_Handler,
		},
		{
			MethodName: "CreateAwsAccount",
			Handler:    _ConfigService_CreateAwsAccount_Handler,
		},
		{
			MethodName: "ReadAwsAccount",
			Handler:    _ConfigService_ReadAwsAccount_Handler,
		},
		{
			MethodName: "UpdateAwsAccount",
			Handler:    _ConfigService_UpdateAwsAccount_Handler,
		},
		{
			MethodName: "DeleteAwsAccount",
			Handler:    _ConfigService_DeleteAwsAccount_Handler,
		},
		{
			MethodName: "CreateAwsFlowLogsS3Bucket",
			Handler:    _ConfigService_CreateAwsFlowLogsS3Bucket_Handler,
		},
		{
			MethodName: "ReadAwsFlowLogsS3Bucket",
			Handler:    _ConfigService_ReadAwsFlowLogsS3Bucket_Handler,
		},
		{
			MethodName: "UpdateAwsFlowLogsS3Bucket",
			Handler:    _ConfigService_UpdateAwsFlowLogsS3Bucket_Handler,
		},
		{
			MethodName: "DeleteAwsFlowLogsS3Bucket",
			Handler:    _ConfigService_DeleteAwsFlowLogsS3Bucket_Handler,
		},
		{
			MethodName: "CreateAzureFlowLogsStorageAccount",
			Handler:    _ConfigService_CreateAzureFlowLogsStorageAccount_Handler,
		},
		{
			MethodName: "ReadAzureFlowLogsStorageAccount",
			Handler:    _ConfigService_ReadAzureFlowLogsStorageAccount_Handler,
		},
		{
			MethodName: "UpdateAzureFlowLogsStorageAccount",
			Handler:    _ConfigService_UpdateAzureFlowLogsStorageAccount_Handler,
		},
		{
			MethodName: "DeleteAzureFlowLogsStorageAccount",
			Handler:    _ConfigService_DeleteAzureFlowLogsStorageAccount_Handler,
		},
		{
			MethodName: "CreateAzureSubscription",
			Handler:    _ConfigService_CreateAzureSubscription_Handler,
		},
		{
			MethodName: "ReadAzureSubscription",
			Handler:    _ConfigService_ReadAzureSubscription_Handler,
		},
		{
			MethodName: "UpdateAzureSubscription",
			Handler:    _ConfigService_UpdateAzureSubscription_Handler,
		},
		{
			MethodName: "DeleteAzureSubscription",
			Handler:    _ConfigService_DeleteAzureSubscription_Handler,
		},
		{
			MethodName: "CreateDeployment",
			Handler:    _ConfigService_CreateDeployment_Handler,
		},
		{
			MethodName: "ReadDeployment",
			Handler:    _ConfigService_ReadDeployment_Handler,
		},
		{
			MethodName: "UpdateDeployment",
			Handler:    _ConfigService_UpdateDeployment_Handler,
		},
		{
			MethodName: "DeleteDeployment",
			Handler:    _ConfigService_DeleteDeployment_Handler,
		},
		{
			MethodName: "CreateK8SClusterOnboardingCredential",
			Handler:    _ConfigService_CreateK8SClusterOnboardingCredential_Handler,
		},
		{
			MethodName: "ReadK8SClusterOnboardingCredential",
			Handler:    _ConfigService_ReadK8SClusterOnboardingCredential_Handler,
		},
		{
			MethodName: "UpdateK8SClusterOnboardingCredential",
			Handler:    _ConfigService_UpdateK8SClusterOnboardingCredential_Handler,
		},
		{
			MethodName: "DeleteK8SClusterOnboardingCredential",
			Handler:    _ConfigService_DeleteK8SClusterOnboardingCredential_Handler,
		},
		{
			MethodName: "CreateTagToLabel",
			Handler:    _ConfigService_CreateTagToLabel_Handler,
		},
		{
			MethodName: "ReadTagToLabel",
			Handler:    _ConfigService_ReadTagToLabel_Handler,
		},
		{
			MethodName: "UpdateTagToLabel",
			Handler:    _ConfigService_UpdateTagToLabel_Handler,
		},
		{
			MethodName: "DeleteTagToLabel",
			Handler:    _ConfigService_DeleteTagToLabel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "illumio/cloud/config/v1/config.proto",
}
